::===----------------------------------------------------------------------===//
:: Copyright Â© 2025 Apple Inc. and the Pkl project authors. All rights reserved.
::
:: Licensed under the Apache License, Version 2.0 (the "License");
:: you may not use this file except in compliance with the License.
:: You may obtain a copy of the License at
::
::     https://www.apache.org/licenses/LICENSE-2.0
::
:: Unless required by applicable law or agreed to in writing, software
:: distributed under the License is distributed on an "AS IS" BASIS,
:: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
:: See the License for the specific language governing permissions and
:: limitations under the License.
::===----------------------------------------------------------------------===//
@echo off
setlocal EnableDelayedExpansion

REM Adapted from https://github.com/oracle/graal/issues/3053#issuecomment-1866735057
REM This script intercepts compiler arguments generated by GraalVM's native-image for
REM creating a shared library, and generates both shared and static libraries. The
REM output path has to be specified relative to this script because GraalVM builds
REM in a local temp directory and does not specify the output path anywhere.
REM
REM Use with --native-compiler-path=${pathToThisScript}.bat
set OUTPUT_PATH=%~dp0\..\..\target\image

REM Determine the library name based on the .dll argument. ~nP returns the filename
REM without quotes, i.e., "path\myLibrary.dll" returns myLibrary
set LIB_NAME=
for %%P in (%*) do (
    echo %%P | findstr /C:"\.dll" 1>nul
    if !errorlevel!==0 (
        set LIB_NAME=%%~nP
    )
)

REM Do a simple forward for any calls that are used to compile individual C files
IF "%LIB_NAME%"=="" (
    cmd /c cl %*
    exit /b
)

REM Setup log path and log file
set LOG_PATH=%OUTPUT_PATH%\logs
set LOG_FILE=%LOG_PATH%\compiler_commands.txt
if not exist %LOG_PATH% mkdir %LOG_PATH%

echo Working directory: %CD% > %LOG_FILE%
echo Output path: %OUTPUT_PATH% >> %LOG_FILE%
echo Library name: %LIB_NAME% >> %LOG_FILE%

echo ===================================================== >> %LOG_FILE%
echo                   SHARED LIBRARY                      >> %LOG_FILE%
echo ===================================================== >> %LOG_FILE%
REM Modify the arguments if needed
set CL_ARGS=%*
echo cl.exe %CL_ARGS% >> %LOG_FILE%
cmd /c cl.exe %CL_ARGS%

echo ===================================================== >> %LOG_FILE%
echo                   STATIC LIBRARY                      >> %LOG_FILE%
echo ===================================================== >> %LOG_FILE%
REM To create a static library on Windows we need to call lib.exe input.obj /OUT:output.lib
REM We don't want to overwrite the .lib needed to compile against the .dll, so
REM we append "_s" to indicate that it is a static library.
if not exist %OUTPUT_PATH% mkdir %OUTPUT_PATH%
set LIB_ARGS=%LIB_NAME%.obj /OUT:%OUTPUT_PATH%\%LIB_NAME%_s.lib
echo lib.exe %LIB_ARGS% >> %LOG_FILE%
cmd /c lib.exe %LIB_ARGS%
