package my;

import java.lang.Override;
import java.lang.String;
import java.util.function.Consumer;
import org.pkl.codegen.java.common.code.Wither;
import org.pkl.config.java.mapper.Named;
import org.pkl.config.java.mapper.NonNull;
import org.pkl.core.Duration;

public record Mod() {
  public interface Foo {
    long one();
  }

  public interface INone extends Foo {
  }

  public record None(@Named("one") long one) implements Foo, INone, Wither<None, None.Memento> {
    @Override
    public None with(final Consumer<Memento> setter) {
      final var memento = new Memento(this);
      setter.accept(memento);
      return memento.build();
    }

    public static final class Memento {
      public long one;

      private Memento(final None r) {
        one = r.one;
      }

      private None build() {
        return new None(one);
      }
    }
  }

  public interface IBar extends INone {
    String two();
  }

  public record Bar(@Named("one") long one,
      @Named("two") String two) implements INone, IBar, Wither<Bar, Bar.Memento> {
    @Override
    public Bar with(final Consumer<Memento> setter) {
      final var memento = new Memento(this);
      setter.accept(memento);
      return memento.build();
    }

    public static final class Memento {
      public long one;

      public String two;

      private Memento(final Bar r) {
        one = r.one;
        two = r.two;
      }

      private Bar build() {
        return new Bar(one, two);
      }
    }
  }

  public record Baz(@Named("one") long one, @Named("two") String two,
      @Named("three") @NonNull Duration three) implements IBar, Wither<Baz, Baz.Memento> {
    @Override
    public Baz with(final Consumer<Memento> setter) {
      final var memento = new Memento(this);
      setter.accept(memento);
      return memento.build();
    }

    public static final class Memento {
      public long one;

      public String two;

      public @NonNull Duration three;

      private Memento(final Baz r) {
        one = r.one;
        two = r.two;
        three = r.three;
      }

      private Baz build() {
        return new Baz(one, two, three);
      }
    }
  }
}
