package my;

import java.lang.String;
import org.pkl.config.java.mapper.Named;
import org.pkl.config.java.mapper.NonNull;
<1<
import java.lang.Override;
import java.util.function.Consumer;
import org.pkl.codegen.java.common.code.Wither;
>1>
<2<
import lombok.Builder;
>2>

/**
 * module comment.
 * *emphasized* `code`.
 *
 * @param pigeon module property comment.
 * *emphasized* `code`.
 */
public record Mod(
    @Named("pigeon") Mod. @NonNull Person pigeon) <1< implements Wither<Mod, Mod.Memento> >1> {
<1<    
  @Override
  public @NonNull Mod with(final @NonNull Consumer<Memento> setter) {
    final var memento = new Memento(this);
    setter.accept(memento);
    return memento.build();
  }

  public static final class Memento {
    public @NonNull Person pigeon;

    private Memento(final @NonNull Mod r) {
      pigeon = r.pigeon;
    }

    private @NonNull Mod build() {
      return new Mod(pigeon);
    }
  }
>1>  

  /**
   * class comment.
   * *emphasized* `code`.
   *
   * @param name class property comment.
   * *emphasized* `code`.
   */
<2< @Builder >2> 
  public record Person(
      @Named("name") @NonNull String name) <1< implements Wither<Person, Person.Memento> >1> {
<1<      
    @Override
    public @NonNull Person with(final @NonNull Consumer<Memento> setter) {
      final var memento = new Memento(this);
      setter.accept(memento);
      return memento.build();
    }

    public static final class Memento {
      public @NonNull String name;

      private Memento(final @NonNull Person r) {
        name = r.name;
      }

      private @NonNull Person build() {
        return new Person(name);
      }
    }
>1>    
  }
}
