public class org/pkl/core/Analyzer {
	public fun <init> (Lorg/pkl/core/StackFrameTransformer;ZLorg/pkl/core/SecurityManager;Ljava/util/Collection;Ljava/nio/file/Path;Lorg/pkl/core/project/DeclaredDependencies;Lorg/pkl/core/http/HttpClient;)V
	public fun importGraph ([Ljava/net/URI;)Lorg/pkl/core/ImportGraph;
}

public final class org/pkl/core/BufferedLogger : org/pkl/core/Logger {
	public fun <init> (Lorg/pkl/core/Logger;)V
	public fun clear ()V
	public fun getLogs ()Ljava/lang/String;
	public fun trace (Ljava/lang/String;Lorg/pkl/core/StackFrame;)V
	public fun warn (Ljava/lang/String;Lorg/pkl/core/StackFrame;)V
}

public final class org/pkl/core/Closeables {
	public static fun closeQuietly (Ljava/lang/Iterable;)V
}

public abstract interface class org/pkl/core/Composite : org/pkl/core/Value {
	public fun get (Ljava/lang/String;)Ljava/lang/Object;
	public abstract fun getProperties ()Ljava/util/Map;
	public abstract fun getProperty (Ljava/lang/String;)Ljava/lang/Object;
	public fun getPropertyOrNull (Ljava/lang/String;)Ljava/lang/Object;
	public fun hasProperty (Ljava/lang/String;)Z
}

public final class org/pkl/core/DataSize : org/pkl/core/Value {
	public fun <init> (DLorg/pkl/core/DataSizeUnit;)V
	public fun accept (Lorg/pkl/core/ValueConverter;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/ValueVisitor;)V
	public fun convertTo (Lorg/pkl/core/DataSizeUnit;)Lorg/pkl/core/DataSize;
	public fun convertValueTo (Lorg/pkl/core/DataSizeUnit;)D
	public fun equals (Ljava/lang/Object;)Z
	public fun getClassInfo ()Lorg/pkl/core/PClassInfo;
	public fun getUnit ()Lorg/pkl/core/DataSizeUnit;
	public fun getValue ()D
	public fun hashCode ()I
	public fun inBytes ()D
	public fun inGibibytes ()D
	public fun inGigabytes ()D
	public fun inKibibytes ()D
	public fun inKilobytes ()D
	public fun inMebibytes ()D
	public fun inMegabytes ()D
	public fun inPebibytes ()D
	public fun inPetabytes ()D
	public fun inTebibytes ()D
	public fun inTerabytes ()D
	public fun inWholeBytes ()J
	public fun inWholeGibibytes ()J
	public fun inWholeGigabytes ()J
	public fun inWholeKibibytes ()J
	public fun inWholeKilobytes ()J
	public fun inWholeMebibytes ()J
	public fun inWholeMegabytes ()J
	public fun inWholePebibytes ()J
	public fun inWholePetabytes ()J
	public fun inWholeTebibytes ()J
	public fun inWholeTerabytes ()J
	public static fun ofBytes (D)Lorg/pkl/core/DataSize;
	public static fun ofGibibytes (D)Lorg/pkl/core/DataSize;
	public static fun ofGigabytes (D)Lorg/pkl/core/DataSize;
	public static fun ofKibibytes (D)Lorg/pkl/core/DataSize;
	public static fun ofKilobytes (D)Lorg/pkl/core/DataSize;
	public static fun ofMebibytes (D)Lorg/pkl/core/DataSize;
	public static fun ofMegabytes (D)Lorg/pkl/core/DataSize;
	public static fun ofPebibytes (D)Lorg/pkl/core/DataSize;
	public static fun ofPetabytes (D)Lorg/pkl/core/DataSize;
	public static fun ofTebibytes (D)Lorg/pkl/core/DataSize;
	public static fun ofTerabytes (D)Lorg/pkl/core/DataSize;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/DataSizeUnit : java/lang/Enum {
	public static final field BYTES Lorg/pkl/core/DataSizeUnit;
	public static final field GIBIBYTES Lorg/pkl/core/DataSizeUnit;
	public static final field GIGABYTES Lorg/pkl/core/DataSizeUnit;
	public static final field KIBIBYTES Lorg/pkl/core/DataSizeUnit;
	public static final field KILOBYTES Lorg/pkl/core/DataSizeUnit;
	public static final field MEBIBYTES Lorg/pkl/core/DataSizeUnit;
	public static final field MEGABYTES Lorg/pkl/core/DataSizeUnit;
	public static final field PEBIBYTES Lorg/pkl/core/DataSizeUnit;
	public static final field PETABYTES Lorg/pkl/core/DataSizeUnit;
	public static final field TEBIBYTES Lorg/pkl/core/DataSizeUnit;
	public static final field TERABYTES Lorg/pkl/core/DataSizeUnit;
	public fun getBytes ()J
	public fun getSymbol ()Ljava/lang/String;
	public static fun parse (Ljava/lang/String;)Lorg/pkl/core/DataSizeUnit;
	public fun toString ()Ljava/lang/String;
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/DataSizeUnit;
	public static fun values ()[Lorg/pkl/core/DataSizeUnit;
}

public final class org/pkl/core/Duration : org/pkl/core/Value {
	public fun <init> (DLorg/pkl/core/DurationUnit;)V
	public fun accept (Lorg/pkl/core/ValueConverter;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/ValueVisitor;)V
	public fun convertTo (Lorg/pkl/core/DurationUnit;)Lorg/pkl/core/Duration;
	public fun convertValueTo (Lorg/pkl/core/DurationUnit;)D
	public fun equals (Ljava/lang/Object;)Z
	public fun getClassInfo ()Lorg/pkl/core/PClassInfo;
	public fun getUnit ()Lorg/pkl/core/DurationUnit;
	public fun getValue ()D
	public fun hashCode ()I
	public fun inDays ()D
	public fun inHours ()D
	public fun inMicros ()D
	public fun inMillis ()D
	public fun inMinutes ()D
	public fun inNanos ()D
	public fun inSeconds ()D
	public fun inWholeDays ()J
	public fun inWholeHours ()J
	public fun inWholeMicros ()J
	public fun inWholeMillis ()J
	public fun inWholeMinutes ()J
	public fun inWholeNanos ()J
	public fun inWholeSeconds ()J
	public static fun ofDays (D)Lorg/pkl/core/Duration;
	public static fun ofHours (D)Lorg/pkl/core/Duration;
	public static fun ofMicros (D)Lorg/pkl/core/Duration;
	public static fun ofMillis (D)Lorg/pkl/core/Duration;
	public static fun ofMinutes (D)Lorg/pkl/core/Duration;
	public static fun ofNanos (D)Lorg/pkl/core/Duration;
	public static fun ofSeconds (D)Lorg/pkl/core/Duration;
	public fun toIsoString ()Ljava/lang/String;
	public fun toJavaDuration ()Ljava/time/Duration;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/DurationUnit : java/lang/Enum {
	public static final field DAYS Lorg/pkl/core/DurationUnit;
	public static final field HOURS Lorg/pkl/core/DurationUnit;
	public static final field MICROS Lorg/pkl/core/DurationUnit;
	public static final field MILLIS Lorg/pkl/core/DurationUnit;
	public static final field MINUTES Lorg/pkl/core/DurationUnit;
	public static final field NANOS Lorg/pkl/core/DurationUnit;
	public static final field SECONDS Lorg/pkl/core/DurationUnit;
	public fun getNanos ()J
	public fun getSymbol ()Ljava/lang/String;
	public static fun parse (Ljava/lang/String;)Lorg/pkl/core/DurationUnit;
	public fun toChronoUnit ()Ljava/time/temporal/ChronoUnit;
	public fun toString ()Ljava/lang/String;
	public fun toTimeUnit ()Ljava/util/concurrent/TimeUnit;
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/DurationUnit;
	public static fun values ()[Lorg/pkl/core/DurationUnit;
}

public abstract interface class org/pkl/core/Evaluator : java/lang/AutoCloseable {
	public abstract fun close ()V
	public abstract fun evaluate (Lorg/pkl/core/ModuleSource;)Lorg/pkl/core/PModule;
	public abstract fun evaluateExpression (Lorg/pkl/core/ModuleSource;Ljava/lang/String;)Ljava/lang/Object;
	public abstract fun evaluateExpressionString (Lorg/pkl/core/ModuleSource;Ljava/lang/String;)Ljava/lang/String;
	public abstract fun evaluateOutputFiles (Lorg/pkl/core/ModuleSource;)Ljava/util/Map;
	public abstract fun evaluateOutputText (Lorg/pkl/core/ModuleSource;)Ljava/lang/String;
	public abstract fun evaluateOutputValue (Lorg/pkl/core/ModuleSource;)Ljava/lang/Object;
	public abstract fun evaluateOutputValueAs (Lorg/pkl/core/ModuleSource;Lorg/pkl/core/PClassInfo;)Ljava/lang/Object;
	public abstract fun evaluateSchema (Lorg/pkl/core/ModuleSource;)Lorg/pkl/core/ModuleSchema;
	public abstract fun evaluateTest (Lorg/pkl/core/ModuleSource;Z)Lorg/pkl/core/TestResults;
	public static fun preconfigured ()Lorg/pkl/core/Evaluator;
}

public final class org/pkl/core/EvaluatorBuilder {
	public fun addEnvironmentVariable (Ljava/lang/String;Ljava/lang/String;)Lorg/pkl/core/EvaluatorBuilder;
	public fun addEnvironmentVariables (Ljava/util/Map;)Lorg/pkl/core/EvaluatorBuilder;
	public fun addExternalProperties (Ljava/util/Map;)Lorg/pkl/core/EvaluatorBuilder;
	public fun addExternalProperty (Ljava/lang/String;Ljava/lang/String;)Lorg/pkl/core/EvaluatorBuilder;
	public fun addModuleKeyFactories (Ljava/util/Collection;)Lorg/pkl/core/EvaluatorBuilder;
	public fun addModuleKeyFactory (Lorg/pkl/core/module/ModuleKeyFactory;)Lorg/pkl/core/EvaluatorBuilder;
	public fun addResourceReader (Lorg/pkl/core/resource/ResourceReader;)Lorg/pkl/core/EvaluatorBuilder;
	public fun addResourceReaders (Ljava/util/Collection;)Lorg/pkl/core/EvaluatorBuilder;
	public fun applyFromProject (Lorg/pkl/core/project/Project;)Lorg/pkl/core/EvaluatorBuilder;
	public fun build ()Lorg/pkl/core/Evaluator;
	public fun getAllowedModules ()Ljava/util/List;
	public fun getAllowedResources ()Ljava/util/List;
	public fun getColor ()Z
	public fun getEnvironmentVariables ()Ljava/util/Map;
	public fun getExternalProperties ()Ljava/util/Map;
	public fun getHttpClient ()Lorg/pkl/core/http/HttpClient;
	public fun getLogger ()Lorg/pkl/core/Logger;
	public fun getModuleCacheDir ()Ljava/nio/file/Path;
	public fun getModuleKeyFactories ()Ljava/util/List;
	public fun getOutputFormat ()Ljava/lang/String;
	public fun getProjectDependencies ()Lorg/pkl/core/project/DeclaredDependencies;
	public fun getResourceReaders ()Ljava/util/List;
	public fun getRootDir ()Ljava/nio/file/Path;
	public fun getSecurityManager ()Lorg/pkl/core/SecurityManager;
	public fun getStackFrameTransformer ()Lorg/pkl/core/StackFrameTransformer;
	public fun getTimeout ()Ljava/time/Duration;
	public static fun preconfigured ()Lorg/pkl/core/EvaluatorBuilder;
	public fun setAllowedModules (Ljava/util/Collection;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setAllowedResources (Ljava/util/Collection;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setColor (Z)Lorg/pkl/core/EvaluatorBuilder;
	public fun setEnvironmentVariables (Ljava/util/Map;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setExternalProperties (Ljava/util/Map;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setHttpClient (Lorg/pkl/core/http/HttpClient;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setLogger (Lorg/pkl/core/Logger;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setModuleCacheDir (Ljava/nio/file/Path;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setModuleKeyFactories (Ljava/util/Collection;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setOutputFormat (Ljava/lang/String;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setOutputFormat (Lorg/pkl/core/OutputFormat;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setProjectDependencies (Lorg/pkl/core/project/DeclaredDependencies;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setResourceReaders (Ljava/util/Collection;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setRootDir (Ljava/nio/file/Path;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setSecurityManager (Lorg/pkl/core/SecurityManager;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setStackFrameTransformer (Lorg/pkl/core/StackFrameTransformer;)Lorg/pkl/core/EvaluatorBuilder;
	public fun setTimeout (Ljava/time/Duration;)Lorg/pkl/core/EvaluatorBuilder;
	public static fun unconfigured ()Lorg/pkl/core/EvaluatorBuilder;
	public fun unsetSecurityManager ()Lorg/pkl/core/EvaluatorBuilder;
}

public class org/pkl/core/EvaluatorImpl : org/pkl/core/Evaluator {
	protected final field color Z
	protected final field frameTransformer Lorg/pkl/core/StackFrameTransformer;
	protected final field logger Lorg/pkl/core/BufferedLogger;
	protected final field moduleResolver Lorg/pkl/core/runtime/ModuleResolver;
	protected final field packageResolver Lorg/pkl/core/packages/PackageResolver;
	protected final field polyglotContext Lorg/graalvm/polyglot/Context;
	protected final field securityManager Lorg/pkl/core/SecurityManager;
	protected final field timeout Ljava/time/Duration;
	protected final field timeoutExecutor Ljava/util/concurrent/ScheduledExecutorService;
	public fun <init> (Lorg/pkl/core/StackFrameTransformer;ZLorg/pkl/core/SecurityManager;Lorg/pkl/core/http/HttpClient;Lorg/pkl/core/Logger;Ljava/util/Collection;Ljava/util/Collection;Ljava/util/Map;Ljava/util/Map;Ljava/time/Duration;Ljava/nio/file/Path;Lorg/pkl/core/project/DeclaredDependencies;Ljava/lang/String;)V
	public fun close ()V
	protected fun doEvaluate (Lorg/pkl/core/ModuleSource;Ljava/util/function/Function;)Ljava/lang/Object;
	public fun evaluate (Lorg/pkl/core/ModuleSource;)Lorg/pkl/core/PModule;
	public fun evaluateExpression (Lorg/pkl/core/ModuleSource;Ljava/lang/String;)Ljava/lang/Object;
	public fun evaluateExpressionString (Lorg/pkl/core/ModuleSource;Ljava/lang/String;)Ljava/lang/String;
	public fun evaluateOutputFiles (Lorg/pkl/core/ModuleSource;)Ljava/util/Map;
	public fun evaluateOutputText (Lorg/pkl/core/ModuleSource;)Ljava/lang/String;
	public fun evaluateOutputValue (Lorg/pkl/core/ModuleSource;)Ljava/lang/Object;
	public fun evaluateOutputValueAs (Lorg/pkl/core/ModuleSource;Lorg/pkl/core/PClassInfo;)Ljava/lang/Object;
	public fun evaluateSchema (Lorg/pkl/core/ModuleSource;)Lorg/pkl/core/ModuleSchema;
	public fun evaluateTest (Lorg/pkl/core/ModuleSource;Z)Lorg/pkl/core/TestResults;
}

public abstract interface class org/pkl/core/FileOutput {
	public abstract fun getText ()Ljava/lang/String;
}

public final class org/pkl/core/ImportGraph : java/lang/Record {
	public fun <init> (Ljava/util/Map;Ljava/util/Map;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun imports ()Ljava/util/Map;
	public static fun parseFromJson (Ljava/lang/String;)Lorg/pkl/core/ImportGraph;
	public fun resolvedImports ()Ljava/util/Map;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/ImportGraph$Import : java/lang/Record, java/lang/Comparable {
	public fun <init> (Ljava/net/URI;)V
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Lorg/pkl/core/ImportGraph$Import;)I
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public final fun toString ()Ljava/lang/String;
	public fun uri ()Ljava/net/URI;
}

public abstract interface class org/pkl/core/Logger {
	public fun trace (Ljava/lang/String;Lorg/pkl/core/StackFrame;)V
	public fun warn (Ljava/lang/String;Lorg/pkl/core/StackFrame;)V
}

public final class org/pkl/core/Loggers {
	public static fun noop ()Lorg/pkl/core/Logger;
	public static fun stdErr ()Lorg/pkl/core/Logger;
	public static fun stream (Ljava/io/PrintStream;)Lorg/pkl/core/Logger;
	public static fun writer (Ljava/io/PrintWriter;)Lorg/pkl/core/Logger;
}

public abstract class org/pkl/core/Member : java/io/Serializable {
	public fun <init> (Ljava/lang/String;Lorg/pkl/core/Member$SourceLocation;Ljava/util/Set;Ljava/util/List;Ljava/lang/String;)V
	public fun getAnnotations ()Ljava/util/List;
	public fun getDocComment ()Ljava/lang/String;
	public fun getModifiers ()Ljava/util/Set;
	public abstract fun getModuleName ()Ljava/lang/String;
	public fun getSimpleName ()Ljava/lang/String;
	public fun getSourceLocation ()Lorg/pkl/core/Member$SourceLocation;
	public fun isAbstract ()Z
	public fun isExternal ()Z
	public fun isHidden ()Z
	public fun isOpen ()Z
	public final fun isStandardLibraryMember ()Z
}

public final class org/pkl/core/Member$SourceLocation : java/lang/Record, java/io/Serializable {
	public fun <init> (II)V
	public fun endLine ()I
	public final fun equals (Ljava/lang/Object;)Z
	public fun getEndLine ()I
	public fun getStartLine ()I
	public final fun hashCode ()I
	public fun startLine ()I
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/Modifier : java/lang/Enum {
	public static final field ABSTRACT Lorg/pkl/core/Modifier;
	public static final field EXTERNAL Lorg/pkl/core/Modifier;
	public static final field HIDDEN Lorg/pkl/core/Modifier;
	public static final field OPEN Lorg/pkl/core/Modifier;
	public fun toString ()Ljava/lang/String;
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/Modifier;
	public static fun values ()[Lorg/pkl/core/Modifier;
}

public final class org/pkl/core/ModuleSchema {
	public fun <init> (Ljava/net/URI;Ljava/lang/String;ZLorg/pkl/core/ModuleSchema;Lorg/pkl/core/PClass;Ljava/lang/String;Ljava/util/List;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V
	public fun getAllClasses ()Ljava/util/Map;
	public fun getAllTypeAliases ()Ljava/util/Map;
	public fun getAnnotations ()Ljava/util/List;
	public fun getClasses ()Ljava/util/Map;
	public fun getDocComment ()Ljava/lang/String;
	public fun getImports ()Ljava/util/Map;
	public fun getModuleClass ()Lorg/pkl/core/PClass;
	public fun getModuleName ()Ljava/lang/String;
	public fun getModuleUri ()Ljava/net/URI;
	public fun getShortModuleName ()Ljava/lang/String;
	public fun getSupermodule ()Lorg/pkl/core/ModuleSchema;
	public fun getTypeAliases ()Ljava/util/Map;
	public fun isAmend ()Z
	public fun isExtend ()Z
}

public final class org/pkl/core/ModuleSource {
	public static fun create (Ljava/net/URI;Ljava/lang/String;)Lorg/pkl/core/ModuleSource;
	public static fun file (Ljava/io/File;)Lorg/pkl/core/ModuleSource;
	public static fun file (Ljava/lang/String;)Lorg/pkl/core/ModuleSource;
	public fun getContents ()Ljava/lang/String;
	public fun getUri ()Ljava/net/URI;
	public static fun modulePath (Ljava/lang/String;)Lorg/pkl/core/ModuleSource;
	public static fun path (Ljava/lang/String;)Lorg/pkl/core/ModuleSource;
	public static fun path (Ljava/nio/file/Path;)Lorg/pkl/core/ModuleSource;
	public static fun text (Ljava/lang/String;)Lorg/pkl/core/ModuleSource;
	public static fun uri (Ljava/lang/String;)Lorg/pkl/core/ModuleSource;
	public static fun uri (Ljava/net/URI;)Lorg/pkl/core/ModuleSource;
}

public final class org/pkl/core/NoSuchPropertyException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public fun getPropertyName ()Ljava/lang/String;
}

public final class org/pkl/core/OutputFormat : java/lang/Enum {
	public static final field JSON Lorg/pkl/core/OutputFormat;
	public static final field JSONNET Lorg/pkl/core/OutputFormat;
	public static final field PCF Lorg/pkl/core/OutputFormat;
	public static final field PLIST Lorg/pkl/core/OutputFormat;
	public static final field PROPERTIES Lorg/pkl/core/OutputFormat;
	public static final field TEXTPROTO Lorg/pkl/core/OutputFormat;
	public static final field XML Lorg/pkl/core/OutputFormat;
	public static final field YAML Lorg/pkl/core/OutputFormat;
	public fun toString ()Ljava/lang/String;
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/OutputFormat;
	public static fun values ()[Lorg/pkl/core/OutputFormat;
}

public final class org/pkl/core/PClass : org/pkl/core/Member, org/pkl/core/Value {
	public fun <init> (Ljava/lang/String;Lorg/pkl/core/Member$SourceLocation;Ljava/util/Set;Ljava/util/List;Lorg/pkl/core/PClassInfo;Ljava/util/List;Ljava/util/Map;Ljava/util/Map;)V
	public fun accept (Lorg/pkl/core/ValueConverter;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/ValueVisitor;)V
	public fun getAllMethods ()Ljava/util/Map;
	public fun getAllProperties ()Ljava/util/Map;
	public fun getClassInfo ()Lorg/pkl/core/PClassInfo;
	public fun getDisplayName ()Ljava/lang/String;
	public fun getInfo ()Lorg/pkl/core/PClassInfo;
	public fun getMethods ()Ljava/util/Map;
	public fun getModuleName ()Ljava/lang/String;
	public fun getProperties ()Ljava/util/Map;
	public fun getQualifiedName ()Ljava/lang/String;
	public fun getSuperclass ()Lorg/pkl/core/PClass;
	public fun getSupertype ()Lorg/pkl/core/PType;
	public fun getTypeParameters ()Ljava/util/List;
	public fun initSupertype (Lorg/pkl/core/PType;Lorg/pkl/core/PClass;)V
	public fun isModuleClass ()Z
	public fun toString ()Ljava/lang/String;
}

public abstract class org/pkl/core/PClass$ClassMember : org/pkl/core/Member {
	public fun <init> (Ljava/lang/String;Lorg/pkl/core/Member$SourceLocation;Ljava/util/Set;Ljava/util/List;Ljava/lang/String;Lorg/pkl/core/PClass;)V
	public abstract fun getInheritedDocComment ()Ljava/lang/String;
	public fun getModuleName ()Ljava/lang/String;
	public fun getOwner ()Lorg/pkl/core/PClass;
}

public final class org/pkl/core/PClass$Method : org/pkl/core/PClass$ClassMember {
	public fun <init> (Lorg/pkl/core/PClass;Ljava/lang/String;Lorg/pkl/core/Member$SourceLocation;Ljava/util/Set;Ljava/util/List;Ljava/lang/String;Ljava/util/List;Ljava/util/Map;Lorg/pkl/core/PType;)V
	public fun getInheritedDocComment ()Ljava/lang/String;
	public fun getParameters ()Ljava/util/Map;
	public fun getReturnType ()Lorg/pkl/core/PType;
	public fun getTypeParameters ()Ljava/util/List;
}

public final class org/pkl/core/PClass$Property : org/pkl/core/PClass$ClassMember {
	public fun <init> (Lorg/pkl/core/PClass;Ljava/lang/String;Lorg/pkl/core/Member$SourceLocation;Ljava/util/Set;Ljava/util/List;Ljava/lang/String;Lorg/pkl/core/PType;)V
	public fun getInheritedDocComment ()Ljava/lang/String;
	public fun getType ()Lorg/pkl/core/PType;
}

public final class org/pkl/core/PClassInfo : java/io/Serializable {
	public static final field AlsoKnownAs Lorg/pkl/core/PClassInfo;
	public static final field Any Lorg/pkl/core/PClassInfo;
	public static final field Boolean Lorg/pkl/core/PClassInfo;
	public static final field Class Lorg/pkl/core/PClassInfo;
	public static final field Collection Lorg/pkl/core/PClassInfo;
	public static final field DataSize Lorg/pkl/core/PClassInfo;
	public static final field Deprecated Lorg/pkl/core/PClassInfo;
	public static final field DocExample Lorg/pkl/core/PClassInfo;
	public static final field Duration Lorg/pkl/core/PClassInfo;
	public static final field Dynamic Lorg/pkl/core/PClassInfo;
	public static final field Float Lorg/pkl/core/PClassInfo;
	public static final field Int Lorg/pkl/core/PClassInfo;
	public static final field List Lorg/pkl/core/PClassInfo;
	public static final field Listing Lorg/pkl/core/PClassInfo;
	public static final field MODULE_CLASS_NAME Ljava/lang/String;
	public static final field Map Lorg/pkl/core/PClassInfo;
	public static final field Mapping Lorg/pkl/core/PClassInfo;
	public static final field Module Lorg/pkl/core/PClassInfo;
	public static final field ModuleInfo Lorg/pkl/core/PClassInfo;
	public static final field ModuleOutput Lorg/pkl/core/PClassInfo;
	public static final field Null Lorg/pkl/core/PClassInfo;
	public static final field Number Lorg/pkl/core/PClassInfo;
	public static final field Object Lorg/pkl/core/PClassInfo;
	public static final field Pair Lorg/pkl/core/PClassInfo;
	public static final field PcfRenderDirective Lorg/pkl/core/PClassInfo;
	public static final field Project Lorg/pkl/core/PClassInfo;
	public static final field Regex Lorg/pkl/core/PClassInfo;
	public static final field Set Lorg/pkl/core/PClassInfo;
	public static final field Settings Lorg/pkl/core/PClassInfo;
	public static final field String Lorg/pkl/core/PClassInfo;
	public static final field TypeAlias Lorg/pkl/core/PClassInfo;
	public static final field Typed Lorg/pkl/core/PClassInfo;
	public static final field Unavailable Lorg/pkl/core/PClassInfo;
	public static final field Unlisted Lorg/pkl/core/PClassInfo;
	public static final field Version Lorg/pkl/core/PClassInfo;
	public static final field pklBaseUri Ljava/net/URI;
	public static final field pklProjectUri Ljava/net/URI;
	public static final field pklSemverUri Ljava/net/URI;
	public static final field pklSettingsUri Ljava/net/URI;
	public fun equals (Ljava/lang/Object;)Z
	public static fun forModuleClass (Ljava/lang/String;Ljava/net/URI;)Lorg/pkl/core/PClassInfo;
	public static fun forValue (Ljava/lang/Object;)Lorg/pkl/core/PClassInfo;
	public static fun get (Ljava/lang/String;Ljava/lang/String;Ljava/net/URI;)Lorg/pkl/core/PClassInfo;
	public fun getDisplayName ()Ljava/lang/String;
	public fun getJavaClass ()Ljava/lang/Class;
	public fun getModuleName ()Ljava/lang/String;
	public fun getModuleUri ()Ljava/net/URI;
	public fun getQualifiedName ()Ljava/lang/String;
	public fun getSimpleName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun isConcreteCollectionClass ()Z
	public fun isExactClassOf (Ljava/lang/Object;)Z
	public fun isExternalClass ()Z
	public fun isModuleClass ()Z
	public fun isStandardLibraryClass ()Z
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/PModule : org/pkl/core/PObject {
	public fun <init> (Ljava/net/URI;Ljava/lang/String;Lorg/pkl/core/PClassInfo;Ljava/util/Map;)V
	public fun accept (Lorg/pkl/core/ValueVisitor;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getModuleName ()Ljava/lang/String;
	public fun getModuleUri ()Ljava/net/URI;
	public fun getProperty (Ljava/lang/String;)Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/PNull : org/pkl/core/Value {
	public fun <init> ()V
	public fun accept (Lorg/pkl/core/ValueConverter;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/ValueVisitor;)V
	public fun getClassInfo ()Lorg/pkl/core/PClassInfo;
	public static fun getInstance ()Lorg/pkl/core/PNull;
	public fun toString ()Ljava/lang/String;
}

public class org/pkl/core/PObject : org/pkl/core/Composite {
	protected final field classInfo Lorg/pkl/core/PClassInfo;
	protected final field properties Ljava/util/Map;
	public fun <init> (Lorg/pkl/core/PClassInfo;Ljava/util/Map;)V
	public fun accept (Lorg/pkl/core/ValueConverter;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/ValueVisitor;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getClassInfo ()Lorg/pkl/core/PClassInfo;
	public final fun getProperties ()Ljava/util/Map;
	public fun getProperty (Ljava/lang/String;)Ljava/lang/Object;
	public fun hashCode ()I
	protected fun render (Ljava/lang/String;)Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public abstract class org/pkl/core/PType : java/io/Serializable {
	public static final field MODULE Lorg/pkl/core/PType;
	public static final field NOTHING Lorg/pkl/core/PType;
	public static final field UNKNOWN Lorg/pkl/core/PType;
	public fun getTypeArguments ()Ljava/util/List;
}

public final class org/pkl/core/PType$Alias : org/pkl/core/PType {
	public fun <init> (Lorg/pkl/core/TypeAlias;)V
	public fun <init> (Lorg/pkl/core/TypeAlias;Ljava/util/List;Lorg/pkl/core/PType;)V
	public fun getAliasedType ()Lorg/pkl/core/PType;
	public fun getTypeAlias ()Lorg/pkl/core/TypeAlias;
	public fun getTypeArguments ()Ljava/util/List;
}

public final class org/pkl/core/PType$Class : org/pkl/core/PType {
	public fun <init> (Lorg/pkl/core/PClass;)V
	public fun <init> (Lorg/pkl/core/PClass;Ljava/util/List;)V
	public fun <init> (Lorg/pkl/core/PClass;Lorg/pkl/core/PType;)V
	public fun <init> (Lorg/pkl/core/PClass;Lorg/pkl/core/PType;Lorg/pkl/core/PType;)V
	public fun getPClass ()Lorg/pkl/core/PClass;
	public fun getTypeArguments ()Ljava/util/List;
}

public final class org/pkl/core/PType$Constrained : org/pkl/core/PType {
	public fun <init> (Lorg/pkl/core/PType;Ljava/util/List;)V
	public fun getBaseType ()Lorg/pkl/core/PType;
	public fun getConstraints ()Ljava/util/List;
}

public final class org/pkl/core/PType$Function : org/pkl/core/PType {
	public fun <init> (Ljava/util/List;Lorg/pkl/core/PType;)V
	public fun getParameterTypes ()Ljava/util/List;
	public fun getReturnType ()Lorg/pkl/core/PType;
}

public final class org/pkl/core/PType$Nullable : org/pkl/core/PType {
	public fun <init> (Lorg/pkl/core/PType;)V
	public fun getBaseType ()Lorg/pkl/core/PType;
}

public final class org/pkl/core/PType$StringLiteral : org/pkl/core/PType {
	public fun <init> (Ljava/lang/String;)V
	public fun getLiteral ()Ljava/lang/String;
}

public final class org/pkl/core/PType$TypeVariable : org/pkl/core/PType {
	public fun <init> (Lorg/pkl/core/TypeParameter;)V
	public fun getName ()Ljava/lang/String;
	public fun getTypeParameter ()Lorg/pkl/core/TypeParameter;
}

public final class org/pkl/core/PType$Union : org/pkl/core/PType {
	public fun <init> (Ljava/util/List;)V
	public fun getElementTypes ()Ljava/util/List;
}

public final class org/pkl/core/Pair : java/lang/Iterable, org/pkl/core/Value {
	public fun <init> (Ljava/lang/Object;Ljava/lang/Object;)V
	public fun accept (Lorg/pkl/core/ValueConverter;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/ValueVisitor;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getClassInfo ()Lorg/pkl/core/PClassInfo;
	public fun getFirst ()Ljava/lang/Object;
	public fun getSecond ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun iterator ()Ljava/util/Iterator;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/PklBugException : org/pkl/core/PklException {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public fun <init> (Ljava/lang/Throwable;)V
	public static fun unreachableCode ()Lorg/pkl/core/PklBugException;
}

public class org/pkl/core/PklException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public fun <init> (Ljava/lang/Throwable;)V
}

public final class org/pkl/core/PklInfo {
	public static fun current ()Lorg/pkl/core/PklInfo;
	public fun getPackageIndex ()Lorg/pkl/core/PklInfo$PackageIndex;
}

public final class org/pkl/core/PklInfo$PackageIndex : java/lang/Record {
	public fun <init> (Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun getPackagePage (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	public final fun hashCode ()I
	public fun homepage ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/Platform : java/lang/Record {
	public fun <init> (Lorg/pkl/core/Platform$Language;Lorg/pkl/core/Platform$Runtime;Lorg/pkl/core/Platform$VirtualMachine;Lorg/pkl/core/Platform$OperatingSystem;Lorg/pkl/core/Platform$Processor;)V
	public static fun current ()Lorg/pkl/core/Platform;
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun language ()Lorg/pkl/core/Platform$Language;
	public fun operatingSystem ()Lorg/pkl/core/Platform$OperatingSystem;
	public fun processor ()Lorg/pkl/core/Platform$Processor;
	public fun runtime ()Lorg/pkl/core/Platform$Runtime;
	public final fun toString ()Ljava/lang/String;
	public fun virtualMachine ()Lorg/pkl/core/Platform$VirtualMachine;
}

public final class org/pkl/core/Platform$Language : java/lang/Record {
	public fun <init> (Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public final fun toString ()Ljava/lang/String;
	public fun version ()Ljava/lang/String;
}

public final class org/pkl/core/Platform$OperatingSystem : java/lang/Record {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun name ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
	public fun version ()Ljava/lang/String;
}

public final class org/pkl/core/Platform$Processor : java/lang/Record {
	public fun <init> (Ljava/lang/String;)V
	public fun architecture ()Ljava/lang/String;
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/Platform$Runtime : java/lang/Record {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun name ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
	public fun version ()Ljava/lang/String;
}

public final class org/pkl/core/Platform$VirtualMachine : java/lang/Record {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun name ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
	public fun version ()Ljava/lang/String;
}

public final class org/pkl/core/Release : java/lang/Record {
	public fun <init> (Lorg/pkl/core/Version;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/pkl/core/Release$SourceCode;Lorg/pkl/core/Release$Documentation;Lorg/pkl/core/Release$StandardLibrary;)V
	public fun commitId ()Ljava/lang/String;
	public static fun current ()Lorg/pkl/core/Release;
	public fun documentation ()Lorg/pkl/core/Release$Documentation;
	public final fun equals (Ljava/lang/Object;)Z
	public fun flavor ()Ljava/lang/String;
	public final fun hashCode ()I
	public fun os ()Ljava/lang/String;
	public fun sourceCode ()Lorg/pkl/core/Release$SourceCode;
	public fun standardLibrary ()Lorg/pkl/core/Release$StandardLibrary;
	public final fun toString ()Ljava/lang/String;
	public fun version ()Lorg/pkl/core/Version;
	public fun versionInfo ()Ljava/lang/String;
}

public final class org/pkl/core/Release$Documentation : java/lang/Record {
	public fun <init> (Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun homepage ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/Release$SourceCode : java/lang/Record {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun getFilePage (Ljava/lang/String;)Ljava/lang/String;
	public fun getSourceCodeUrlScheme ()Ljava/lang/String;
	public fun getVersion ()Ljava/lang/String;
	public final fun hashCode ()I
	public fun homepage ()Ljava/lang/String;
	public fun sourceCodeUrlScheme ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
	public fun version ()Ljava/lang/String;
}

public final class org/pkl/core/Release$StandardLibrary : java/lang/Record {
	public fun <init> (Ljava/util/Set;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun modules ()Ljava/util/Set;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/RendererException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;)V
}

public abstract interface class org/pkl/core/SecurityManager {
	public abstract fun checkImportModule (Ljava/net/URI;Ljava/net/URI;)V
	public abstract fun checkReadResource (Ljava/net/URI;)V
	public abstract fun checkResolveModule (Ljava/net/URI;)V
	public abstract fun checkResolveResource (Ljava/net/URI;)V
}

public abstract interface class org/pkl/core/SecurityManagerBuilder {
	public abstract fun addAllowedModule (Ljava/util/regex/Pattern;)Lorg/pkl/core/SecurityManagerBuilder;
	public abstract fun addAllowedModules (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagerBuilder;
	public abstract fun addAllowedResource (Ljava/util/regex/Pattern;)Lorg/pkl/core/SecurityManagerBuilder;
	public abstract fun addAllowedResources (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagerBuilder;
	public abstract fun build ()Lorg/pkl/core/SecurityManager;
	public abstract fun getAllowedModules ()Ljava/util/List;
	public abstract fun getAllowedResources ()Ljava/util/List;
	public abstract fun getRootDir ()Ljava/nio/file/Path;
	public abstract fun setAllowedModules (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagerBuilder;
	public abstract fun setAllowedResources (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagerBuilder;
	public abstract fun setRootDir (Ljava/nio/file/Path;)Lorg/pkl/core/SecurityManagerBuilder;
}

public final class org/pkl/core/SecurityManagerException : java/lang/Exception {
	public fun <init> (Ljava/lang/String;)V
}

public final class org/pkl/core/SecurityManagers {
	public static final field defaultAllowedModules Ljava/util/List;
	public static final field defaultAllowedResources Ljava/util/List;
	public static final field defaultManager Lorg/pkl/core/SecurityManager;
	public static final field defaultTrustLevels Ljava/util/function/Function;
	public static fun standard (Ljava/util/List;Ljava/util/List;Ljava/util/function/Function;Ljava/nio/file/Path;)Lorg/pkl/core/SecurityManager;
	public static fun standardBuilder ()Lorg/pkl/core/SecurityManagers$StandardBuilder;
}

public class org/pkl/core/SecurityManagers$StandardBuilder : org/pkl/core/SecurityManagerBuilder {
	public synthetic fun addAllowedModule (Ljava/util/regex/Pattern;)Lorg/pkl/core/SecurityManagerBuilder;
	public fun addAllowedModule (Ljava/util/regex/Pattern;)Lorg/pkl/core/SecurityManagers$StandardBuilder;
	public synthetic fun addAllowedModules (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagerBuilder;
	public fun addAllowedModules (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagers$StandardBuilder;
	public synthetic fun addAllowedResource (Ljava/util/regex/Pattern;)Lorg/pkl/core/SecurityManagerBuilder;
	public fun addAllowedResource (Ljava/util/regex/Pattern;)Lorg/pkl/core/SecurityManagers$StandardBuilder;
	public synthetic fun addAllowedResources (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagerBuilder;
	public fun addAllowedResources (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagers$StandardBuilder;
	public fun build ()Lorg/pkl/core/SecurityManager;
	public fun getAllowedModules ()Ljava/util/List;
	public fun getAllowedResources ()Ljava/util/List;
	public fun getRootDir ()Ljava/nio/file/Path;
	public synthetic fun setAllowedModules (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagerBuilder;
	public fun setAllowedModules (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagers$StandardBuilder;
	public synthetic fun setAllowedResources (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagerBuilder;
	public fun setAllowedResources (Ljava/util/Collection;)Lorg/pkl/core/SecurityManagers$StandardBuilder;
	public synthetic fun setRootDir (Ljava/nio/file/Path;)Lorg/pkl/core/SecurityManagerBuilder;
	public fun setRootDir (Ljava/nio/file/Path;)Lorg/pkl/core/SecurityManagers$StandardBuilder;
}

public final class org/pkl/core/StackFrame {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/util/List;IIII)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getEndColumn ()I
	public fun getEndLine ()I
	public fun getMemberName ()Ljava/lang/String;
	public fun getModuleUri ()Ljava/lang/String;
	public fun getSourceLines ()Ljava/util/List;
	public fun getStartColumn ()I
	public fun getStartLine ()I
	public fun hashCode ()I
	public fun withModuleUri (Ljava/lang/String;)Lorg/pkl/core/StackFrame;
}

public abstract interface class org/pkl/core/StackFrameTransformer : java/util/function/Function {
	public fun andThen (Lorg/pkl/core/StackFrameTransformer;)Lorg/pkl/core/StackFrameTransformer;
}

public final class org/pkl/core/StackFrameTransformers {
	public static final field convertStdLibUrlToExternalUrl Lorg/pkl/core/StackFrameTransformer;
	public static final field defaultTransformer Lorg/pkl/core/StackFrameTransformer;
	public static final field empty Lorg/pkl/core/StackFrameTransformer;
	public static final field fromServiceProviders Lorg/pkl/core/StackFrameTransformer;
	public static final field replacePackageUriWithSourceCodeUrl Lorg/pkl/core/StackFrameTransformer;
	public static fun convertFilePathToUriScheme (Ljava/lang/String;)Lorg/pkl/core/StackFrameTransformer;
	public static fun createDefault (Lorg/pkl/core/settings/PklSettings;)Lorg/pkl/core/StackFrameTransformer;
	public static fun relativizeModuleUri (Ljava/net/URI;)Lorg/pkl/core/StackFrameTransformer;
}

public final class org/pkl/core/TestResults : java/lang/Record {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Lorg/pkl/core/TestResults$TestSectionResults;Lorg/pkl/core/TestResults$TestSectionResults;Ljava/lang/String;Lorg/pkl/core/TestResults$Error;)V
	public fun displayUri ()Ljava/lang/String;
	public final fun equals (Ljava/lang/Object;)Z
	public fun error ()Lorg/pkl/core/TestResults$Error;
	public fun examples ()Lorg/pkl/core/TestResults$TestSectionResults;
	public fun facts ()Lorg/pkl/core/TestResults$TestSectionResults;
	public fun failed ()Z
	public final fun hashCode ()I
	public fun isExampleWrittenFailure ()Z
	public fun logs ()Ljava/lang/String;
	public fun moduleName ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
	public fun totalAsserts ()I
	public fun totalAssertsFailed ()I
	public fun totalFailures ()I
	public fun totalTests ()I
}

public class org/pkl/core/TestResults$Builder {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public fun build ()Lorg/pkl/core/TestResults;
	public fun setError (Lorg/pkl/core/TestResults$Error;)Lorg/pkl/core/TestResults$Builder;
	public fun setExamplesSection (Lorg/pkl/core/TestResults$TestSectionResults;)Lorg/pkl/core/TestResults$Builder;
	public fun setFactsSection (Lorg/pkl/core/TestResults$TestSectionResults;)Lorg/pkl/core/TestResults$Builder;
	public fun setStdErr (Ljava/lang/String;)Lorg/pkl/core/TestResults$Builder;
}

public final class org/pkl/core/TestResults$Error : java/lang/Record {
	public fun <init> (Ljava/lang/String;Lorg/pkl/core/PklException;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun exception ()Lorg/pkl/core/PklException;
	public final fun hashCode ()I
	public fun message ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/TestResults$Failure : java/lang/Record {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun kind ()Ljava/lang/String;
	public fun message ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/TestResults$TestResult : java/lang/Record {
	public fun <init> (Ljava/lang/String;ILjava/util/List;Ljava/util/List;Z)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun errors ()Ljava/util/List;
	public fun failures ()Ljava/util/List;
	public fun hasErrors ()Z
	public fun hasFailures ()Z
	public final fun hashCode ()I
	public fun isExampleWritten ()Z
	public fun isFailure ()Z
	public fun name ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
	public fun totalAsserts ()I
	public fun totalAssertsFailedOrErrored ()I
}

public class org/pkl/core/TestResults$TestResult$Builder {
	public fun <init> (Ljava/lang/String;)V
	public fun addError (Lorg/pkl/core/TestResults$Error;)Lorg/pkl/core/TestResults$TestResult$Builder;
	public fun addFailure (Lorg/pkl/core/TestResults$Failure;)Lorg/pkl/core/TestResults$TestResult$Builder;
	public fun addSuccess ()Lorg/pkl/core/TestResults$TestResult$Builder;
	public fun build ()Lorg/pkl/core/TestResults$TestResult;
	public fun getCount ()I
	public fun setExampleWritten (Z)Lorg/pkl/core/TestResults$TestResult$Builder;
}

public final class org/pkl/core/TestResults$TestSectionName : java/lang/Enum {
	public static final field EXAMPLES Lorg/pkl/core/TestResults$TestSectionName;
	public static final field FACTS Lorg/pkl/core/TestResults$TestSectionName;
	public fun toString ()Ljava/lang/String;
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/TestResults$TestSectionName;
	public static fun values ()[Lorg/pkl/core/TestResults$TestSectionName;
}

public final class org/pkl/core/TestResults$TestSectionResults : java/lang/Record {
	public fun <init> (Lorg/pkl/core/TestResults$TestSectionName;Ljava/util/List;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun failed ()Z
	public fun hasError ()Z
	public final fun hashCode ()I
	public fun name ()Lorg/pkl/core/TestResults$TestSectionName;
	public fun results ()Ljava/util/List;
	public final fun toString ()Ljava/lang/String;
	public fun totalAsserts ()I
	public fun totalAssertsFailedOrErrored ()I
	public fun totalFailures ()I
	public fun totalTests ()I
}

public final class org/pkl/core/TypeAlias : org/pkl/core/Member, org/pkl/core/Value {
	public fun <init> (Ljava/lang/String;Lorg/pkl/core/Member$SourceLocation;Ljava/util/Set;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;)V
	public fun accept (Lorg/pkl/core/ValueConverter;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/ValueVisitor;)V
	public fun getAliasedType ()Lorg/pkl/core/PType;
	public fun getClassInfo ()Lorg/pkl/core/PClassInfo;
	public fun getDisplayName ()Ljava/lang/String;
	public fun getModuleName ()Ljava/lang/String;
	public fun getQualifiedName ()Ljava/lang/String;
	public fun getTypeParameters ()Ljava/util/List;
	public fun initAliasedType (Lorg/pkl/core/PType;)V
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/TypeParameter : java/io/Serializable {
	public fun <init> (Lorg/pkl/core/TypeParameter$Variance;Ljava/lang/String;I)V
	public fun getIndex ()I
	public fun getName ()Ljava/lang/String;
	public fun getOwner ()Lorg/pkl/core/Member;
	public fun getVariance ()Lorg/pkl/core/TypeParameter$Variance;
	public fun initOwner (Lorg/pkl/core/Member;)V
}

public final class org/pkl/core/TypeParameter$Variance : java/lang/Enum {
	public static final field CONTRAVARIANT Lorg/pkl/core/TypeParameter$Variance;
	public static final field COVARIANT Lorg/pkl/core/TypeParameter$Variance;
	public static final field INVARIANT Lorg/pkl/core/TypeParameter$Variance;
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/TypeParameter$Variance;
	public static fun values ()[Lorg/pkl/core/TypeParameter$Variance;
}

public abstract interface class org/pkl/core/Value : java/io/Serializable {
	public abstract fun accept (Lorg/pkl/core/ValueConverter;)Ljava/lang/Object;
	public abstract fun accept (Lorg/pkl/core/ValueVisitor;)V
	public abstract fun getClassInfo ()Lorg/pkl/core/PClassInfo;
}

public abstract interface class org/pkl/core/ValueConverter {
	public fun convert (Ljava/lang/Object;)Ljava/lang/Object;
	public abstract fun convertBoolean (Ljava/lang/Boolean;)Ljava/lang/Object;
	public abstract fun convertClass (Lorg/pkl/core/PClass;)Ljava/lang/Object;
	public abstract fun convertDataSize (Lorg/pkl/core/DataSize;)Ljava/lang/Object;
	public abstract fun convertDuration (Lorg/pkl/core/Duration;)Ljava/lang/Object;
	public abstract fun convertFloat (Ljava/lang/Double;)Ljava/lang/Object;
	public abstract fun convertInt (Ljava/lang/Long;)Ljava/lang/Object;
	public abstract fun convertList (Ljava/util/List;)Ljava/lang/Object;
	public abstract fun convertMap (Ljava/util/Map;)Ljava/lang/Object;
	public abstract fun convertModule (Lorg/pkl/core/PModule;)Ljava/lang/Object;
	public abstract fun convertNull ()Ljava/lang/Object;
	public abstract fun convertObject (Lorg/pkl/core/PObject;)Ljava/lang/Object;
	public abstract fun convertPair (Lorg/pkl/core/Pair;)Ljava/lang/Object;
	public abstract fun convertRegex (Ljava/util/regex/Pattern;)Ljava/lang/Object;
	public abstract fun convertSet (Ljava/util/Set;)Ljava/lang/Object;
	public abstract fun convertString (Ljava/lang/String;)Ljava/lang/Object;
	public abstract fun convertTypeAlias (Lorg/pkl/core/TypeAlias;)Ljava/lang/Object;
}

public final class org/pkl/core/ValueFormatter {
	public fun <init> (ZZ)V
	public static fun basic ()Lorg/pkl/core/ValueFormatter;
	public fun formatStringValue (Ljava/lang/String;Ljava/lang/CharSequence;)Ljava/lang/String;
	public fun formatStringValue (Ljava/lang/String;Ljava/lang/CharSequence;Ljava/lang/Appendable;)V
	public fun formatStringValue (Ljava/lang/String;Ljava/lang/CharSequence;Ljava/lang/StringBuilder;)V
	public static fun withCustomStringDelimiters ()Lorg/pkl/core/ValueFormatter;
}

public abstract interface class org/pkl/core/ValueRenderer {
	public abstract fun renderDocument (Ljava/lang/Object;)V
	public abstract fun renderValue (Ljava/lang/Object;)V
}

public final class org/pkl/core/ValueRenderers {
	public static fun json (Ljava/io/Writer;Ljava/lang/String;Z)Lorg/pkl/core/ValueRenderer;
	public static fun pcf (Ljava/io/Writer;Ljava/lang/String;ZZ)Lorg/pkl/core/ValueRenderer;
	public static fun plist (Ljava/io/Writer;Ljava/lang/String;)Lorg/pkl/core/ValueRenderer;
	public static fun properties (Ljava/io/Writer;ZZ)Lorg/pkl/core/ValueRenderer;
	public static fun yaml (Ljava/io/Writer;IZZ)Lorg/pkl/core/ValueRenderer;
}

public abstract interface class org/pkl/core/ValueVisitor {
	public fun visit (Ljava/lang/Object;)V
	public fun visitBoolean (Ljava/lang/Boolean;)V
	public fun visitClass (Lorg/pkl/core/PClass;)V
	public fun visitDataSize (Lorg/pkl/core/DataSize;)V
	public fun visitDefault (Ljava/lang/Object;)V
	public fun visitDuration (Lorg/pkl/core/Duration;)V
	public fun visitFloat (Ljava/lang/Double;)V
	public fun visitInt (Ljava/lang/Long;)V
	public fun visitList (Ljava/util/List;)V
	public fun visitMap (Ljava/util/Map;)V
	public fun visitModule (Lorg/pkl/core/PModule;)V
	public fun visitNull ()V
	public fun visitObject (Lorg/pkl/core/PObject;)V
	public fun visitPair (Lorg/pkl/core/Pair;)V
	public fun visitRegex (Ljava/util/regex/Pattern;)V
	public fun visitSet (Ljava/util/Set;)V
	public fun visitString (Ljava/lang/String;)V
	public fun visitTypeAlias (Lorg/pkl/core/TypeAlias;)V
}

public final class org/pkl/core/Version : java/lang/Comparable {
	public fun <init> (IIILjava/lang/String;Ljava/lang/String;)V
	public static fun comparator ()Ljava/util/Comparator;
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Lorg/pkl/core/Version;)I
	public fun equals (Ljava/lang/Object;)Z
	public fun getBuild ()Ljava/lang/String;
	public fun getMajor ()I
	public fun getMinor ()I
	public fun getPatch ()I
	public fun getPreRelease ()Ljava/lang/String;
	public fun hashCode ()I
	public fun isNormal ()Z
	public fun isStable ()Z
	public static fun parse (Ljava/lang/String;)Lorg/pkl/core/Version;
	public static fun parseOrNull (Ljava/lang/String;)Lorg/pkl/core/Version;
	public fun toNormal ()Lorg/pkl/core/Version;
	public fun toString ()Ljava/lang/String;
	public fun withBuild (Ljava/lang/String;)Lorg/pkl/core/Version;
	public fun withMajor (I)Lorg/pkl/core/Version;
	public fun withMinor (I)Lorg/pkl/core/Version;
	public fun withPatch (I)Lorg/pkl/core/Version;
	public fun withPreRelease (Ljava/lang/String;)Lorg/pkl/core/Version;
}

public abstract interface class org/pkl/core/ast/ConstantNode {
	public abstract fun getValue ()Ljava/lang/Object;
}

public final class org/pkl/core/ast/ConstantValueNode : org/pkl/core/ast/ExpressionNode, org/pkl/core/ast/ConstantNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/Object;)V
	public fun <init> (Ljava/lang/Object;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getValue ()Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/ExpressionNode : org/pkl/core/ast/PklNode {
	protected fun <init> ()V
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public abstract fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/ast/MemberLookupMode : java/lang/Enum {
	public static final field EXPLICIT_RECEIVER Lorg/pkl/core/ast/MemberLookupMode;
	public static final field IMPLICIT_BASE Lorg/pkl/core/ast/MemberLookupMode;
	public static final field IMPLICIT_LEXICAL Lorg/pkl/core/ast/MemberLookupMode;
	public static final field IMPLICIT_LOCAL Lorg/pkl/core/ast/MemberLookupMode;
	public static final field IMPLICIT_THIS Lorg/pkl/core/ast/MemberLookupMode;
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/ast/MemberLookupMode;
	public static fun values ()[Lorg/pkl/core/ast/MemberLookupMode;
}

public abstract class org/pkl/core/ast/MemberNode : org/pkl/core/ast/PklRootNode {
	protected field bodyNode Lorg/pkl/core/ast/ExpressionNode;
	protected fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/ExpressionNode;)V
	protected final fun exceptionBuilder ()Lorg/pkl/core/runtime/VmExceptionBuilder;
	public final fun getBodyNode ()Lorg/pkl/core/ast/ExpressionNode;
	public final fun getBodySection ()Lcom/oracle/truffle/api/source/SourceSection;
	public abstract fun getHeaderSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun isUndefined ()Z
}

public abstract class org/pkl/core/ast/PklNode : com/oracle/truffle/api/nodes/Node {
	protected final field sourceSection Lcom/oracle/truffle/api/source/SourceSection;
	protected fun <init> ()V
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun exceptionBuilder ()Lorg/pkl/core/runtime/VmExceptionBuilder;
	protected final fun getShortName ()Ljava/lang/String;
	public fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun toString ()Ljava/lang/String;
}

public abstract class org/pkl/core/ast/PklRootNode : com/oracle/truffle/api/nodes/RootNode {
	protected fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;)V
	protected fun exceptionBuilder ()Lorg/pkl/core/runtime/VmExceptionBuilder;
	public final fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	protected abstract fun executeImpl (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
}

public final class org/pkl/core/ast/SimpleRootNode : org/pkl/core/ast/PklRootNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun getName ()Ljava/lang/String;
	public fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
}

public final class org/pkl/core/ast/VmModifier {
	public static final field ABSTRACT I
	public static final field CLASS I
	public static final field CLASS_OBJECT_MEMBER I
	public static final field CONST I
	public static final field ELEMENT I
	public static final field ENTRY I
	public static final field EXTERNAL I
	public static final field FIXED I
	public static final field GLOB I
	public static final field HIDDEN I
	public static final field IMPORT I
	public static final field LOCAL I
	public static final field LOCAL_CLASS_OBJECT_MEMBER I
	public static final field LOCAL_TYPEALIAS_OBJECT_MEMBER I
	public static final field NONE I
	public static final field OPEN I
	public static final field TYPEALIAS_OBJECT_MEMBER I
	public static final field TYPE_ALIAS I
	public static final field VALID_AMENDING_MODULE_MODIFIERS I
	public static final field VALID_CLASS_MODIFIERS I
	public static final field VALID_METHOD_MODIFIERS I
	public static final field VALID_MODULE_MODIFIERS I
	public static final field VALID_OBJECT_MEMBER_MODIFIERS I
	public static final field VALID_PROPERTY_MODIFIERS I
	public static final field VALID_TYPE_ALIAS_MODIFIERS I
	public static fun export (IZ)Ljava/util/Set;
	public static fun getMirrors (IZ)Lorg/pkl/core/runtime/VmSet;
	public static fun isAbstract (I)Z
	public static fun isClass (I)Z
	public static fun isClosed (I)Z
	public static fun isConst (I)Z
	public static fun isConstOrFixed (I)Z
	public static fun isElement (I)Z
	public static fun isEntry (I)Z
	public static fun isExternal (I)Z
	public static fun isFixed (I)Z
	public static fun isGlob (I)Z
	public static fun isHidden (I)Z
	public static fun isImport (I)Z
	public static fun isInstantiable (I)Z
	public static fun isLocal (I)Z
	public static fun isLocalOrExternalOrAbstract (I)Z
	public static fun isLocalOrExternalOrHidden (I)Z
	public static fun isOpen (I)Z
	public static fun isType (I)Z
	public static fun isTypeAlias (I)Z
	public static fun toString (I)Ljava/lang/String;
}

public abstract class org/pkl/core/ast/builder/AbstractAstBuilder : org/pkl/core/parser/antlr/PklParserBaseVisitor {
	protected final field source Lcom/oracle/truffle/api/source/Source;
	protected fun <init> (Lcom/oracle/truffle/api/source/Source;)V
	protected static fun createSourceSection (Lcom/oracle/truffle/api/source/Source;Lorg/antlr/v4/runtime/ParserRuleContext;)Lcom/oracle/truffle/api/source/SourceSection;
	protected static fun createSourceSection (Lcom/oracle/truffle/api/source/Source;Lorg/antlr/v4/runtime/Token;)Lcom/oracle/truffle/api/source/SourceSection;
	protected final fun createSourceSection (Ljava/util/List;I)Lcom/oracle/truffle/api/source/SourceSection;
	protected final fun createSourceSection (Lorg/antlr/v4/runtime/ParserRuleContext;)Lcom/oracle/truffle/api/source/SourceSection;
	protected final fun createSourceSection (Lorg/antlr/v4/runtime/Token;)Lcom/oracle/truffle/api/source/SourceSection;
	protected final fun createSourceSection (Lorg/antlr/v4/runtime/Token;Lorg/antlr/v4/runtime/Token;)Lcom/oracle/truffle/api/source/SourceSection;
	protected final fun createSourceSection (Lorg/antlr/v4/runtime/tree/TerminalNode;)Lcom/oracle/truffle/api/source/SourceSection;
	protected fun doVisitSingleLineConstantStringPart (Ljava/util/List;)Ljava/lang/String;
	protected abstract fun exceptionBuilder ()Lorg/pkl/core/runtime/VmExceptionBuilder;
	protected fun parseCharacterEscapeSequence (Lorg/antlr/v4/runtime/Token;)Ljava/lang/String;
	protected fun parseUnicodeEscapeSequence (Lorg/antlr/v4/runtime/Token;)I
}

public final class org/pkl/core/ast/builder/AstBuilder : org/pkl/core/ast/builder/AbstractAstBuilder {
	public fun <init> (Lcom/oracle/truffle/api/source/Source;Lorg/pkl/core/runtime/VmLanguage;Lorg/pkl/core/runtime/ModuleInfo;Lorg/pkl/core/runtime/ModuleResolver;)V
	public static fun create (Lcom/oracle/truffle/api/source/Source;Lorg/pkl/core/runtime/VmLanguage;Lorg/pkl/core/parser/antlr/PklParser$ModuleContext;Lorg/pkl/core/module/ModuleKey;Lorg/pkl/core/module/ResolvedModuleKey;Lorg/pkl/core/runtime/ModuleResolver;)Lorg/pkl/core/ast/builder/AstBuilder;
	public synthetic fun visitAdditiveExpr (Lorg/pkl/core/parser/antlr/PklParser$AdditiveExprContext;)Ljava/lang/Object;
	public fun visitAdditiveExpr (Lorg/pkl/core/parser/antlr/PklParser$AdditiveExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public fun visitAmendExpr (Lorg/pkl/core/parser/antlr/PklParser$AmendExprContext;)Ljava/lang/Object;
	public synthetic fun visitAnnotation (Lorg/pkl/core/parser/antlr/PklParser$AnnotationContext;)Ljava/lang/Object;
	public fun visitAnnotation (Lorg/pkl/core/parser/antlr/PklParser$AnnotationContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitArgumentList (Lorg/pkl/core/parser/antlr/PklParser$ArgumentListContext;)Ljava/lang/Object;
	public fun visitArgumentList (Lorg/pkl/core/parser/antlr/PklParser$ArgumentListContext;)[Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitClassMethod (Lorg/pkl/core/parser/antlr/PklParser$ClassMethodContext;)Ljava/lang/Object;
	public fun visitClassMethod (Lorg/pkl/core/parser/antlr/PklParser$ClassMethodContext;)Lorg/pkl/core/ast/member/UnresolvedMethodNode;
	public synthetic fun visitClassProperty (Lorg/pkl/core/parser/antlr/PklParser$ClassPropertyContext;)Ljava/lang/Object;
	public fun visitClassProperty (Lorg/pkl/core/parser/antlr/PklParser$ClassPropertyContext;)Lorg/pkl/core/ast/member/UnresolvedPropertyNode;
	public synthetic fun visitClazz (Lorg/pkl/core/parser/antlr/PklParser$ClazzContext;)Ljava/lang/Object;
	public fun visitClazz (Lorg/pkl/core/parser/antlr/PklParser$ClazzContext;)Lorg/pkl/core/ast/member/ObjectMember;
	public fun visitComparisonExpr (Lorg/pkl/core/parser/antlr/PklParser$ComparisonExprContext;)Ljava/lang/Object;
	public synthetic fun visitConstrainedType (Lorg/pkl/core/parser/antlr/PklParser$ConstrainedTypeContext;)Ljava/lang/Object;
	public fun visitConstrainedType (Lorg/pkl/core/parser/antlr/PklParser$ConstrainedTypeContext;)Lorg/pkl/core/ast/type/UnresolvedTypeNode;
	public synthetic fun visitDeclaredType (Lorg/pkl/core/parser/antlr/PklParser$DeclaredTypeContext;)Ljava/lang/Object;
	public fun visitDeclaredType (Lorg/pkl/core/parser/antlr/PklParser$DeclaredTypeContext;)Lorg/pkl/core/ast/type/UnresolvedTypeNode;
	public fun visitDefaultUnionType (Lorg/pkl/core/parser/antlr/PklParser$DefaultUnionTypeContext;)Ljava/lang/Object;
	public fun visitEqualityExpr (Lorg/pkl/core/parser/antlr/PklParser$EqualityExprContext;)Ljava/lang/Object;
	public fun visitExponentiationExpr (Lorg/pkl/core/parser/antlr/PklParser$ExponentiationExprContext;)Ljava/lang/Object;
	public synthetic fun visitExpr (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)Ljava/lang/Object;
	public fun visitExpr (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public fun visitFalseLiteral (Lorg/pkl/core/parser/antlr/PklParser$FalseLiteralContext;)Ljava/lang/Object;
	public synthetic fun visitFloatLiteral (Lorg/pkl/core/parser/antlr/PklParser$FloatLiteralContext;)Ljava/lang/Object;
	public fun visitFloatLiteral (Lorg/pkl/core/parser/antlr/PklParser$FloatLiteralContext;)Lorg/pkl/core/ast/expression/literal/FloatLiteralNode;
	public synthetic fun visitForGenerator (Lorg/pkl/core/parser/antlr/PklParser$ForGeneratorContext;)Ljava/lang/Object;
	public fun visitForGenerator (Lorg/pkl/core/parser/antlr/PklParser$ForGeneratorContext;)Lorg/pkl/core/ast/expression/generator/GeneratorForNode;
	public synthetic fun visitFunctionLiteral (Lorg/pkl/core/parser/antlr/PklParser$FunctionLiteralContext;)Ljava/lang/Object;
	public fun visitFunctionLiteral (Lorg/pkl/core/parser/antlr/PklParser$FunctionLiteralContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitFunctionType (Lorg/pkl/core/parser/antlr/PklParser$FunctionTypeContext;)Ljava/lang/Object;
	public fun visitFunctionType (Lorg/pkl/core/parser/antlr/PklParser$FunctionTypeContext;)Lorg/pkl/core/ast/type/UnresolvedTypeNode;
	public fun visitIfExpr (Lorg/pkl/core/parser/antlr/PklParser$IfExprContext;)Ljava/lang/Object;
	public synthetic fun visitImportClause (Lorg/pkl/core/parser/antlr/PklParser$ImportClauseContext;)Ljava/lang/Object;
	public fun visitImportClause (Lorg/pkl/core/parser/antlr/PklParser$ImportClauseContext;)Lorg/pkl/core/ast/member/ObjectMember;
	public fun visitImportExpr (Lorg/pkl/core/parser/antlr/PklParser$ImportExprContext;)Ljava/lang/Object;
	public synthetic fun visitIntLiteral (Lorg/pkl/core/parser/antlr/PklParser$IntLiteralContext;)Ljava/lang/Object;
	public fun visitIntLiteral (Lorg/pkl/core/parser/antlr/PklParser$IntLiteralContext;)Lorg/pkl/core/ast/expression/literal/IntLiteralNode;
	public fun visitLetExpr (Lorg/pkl/core/parser/antlr/PklParser$LetExprContext;)Ljava/lang/Object;
	public synthetic fun visitLogicalAndExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalAndExprContext;)Ljava/lang/Object;
	public fun visitLogicalAndExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalAndExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitLogicalNotExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalNotExprContext;)Ljava/lang/Object;
	public fun visitLogicalNotExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalNotExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitLogicalOrExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalOrExprContext;)Ljava/lang/Object;
	public fun visitLogicalOrExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalOrExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitMemberPredicate (Lorg/pkl/core/parser/antlr/PklParser$MemberPredicateContext;)Ljava/lang/Object;
	public fun visitMemberPredicate (Lorg/pkl/core/parser/antlr/PklParser$MemberPredicateContext;)Lorg/pkl/core/ast/expression/generator/GeneratorMemberNode;
	public fun visitModifier (Lorg/pkl/core/parser/antlr/PklParser$ModifierContext;)Ljava/lang/Integer;
	public synthetic fun visitModifier (Lorg/pkl/core/parser/antlr/PklParser$ModifierContext;)Ljava/lang/Object;
	public synthetic fun visitModule (Lorg/pkl/core/parser/antlr/PklParser$ModuleContext;)Ljava/lang/Object;
	public fun visitModule (Lorg/pkl/core/parser/antlr/PklParser$ModuleContext;)Lorg/pkl/core/ast/PklRootNode;
	public fun visitModuleExpr (Lorg/pkl/core/parser/antlr/PklParser$ModuleExprContext;)Ljava/lang/Object;
	public fun visitModuleType (Lorg/pkl/core/parser/antlr/PklParser$ModuleTypeContext;)Ljava/lang/Object;
	public fun visitMultiLineStringLiteral (Lorg/pkl/core/parser/antlr/PklParser$MultiLineStringLiteralContext;)Ljava/lang/Object;
	public synthetic fun visitMultiLineStringPart (Lorg/pkl/core/parser/antlr/PklParser$MultiLineStringPartContext;)Ljava/lang/Object;
	public fun visitMultiLineStringPart (Lorg/pkl/core/parser/antlr/PklParser$MultiLineStringPartContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitMultiplicativeExpr (Lorg/pkl/core/parser/antlr/PklParser$MultiplicativeExprContext;)Ljava/lang/Object;
	public fun visitMultiplicativeExpr (Lorg/pkl/core/parser/antlr/PklParser$MultiplicativeExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public fun visitNewExpr (Lorg/pkl/core/parser/antlr/PklParser$NewExprContext;)Ljava/lang/Object;
	public fun visitNonNullExpr (Lorg/pkl/core/parser/antlr/PklParser$NonNullExprContext;)Ljava/lang/Object;
	public fun visitNothingType (Lorg/pkl/core/parser/antlr/PklParser$NothingTypeContext;)Ljava/lang/Object;
	public synthetic fun visitNullCoalesceExpr (Lorg/pkl/core/parser/antlr/PklParser$NullCoalesceExprContext;)Ljava/lang/Object;
	public fun visitNullCoalesceExpr (Lorg/pkl/core/parser/antlr/PklParser$NullCoalesceExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitNullLiteral (Lorg/pkl/core/parser/antlr/PklParser$NullLiteralContext;)Ljava/lang/Object;
	public fun visitNullLiteral (Lorg/pkl/core/parser/antlr/PklParser$NullLiteralContext;)Lorg/pkl/core/ast/ConstantValueNode;
	public synthetic fun visitNullableType (Lorg/pkl/core/parser/antlr/PklParser$NullableTypeContext;)Ljava/lang/Object;
	public fun visitNullableType (Lorg/pkl/core/parser/antlr/PklParser$NullableTypeContext;)Lorg/pkl/core/ast/type/UnresolvedTypeNode;
	public synthetic fun visitObjectElement (Lorg/pkl/core/parser/antlr/PklParser$ObjectElementContext;)Ljava/lang/Object;
	public fun visitObjectElement (Lorg/pkl/core/parser/antlr/PklParser$ObjectElementContext;)Lorg/pkl/core/ast/expression/generator/GeneratorElementNode;
	public synthetic fun visitObjectEntry (Lorg/pkl/core/parser/antlr/PklParser$ObjectEntryContext;)Ljava/lang/Object;
	public fun visitObjectEntry (Lorg/pkl/core/parser/antlr/PklParser$ObjectEntryContext;)Lorg/pkl/core/ast/expression/generator/GeneratorMemberNode;
	public synthetic fun visitObjectMethod (Lorg/pkl/core/parser/antlr/PklParser$ObjectMethodContext;)Ljava/lang/Object;
	public fun visitObjectMethod (Lorg/pkl/core/parser/antlr/PklParser$ObjectMethodContext;)Lorg/pkl/core/ast/expression/generator/GeneratorMemberNode;
	public synthetic fun visitObjectProperty (Lorg/pkl/core/parser/antlr/PklParser$ObjectPropertyContext;)Ljava/lang/Object;
	public fun visitObjectProperty (Lorg/pkl/core/parser/antlr/PklParser$ObjectPropertyContext;)Lorg/pkl/core/ast/expression/generator/GeneratorPropertyNode;
	public synthetic fun visitObjectSpread (Lorg/pkl/core/parser/antlr/PklParser$ObjectSpreadContext;)Ljava/lang/Object;
	public fun visitObjectSpread (Lorg/pkl/core/parser/antlr/PklParser$ObjectSpreadContext;)Lorg/pkl/core/ast/expression/generator/GeneratorMemberNode;
	public synthetic fun visitOuterExpr (Lorg/pkl/core/parser/antlr/PklParser$OuterExprContext;)Ljava/lang/Object;
	public fun visitOuterExpr (Lorg/pkl/core/parser/antlr/PklParser$OuterExprContext;)Lorg/pkl/core/ast/expression/primary/OuterNode;
	public synthetic fun visitParenthesizedExpr (Lorg/pkl/core/parser/antlr/PklParser$ParenthesizedExprContext;)Ljava/lang/Object;
	public fun visitParenthesizedExpr (Lorg/pkl/core/parser/antlr/PklParser$ParenthesizedExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitParenthesizedType (Lorg/pkl/core/parser/antlr/PklParser$ParenthesizedTypeContext;)Ljava/lang/Object;
	public fun visitParenthesizedType (Lorg/pkl/core/parser/antlr/PklParser$ParenthesizedTypeContext;)Lorg/pkl/core/ast/type/UnresolvedTypeNode;
	public fun visitPipeExpr (Lorg/pkl/core/parser/antlr/PklParser$PipeExprContext;)Ljava/lang/Object;
	public synthetic fun visitQualifiedAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$QualifiedAccessExprContext;)Ljava/lang/Object;
	public fun visitQualifiedAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$QualifiedAccessExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitQualifiedIdentifier (Lorg/pkl/core/parser/antlr/PklParser$QualifiedIdentifierContext;)Ljava/lang/Object;
	public fun visitQualifiedIdentifier (Lorg/pkl/core/parser/antlr/PklParser$QualifiedIdentifierContext;)Lorg/pkl/core/ast/ExpressionNode;
	public fun visitReadExpr (Lorg/pkl/core/parser/antlr/PklParser$ReadExprContext;)Ljava/lang/Object;
	public fun visitSingleLineStringLiteral (Lorg/pkl/core/parser/antlr/PklParser$SingleLineStringLiteralContext;)Ljava/lang/Object;
	public synthetic fun visitSingleLineStringPart (Lorg/pkl/core/parser/antlr/PklParser$SingleLineStringPartContext;)Ljava/lang/Object;
	public fun visitSingleLineStringPart (Lorg/pkl/core/parser/antlr/PklParser$SingleLineStringPartContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitStringConstant (Lorg/pkl/core/parser/antlr/PklParser$StringConstantContext;)Ljava/lang/Object;
	public fun visitStringConstant (Lorg/pkl/core/parser/antlr/PklParser$StringConstantContext;)Ljava/lang/String;
	public fun visitStringLiteralType (Lorg/pkl/core/parser/antlr/PklParser$StringLiteralTypeContext;)Ljava/lang/Object;
	public fun visitSubscriptExpr (Lorg/pkl/core/parser/antlr/PklParser$SubscriptExprContext;)Ljava/lang/Object;
	public synthetic fun visitSuperAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$SuperAccessExprContext;)Ljava/lang/Object;
	public fun visitSuperAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$SuperAccessExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitSuperSubscriptExpr (Lorg/pkl/core/parser/antlr/PklParser$SuperSubscriptExprContext;)Ljava/lang/Object;
	public fun visitSuperSubscriptExpr (Lorg/pkl/core/parser/antlr/PklParser$SuperSubscriptExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitThisExpr (Lorg/pkl/core/parser/antlr/PklParser$ThisExprContext;)Ljava/lang/Object;
	public fun visitThisExpr (Lorg/pkl/core/parser/antlr/PklParser$ThisExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public fun visitThrowExpr (Lorg/pkl/core/parser/antlr/PklParser$ThrowExprContext;)Ljava/lang/Object;
	public fun visitTraceExpr (Lorg/pkl/core/parser/antlr/PklParser$TraceExprContext;)Ljava/lang/Object;
	public synthetic fun visitTrueLiteral (Lorg/pkl/core/parser/antlr/PklParser$TrueLiteralContext;)Ljava/lang/Object;
	public fun visitTrueLiteral (Lorg/pkl/core/parser/antlr/PklParser$TrueLiteralContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitType (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)Ljava/lang/Object;
	public fun visitType (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)Lorg/pkl/core/ast/type/UnresolvedTypeNode;
	public synthetic fun visitTypeAlias (Lorg/pkl/core/parser/antlr/PklParser$TypeAliasContext;)Ljava/lang/Object;
	public fun visitTypeAlias (Lorg/pkl/core/parser/antlr/PklParser$TypeAliasContext;)Lorg/pkl/core/ast/member/ObjectMember;
	public synthetic fun visitTypeAnnotation (Lorg/pkl/core/parser/antlr/PklParser$TypeAnnotationContext;)Ljava/lang/Object;
	public fun visitTypeAnnotation (Lorg/pkl/core/parser/antlr/PklParser$TypeAnnotationContext;)Lorg/pkl/core/ast/type/UnresolvedTypeNode;
	public synthetic fun visitTypeArgumentList (Lorg/pkl/core/parser/antlr/PklParser$TypeArgumentListContext;)Ljava/lang/Object;
	public fun visitTypeArgumentList (Lorg/pkl/core/parser/antlr/PklParser$TypeArgumentListContext;)[Lorg/pkl/core/ast/type/UnresolvedTypeNode;
	public synthetic fun visitTypeParameterList (Lorg/pkl/core/parser/antlr/PklParser$TypeParameterListContext;)Ljava/lang/Object;
	public fun visitTypeParameterList (Lorg/pkl/core/parser/antlr/PklParser$TypeParameterListContext;)Ljava/util/List;
	public fun visitTypeTestExpr (Lorg/pkl/core/parser/antlr/PklParser$TypeTestExprContext;)Ljava/lang/Object;
	public fun visitTypedIdentifier (Lorg/pkl/core/parser/antlr/PklParser$TypedIdentifierContext;)Ljava/lang/Object;
	public synthetic fun visitUnaryMinusExpr (Lorg/pkl/core/parser/antlr/PklParser$UnaryMinusExprContext;)Ljava/lang/Object;
	public fun visitUnaryMinusExpr (Lorg/pkl/core/parser/antlr/PklParser$UnaryMinusExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitUnionType (Lorg/pkl/core/parser/antlr/PklParser$UnionTypeContext;)Ljava/lang/Object;
	public fun visitUnionType (Lorg/pkl/core/parser/antlr/PklParser$UnionTypeContext;)Lorg/pkl/core/ast/type/UnresolvedTypeNode;
	public fun visitUnknownType (Lorg/pkl/core/parser/antlr/PklParser$UnknownTypeContext;)Ljava/lang/Object;
	public synthetic fun visitUnqualifiedAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$UnqualifiedAccessExprContext;)Ljava/lang/Object;
	public fun visitUnqualifiedAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$UnqualifiedAccessExprContext;)Lorg/pkl/core/ast/ExpressionNode;
	public synthetic fun visitWhenGenerator (Lorg/pkl/core/parser/antlr/PklParser$WhenGeneratorContext;)Ljava/lang/Object;
	public fun visitWhenGenerator (Lorg/pkl/core/parser/antlr/PklParser$WhenGeneratorContext;)Lorg/pkl/core/ast/expression/generator/GeneratorWhenNode;
}

public final class org/pkl/core/ast/builder/CannotInvokeAbstractFunctionNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/builder/CannotInvokeAbstractPropertyNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/builder/ConstLevel : java/lang/Enum {
	public static final field ALL Lorg/pkl/core/ast/builder/ConstLevel;
	public static final field MODULE Lorg/pkl/core/ast/builder/ConstLevel;
	public static final field NONE Lorg/pkl/core/ast/builder/ConstLevel;
	public fun bigger (Lorg/pkl/core/ast/builder/ConstLevel;)Z
	public fun biggerOrEquals (Lorg/pkl/core/ast/builder/ConstLevel;)Z
	public fun isConst ()Z
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/ast/builder/ConstLevel;
	public static fun values ()[Lorg/pkl/core/ast/builder/ConstLevel;
}

public class org/pkl/core/ast/builder/ImportsAndReadsParser : org/pkl/core/ast/builder/AbstractAstBuilder {
	public fun <init> (Lcom/oracle/truffle/api/source/Source;)V
	protected synthetic fun aggregateResult (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	protected fun aggregateResult (Ljava/util/List;Ljava/util/List;)Ljava/util/List;
	protected fun exceptionBuilder ()Lorg/pkl/core/runtime/VmExceptionBuilder;
	public static fun parse (Lorg/pkl/core/module/ModuleKey;Lorg/pkl/core/module/ResolvedModuleKey;)Ljava/util/List;
	public synthetic fun visitImportClause (Lorg/pkl/core/parser/antlr/PklParser$ImportClauseContext;)Ljava/lang/Object;
	public fun visitImportClause (Lorg/pkl/core/parser/antlr/PklParser$ImportClauseContext;)Ljava/util/List;
	public synthetic fun visitImportExpr (Lorg/pkl/core/parser/antlr/PklParser$ImportExprContext;)Ljava/lang/Object;
	public fun visitImportExpr (Lorg/pkl/core/parser/antlr/PklParser$ImportExprContext;)Ljava/util/List;
	public synthetic fun visitModuleExtendsOrAmendsClause (Lorg/pkl/core/parser/antlr/PklParser$ModuleExtendsOrAmendsClauseContext;)Ljava/lang/Object;
	public fun visitModuleExtendsOrAmendsClause (Lorg/pkl/core/parser/antlr/PklParser$ModuleExtendsOrAmendsClauseContext;)Ljava/util/List;
	public synthetic fun visitReadExpr (Lorg/pkl/core/parser/antlr/PklParser$ReadExprContext;)Ljava/lang/Object;
	public fun visitReadExpr (Lorg/pkl/core/parser/antlr/PklParser$ReadExprContext;)Ljava/util/List;
}

public final class org/pkl/core/ast/builder/ImportsAndReadsParser$Entry : java/lang/Record {
	public fun <init> (ZZZZLjava/lang/String;Lcom/oracle/truffle/api/source/SourceSection;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun isAmends ()Z
	public fun isExtends ()Z
	public fun isGlob ()Z
	public fun isModule ()Z
	public fun sourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun stringValue ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/ast/builder/SymbolTable {
	public fun <init> (Lorg/pkl/core/runtime/ModuleInfo;)V
	public fun enterAnnotationScope (Ljava/util/function/Function;)Ljava/lang/Object;
	public fun enterClass (Lorg/pkl/core/runtime/Identifier;Ljava/util/List;Ljava/util/function/Function;)Lorg/pkl/core/ast/member/ObjectMember;
	public fun enterCustomThisScope (Ljava/util/function/Function;)Ljava/lang/Object;
	public fun enterEntry (Lorg/pkl/core/ast/ExpressionNode;Ljava/util/function/Function;)Ljava/lang/Object;
	public fun enterForGenerator (Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;Ljava/util/function/Function;)Ljava/lang/Object;
	public fun enterLambda (Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;Ljava/util/function/Function;)Ljava/lang/Object;
	public fun enterMethod (Lorg/pkl/core/runtime/Identifier;Lorg/pkl/core/ast/builder/ConstLevel;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;Ljava/util/List;Ljava/util/function/Function;)Ljava/lang/Object;
	public fun enterObjectScope (Ljava/util/function/Function;)Ljava/lang/Object;
	public fun enterProperty (Lorg/pkl/core/runtime/Identifier;Lorg/pkl/core/ast/builder/ConstLevel;Ljava/util/function/Function;)Ljava/lang/Object;
	public fun enterTypeAlias (Lorg/pkl/core/runtime/Identifier;Ljava/util/List;Ljava/util/function/Function;)Lorg/pkl/core/ast/member/ObjectMember;
	public fun findTypeParameter (Ljava/lang/String;)Lorg/pkl/core/TypeParameter;
	public fun getCurrentScope ()Lorg/pkl/core/ast/builder/SymbolTable$Scope;
}

public final class org/pkl/core/ast/builder/SymbolTable$AnnotationScope : org/pkl/core/ast/builder/SymbolTable$Scope, org/pkl/core/ast/builder/SymbolTable$LexicalScope {
	public fun <init> (Lorg/pkl/core/ast/builder/SymbolTable$Scope;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;)V
}

public final class org/pkl/core/ast/builder/SymbolTable$ClassScope : org/pkl/core/ast/builder/SymbolTable$TypeParameterizableScope, org/pkl/core/ast/builder/SymbolTable$LexicalScope {
	public fun <init> (Lorg/pkl/core/ast/builder/SymbolTable$Scope;Lorg/pkl/core/runtime/Identifier;Ljava/lang/String;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;Ljava/util/List;)V
}

public final class org/pkl/core/ast/builder/SymbolTable$CustomThisScope : org/pkl/core/ast/builder/SymbolTable$Scope {
	public static final field FRAME_SLOT_ID Ljava/lang/Object;
	public fun <init> (Lorg/pkl/core/ast/builder/SymbolTable$Scope;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;)V
}

public final class org/pkl/core/ast/builder/SymbolTable$EntryScope : org/pkl/core/ast/builder/SymbolTable$Scope {
	public fun <init> (Lorg/pkl/core/ast/builder/SymbolTable$Scope;Ljava/lang/String;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;)V
}

public final class org/pkl/core/ast/builder/SymbolTable$ForGeneratorScope : org/pkl/core/ast/builder/SymbolTable$Scope, org/pkl/core/ast/builder/SymbolTable$LexicalScope {
	public fun <init> (Lorg/pkl/core/ast/builder/SymbolTable$Scope;Ljava/lang/String;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;)V
	public fun buildMemberDescriptor ()Lcom/oracle/truffle/api/frame/FrameDescriptor;
}

public final class org/pkl/core/ast/builder/SymbolTable$LambdaScope : org/pkl/core/ast/builder/SymbolTable$Scope, org/pkl/core/ast/builder/SymbolTable$LexicalScope {
	public fun <init> (Lorg/pkl/core/ast/builder/SymbolTable$Scope;Ljava/lang/String;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;)V
}

public final class org/pkl/core/ast/builder/SymbolTable$MethodScope : org/pkl/core/ast/builder/SymbolTable$TypeParameterizableScope {
	public fun <init> (Lorg/pkl/core/ast/builder/SymbolTable$Scope;Lorg/pkl/core/runtime/Identifier;Ljava/lang/String;Lorg/pkl/core/ast/builder/ConstLevel;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;Ljava/util/List;)V
}

public final class org/pkl/core/ast/builder/SymbolTable$ModuleScope : org/pkl/core/ast/builder/SymbolTable$Scope, org/pkl/core/ast/builder/SymbolTable$LexicalScope {
	public fun <init> (Lorg/pkl/core/runtime/ModuleInfo;)V
}

public class org/pkl/core/ast/builder/SymbolTable$ObjectScope : org/pkl/core/ast/builder/SymbolTable$Scope, org/pkl/core/ast/builder/SymbolTable$LexicalScope {
}

public final class org/pkl/core/ast/builder/SymbolTable$PropertyScope : org/pkl/core/ast/builder/SymbolTable$Scope {
	public fun <init> (Lorg/pkl/core/ast/builder/SymbolTable$Scope;Lorg/pkl/core/runtime/Identifier;Ljava/lang/String;Lorg/pkl/core/ast/builder/ConstLevel;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;)V
}

public abstract class org/pkl/core/ast/builder/SymbolTable$Scope {
	public fun buildFrameDescriptor ()Lcom/oracle/truffle/api/frame/FrameDescriptor;
	public fun getConstDepth ()I
	public fun getConstLevel ()Lorg/pkl/core/ast/builder/ConstLevel;
	public final fun getLexicalScope ()Lorg/pkl/core/ast/builder/SymbolTable$Scope;
	public final fun getName ()Lorg/pkl/core/runtime/Identifier;
	public final fun getNameOrNull ()Lorg/pkl/core/runtime/Identifier;
	protected fun getNextEntryName (Lorg/pkl/core/ast/ExpressionNode;)Ljava/lang/String;
	public final fun getParent ()Lorg/pkl/core/ast/builder/SymbolTable$Scope;
	public final fun getQualifiedName ()Ljava/lang/String;
	public fun getTypeParameter (Ljava/lang/String;)Lorg/pkl/core/TypeParameter;
	public final fun isClassMemberScope ()Z
	public final fun isClassScope ()Z
	public final fun isCustomThisScope ()Z
	public final fun isForGeneratorScope ()Z
	public final fun isLambdaScope ()Z
	public final fun isLexicalScope ()Z
	public final fun isModuleScope ()Z
	public fun newForGeneratorMemberDescriptorBuilder ()Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;
	public fun newFrameDescriptorBuilder ()Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;
	public final fun skipLambdaScopes ()Lorg/pkl/core/ast/builder/SymbolTable$Scope;
}

public final class org/pkl/core/ast/builder/SymbolTable$TypeAliasScope : org/pkl/core/ast/builder/SymbolTable$TypeParameterizableScope {
	public fun <init> (Lorg/pkl/core/ast/builder/SymbolTable$Scope;Lorg/pkl/core/runtime/Identifier;Ljava/lang/String;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;Ljava/util/List;)V
}

public abstract class org/pkl/core/ast/builder/SymbolTable$TypeParameterizableScope : org/pkl/core/ast/builder/SymbolTable$Scope {
	public fun <init> (Lorg/pkl/core/ast/builder/SymbolTable$Scope;Lorg/pkl/core/runtime/Identifier;Ljava/lang/String;Lorg/pkl/core/ast/builder/ConstLevel;Lcom/oracle/truffle/api/frame/FrameDescriptor$Builder;Ljava/util/List;)V
	public fun getTypeParameter (Ljava/lang/String;)Lorg/pkl/core/TypeParameter;
}

public abstract class org/pkl/core/ast/expression/binary/AdditionNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)D
	protected fun eval (DJ)D
	protected fun eval (JD)D
	protected fun eval (JJ)J
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	protected fun eval (Lorg/pkl/core/runtime/VmCollection;Lorg/pkl/core/runtime/VmCollection;)Lorg/pkl/core/runtime/VmCollection;
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;Lorg/pkl/core/runtime/VmDataSize;)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;Lorg/pkl/core/runtime/VmDuration;)Lorg/pkl/core/runtime/VmDuration;
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Lorg/pkl/core/runtime/VmMap;)Lorg/pkl/core/runtime/VmMap;
}

public final class org/pkl/core/ast/expression/binary/AdditionNodeGen : org/pkl/core/ast/expression/binary/AdditionNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/AdditionNode;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public abstract class org/pkl/core/ast/expression/binary/BinaryExpressionNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun fallback (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	protected abstract fun getLeftNode ()Lorg/pkl/core/ast/ExpressionNode;
	protected abstract fun getRightNode ()Lorg/pkl/core/ast/ExpressionNode;
}

public abstract class org/pkl/core/ast/expression/binary/ComparatorNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public abstract fun executeWith (Ljava/lang/Object;Ljava/lang/Object;)Z
}

public abstract class org/pkl/core/ast/expression/binary/DivisionNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)D
	protected fun eval (DJ)D
	protected fun eval (JD)D
	protected fun eval (JJ)D
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;D)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;J)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;Lorg/pkl/core/runtime/VmDataSize;)D
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;D)Lorg/pkl/core/runtime/VmDuration;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;J)Lorg/pkl/core/runtime/VmDuration;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;Lorg/pkl/core/runtime/VmDuration;)D
}

public final class org/pkl/core/ast/expression/binary/DivisionNodeGen : org/pkl/core/ast/expression/binary/DivisionNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/DivisionNode;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/binary/EqualNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)Z
	protected fun eval (DJ)Z
	protected fun eval (JD)Z
	protected fun eval (JJ)Z
	protected fun eval (Ljava/lang/Object;Ljava/lang/Object;)Z
	protected fun eval (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;)Z
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Z
	protected fun eval (ZZ)Z
	protected static fun getVmValueJavaClassOrNull (Ljava/lang/Object;)Ljava/lang/Class;
	protected static fun isIncompatibleTypes (Ljava/lang/Object;Ljava/lang/Object;)Z
}

public final class org/pkl/core/ast/expression/binary/EqualNodeGen : org/pkl/core/ast/expression/binary/EqualNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/EqualNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/binary/ExponentiationNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)D
	protected fun eval (DJ)D
	protected fun eval (JD)D
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;D)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;J)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;D)Lorg/pkl/core/runtime/VmDuration;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;J)Lorg/pkl/core/runtime/VmDuration;
	protected fun evalNegative (JJ)D
	protected fun evalPositive (JJ)J
}

public final class org/pkl/core/ast/expression/binary/ExponentiationNodeGen : org/pkl/core/ast/expression/binary/ExponentiationNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/ExponentiationNode;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public abstract class org/pkl/core/ast/expression/binary/GreaterThanNode : org/pkl/core/ast/expression/binary/ComparatorNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)Z
	protected fun eval (DJ)Z
	protected fun eval (JD)Z
	protected fun eval (JJ)Z
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Z
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;Lorg/pkl/core/runtime/VmDataSize;)Z
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;Lorg/pkl/core/runtime/VmDuration;)Z
}

public final class org/pkl/core/ast/expression/binary/GreaterThanNodeGen : org/pkl/core/ast/expression/binary/GreaterThanNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/GreaterThanNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeWith (Ljava/lang/Object;Ljava/lang/Object;)Z
}

public abstract class org/pkl/core/ast/expression/binary/GreaterThanOrEqualNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)Z
	protected fun eval (DJ)Z
	protected fun eval (JD)Z
	protected fun eval (JJ)Z
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Z
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;Lorg/pkl/core/runtime/VmDataSize;)Z
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;Lorg/pkl/core/runtime/VmDuration;)Z
}

public final class org/pkl/core/ast/expression/binary/GreaterThanOrEqualNodeGen : org/pkl/core/ast/expression/binary/GreaterThanOrEqualNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/GreaterThanOrEqualNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/binary/LessThanNode : org/pkl/core/ast/expression/binary/ComparatorNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)Z
	protected fun eval (DJ)Z
	protected fun eval (JD)Z
	protected fun eval (JJ)Z
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Z
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;Lorg/pkl/core/runtime/VmDataSize;)Z
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;Lorg/pkl/core/runtime/VmDuration;)Z
}

public final class org/pkl/core/ast/expression/binary/LessThanNodeGen : org/pkl/core/ast/expression/binary/LessThanNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/LessThanNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeWith (Ljava/lang/Object;Ljava/lang/Object;)Z
}

public abstract class org/pkl/core/ast/expression/binary/LessThanOrEqualNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)Z
	protected fun eval (DJ)Z
	protected fun eval (JD)Z
	protected fun eval (JJ)Z
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Z
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;Lorg/pkl/core/runtime/VmDataSize;)Z
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;Lorg/pkl/core/runtime/VmDuration;)Z
	public abstract fun executeWith (Ljava/lang/Object;Ljava/lang/Object;)Z
}

public final class org/pkl/core/ast/expression/binary/LessThanOrEqualNodeGen : org/pkl/core/ast/expression/binary/LessThanOrEqualNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/LessThanOrEqualNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeWith (Ljava/lang/Object;Ljava/lang/Object;)Z
}

public final class org/pkl/core/ast/expression/binary/LetExprNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/member/UnresolvedFunctionNode;Lorg/pkl/core/ast/ExpressionNode;Z)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/binary/LogicalAndNode : org/pkl/core/ast/expression/binary/ShortCircuitingExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Z)Z
}

public final class org/pkl/core/ast/expression/binary/LogicalAndNodeGen : org/pkl/core/ast/expression/binary/LogicalAndNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/LogicalAndNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/binary/LogicalOrNode : org/pkl/core/ast/expression/binary/ShortCircuitingExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Z)Z
}

public final class org/pkl/core/ast/expression/binary/LogicalOrNodeGen : org/pkl/core/ast/expression/binary/LogicalOrNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/LogicalOrNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/binary/MultiplicationNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)D
	protected fun eval (DJ)D
	protected fun eval (DLorg/pkl/core/runtime/VmDataSize;)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (DLorg/pkl/core/runtime/VmDuration;)Lorg/pkl/core/runtime/VmDuration;
	protected fun eval (JD)D
	protected fun eval (JJ)J
	protected fun eval (JLorg/pkl/core/runtime/VmDataSize;)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (JLorg/pkl/core/runtime/VmDuration;)Lorg/pkl/core/runtime/VmDuration;
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;D)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;J)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;D)Lorg/pkl/core/runtime/VmDuration;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;J)Lorg/pkl/core/runtime/VmDuration;
}

public final class org/pkl/core/ast/expression/binary/MultiplicationNodeGen : org/pkl/core/ast/expression/binary/MultiplicationNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/MultiplicationNode;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public abstract class org/pkl/core/ast/expression/binary/NotEqualNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)Z
	protected fun eval (DJ)Z
	protected fun eval (JD)Z
	protected fun eval (JJ)Z
	protected fun eval (Ljava/lang/Object;Ljava/lang/Object;)Z
	protected fun eval (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class;)Z
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Z
	protected fun eval (ZZ)Z
	protected static fun getVmValueJavaClassOrNull (Ljava/lang/Object;)Ljava/lang/Class;
	protected static fun isIncompatibleTypes (Ljava/lang/Object;Ljava/lang/Object;)Z
}

public final class org/pkl/core/ast/expression/binary/NotEqualNodeGen : org/pkl/core/ast/expression/binary/NotEqualNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/NotEqualNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/binary/NullCoalescingNode : org/pkl/core/ast/expression/binary/ShortCircuitingExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmNull;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/binary/NullCoalescingNodeGen : org/pkl/core/ast/expression/binary/NullCoalescingNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/NullCoalescingNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/binary/PipeNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/binary/PipeNodeGen : org/pkl/core/ast/expression/binary/PipeNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/PipeNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/binary/RemainderNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)D
	protected fun eval (DJ)D
	protected fun eval (JD)D
	protected fun eval (JJ)J
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;D)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;J)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;D)Lorg/pkl/core/runtime/VmDuration;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;J)Lorg/pkl/core/runtime/VmDuration;
}

public final class org/pkl/core/ast/expression/binary/RemainderNodeGen : org/pkl/core/ast/expression/binary/RemainderNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/RemainderNode;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public abstract class org/pkl/core/ast/expression/binary/ShortCircuitingExpressionNode : org/pkl/core/ast/ExpressionNode {
	protected field rightNode Lorg/pkl/core/ast/ExpressionNode;
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)V
	protected fun fallback (Ljava/lang/Object;)Ljava/lang/Object;
	protected abstract fun getLeftNode ()Lorg/pkl/core/ast/ExpressionNode;
	protected fun operatorNotDefined (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmException;
	protected fun operatorNotDefined (Ljava/lang/Object;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmException;
}

public abstract class org/pkl/core/ast/expression/binary/SubscriptNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (Ljava/lang/String;J)Ljava/lang/String;
	protected fun eval (Lorg/pkl/core/runtime/VmDynamic;Ljava/lang/Object;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmList;J)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmListing;JLcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Ljava/lang/Object;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;Ljava/lang/Object;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/binary/SubscriptNodeGen : org/pkl/core/ast/expression/binary/SubscriptNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/SubscriptNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/binary/SubtractionNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)D
	protected fun eval (DJ)D
	protected fun eval (JD)D
	protected fun eval (JJ)J
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;Lorg/pkl/core/runtime/VmDataSize;)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;Lorg/pkl/core/runtime/VmDuration;)Lorg/pkl/core/runtime/VmDuration;
}

public final class org/pkl/core/ast/expression/binary/SubtractionNodeGen : org/pkl/core/ast/expression/binary/SubtractionNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/SubtractionNode;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public abstract class org/pkl/core/ast/expression/binary/TruncatingDivisionNode : org/pkl/core/ast/expression/binary/BinaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (DD)J
	protected fun eval (DJ)J
	protected fun eval (JD)J
	protected fun eval (JJ)J
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;D)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;J)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;Lorg/pkl/core/runtime/VmDataSize;)J
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;D)Lorg/pkl/core/runtime/VmDuration;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;J)Lorg/pkl/core/runtime/VmDuration;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;Lorg/pkl/core/runtime/VmDuration;)J
}

public final class org/pkl/core/ast/expression/binary/TruncatingDivisionNodeGen : org/pkl/core/ast/expression/binary/TruncatingDivisionNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/binary/TruncatingDivisionNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public abstract class org/pkl/core/ast/expression/generator/GeneratorElementNode : org/pkl/core/ast/expression/generator/GeneratorMemberNode {
	protected fun <init> (Lorg/pkl/core/ast/member/ObjectMember;Z)V
	protected fun evalDynamic (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalDynamicClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalListing (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalListingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
}

public final class org/pkl/core/ast/expression/generator/GeneratorElementNodeGen : org/pkl/core/ast/expression/generator/GeneratorElementNode {
	public static fun create (Lorg/pkl/core/ast/member/ObjectMember;Z)Lorg/pkl/core/ast/expression/generator/GeneratorElementNode;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
}

public abstract class org/pkl/core/ast/expression/generator/GeneratorEntryNode : org/pkl/core/ast/expression/generator/GeneratorMemberNode {
	protected fun <init> (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/member/ObjectMember;Z)V
	protected fun evalDynamic (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalDynamicClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalListing (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalListingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalMapping (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmMapping;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalMappingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
}

public final class org/pkl/core/ast/expression/generator/GeneratorEntryNodeGen : org/pkl/core/ast/expression/generator/GeneratorEntryNode {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/member/ObjectMember;Z)Lorg/pkl/core/ast/expression/generator/GeneratorEntryNode;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
}

public abstract class org/pkl/core/ast/expression/generator/GeneratorForNode : org/pkl/core/ast/expression/generator/GeneratorMemberNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;[Lorg/pkl/core/ast/expression/generator/GeneratorMemberNode;Lorg/pkl/core/ast/type/TypeNode;Lorg/pkl/core/ast/type/TypeNode;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmDynamic;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmIntSeq;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmList;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmListing;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmMap;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmMapping;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmSet;)V
	public final fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected abstract fun executeWithIterable (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;Ljava/lang/Object;)V
	protected fun fallback (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;Ljava/lang/Object;)V
}

public final class org/pkl/core/ast/expression/generator/GeneratorForNodeGen : org/pkl/core/ast/expression/generator/GeneratorForNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;[Lorg/pkl/core/ast/expression/generator/GeneratorMemberNode;Lorg/pkl/core/ast/type/TypeNode;Lorg/pkl/core/ast/type/TypeNode;)Lorg/pkl/core/ast/expression/generator/GeneratorForNode;
}

public abstract class org/pkl/core/ast/expression/generator/GeneratorMemberNode : org/pkl/core/ast/PklNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Z)V
	protected final fun checkIsValidTypedProperty (Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/member/ObjectMember;)Z
	protected fun duplicateDefinition (Ljava/lang/Object;Lorg/pkl/core/ast/member/ObjectMember;)Lorg/pkl/core/runtime/VmException;
	public abstract fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected static fun isTypedObjectClass (Lorg/pkl/core/runtime/VmClass;)Z
}

public abstract class org/pkl/core/ast/expression/generator/GeneratorObjectLiteralNode : org/pkl/core/ast/expression/literal/ObjectLiteralNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;[Lorg/pkl/core/ast/expression/generator/GeneratorMemberNode;)V
	protected fun checkListingCannotHaveParameters ()Z
	protected fun checkMappingCannotHaveParameters ()Z
	protected fun checkObjectCannotHaveParameters ()Z
	protected fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/generator/GeneratorObjectLiteralNode;
	protected synthetic fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ObjectLiteralNode;
	protected fun evalDynamic (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalDynamicClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalFunction (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/ast/expression/literal/AmendFunctionNode;)Lorg/pkl/core/runtime/VmFunction;
	protected fun evalListing (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;)Lorg/pkl/core/runtime/VmListing;
	protected fun evalListingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmListing;
	protected fun evalMapping (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmMapping;)Lorg/pkl/core/runtime/VmMapping;
	protected fun evalMappingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmMapping;
	protected fun evalNull (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmNull;)Ljava/lang/Object;
	protected fun evalTyped (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
	protected fun evalTypedObjectClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmTyped;
	protected fun fallback (Ljava/lang/Object;)V
}

public final class org/pkl/core/ast/expression/generator/GeneratorObjectLiteralNodeGen : org/pkl/core/ast/expression/generator/GeneratorObjectLiteralNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;[Lorg/pkl/core/ast/expression/generator/GeneratorMemberNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/generator/GeneratorObjectLiteralNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/generator/GeneratorPredicateMemberNode : org/pkl/core/ast/expression/generator/GeneratorMemberNode {
	protected fun <init> (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/member/ObjectMember;Z)V
	protected fun evalDynamic (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalListing (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalMapping (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmMapping;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
}

public final class org/pkl/core/ast/expression/generator/GeneratorPredicateMemberNodeGen : org/pkl/core/ast/expression/generator/GeneratorPredicateMemberNode {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/member/ObjectMember;Z)Lorg/pkl/core/ast/expression/generator/GeneratorPredicateMemberNode;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
}

public abstract class org/pkl/core/ast/expression/generator/GeneratorPropertyNode : org/pkl/core/ast/expression/generator/GeneratorMemberNode {
	protected final field member Lorg/pkl/core/ast/member/ObjectMember;
	protected fun <init> (Lorg/pkl/core/ast/member/ObjectMember;)V
	protected fun checkIsValidListingProperty ()Z
	protected fun checkIsValidMappingProperty ()Z
	protected fun evalDynamic (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalDynamicClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalListing (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalListingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalMapping (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmMapping;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalMappingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalTyped (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected fun evalTypedObjectClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
}

public final class org/pkl/core/ast/expression/generator/GeneratorPropertyNodeGen : org/pkl/core/ast/expression/generator/GeneratorPropertyNode {
	public static fun create (Lorg/pkl/core/ast/member/ObjectMember;)Lorg/pkl/core/ast/expression/generator/GeneratorPropertyNode;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
}

public abstract class org/pkl/core/ast/expression/generator/GeneratorSpreadNode : org/pkl/core/ast/expression/generator/GeneratorMemberNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Z)V
	protected fun doEvalDynamic (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmObject;)V
	protected fun duplicateDefinition (Ljava/lang/Object;Lorg/pkl/core/ast/member/ObjectMember;)Lorg/pkl/core/runtime/VmException;
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmCollection;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmIntSeq;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmMap;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmObject;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmObject;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmMapping;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmObject;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmObject;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmCollection;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmObject;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmIntSeq;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmObject;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmMap;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmObject;)V
	protected fun eval (Lorg/pkl/core/runtime/VmObject;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmNull;)V
	protected fun evalDynamicClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmObject;)V
	protected fun evalListingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmObject;)V
	protected fun evalMappingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmObject;)V
	protected fun evalTypedClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/expression/generator/ObjectData;Lorg/pkl/core/runtime/VmObject;)V
	public final fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
	protected abstract fun executeWithIterable (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;Ljava/lang/Object;)V
	protected fun fallback (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;Ljava/lang/Object;)V
}

public final class org/pkl/core/ast/expression/generator/GeneratorSpreadNodeGen : org/pkl/core/ast/expression/generator/GeneratorSpreadNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Z)Lorg/pkl/core/ast/expression/generator/GeneratorSpreadNode;
}

public final class org/pkl/core/ast/expression/generator/GeneratorWhenNode : org/pkl/core/ast/expression/generator/GeneratorMemberNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;[Lorg/pkl/core/ast/expression/generator/GeneratorMemberNode;[Lorg/pkl/core/ast/expression/generator/GeneratorMemberNode;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/ast/expression/generator/ObjectData;)V
}

public final class org/pkl/core/ast/expression/generator/ObjectData {
}

public final class org/pkl/core/ast/expression/generator/RestoreForBindingsNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lorg/pkl/core/ast/ExpressionNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/literal/AmendFunctionNode : org/pkl/core/ast/PklNode {
	public fun <init> (Lorg/pkl/core/ast/expression/literal/ObjectLiteralNode;[Lorg/pkl/core/ast/type/TypeNode;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmFunction;
}

public abstract class org/pkl/core/ast/expression/literal/AmendModuleNode : org/pkl/core/ast/expression/literal/SpecializedObjectLiteralNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;[Lorg/pkl/core/ast/ExpressionNode;Lorg/graalvm/collections/EconomicMap;Lorg/pkl/core/runtime/ModuleInfo;)V
	protected fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/AmendModuleNode;
	protected synthetic fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ObjectLiteralNode;
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/ast/expression/literal/AmendModuleNodeGen : org/pkl/core/ast/expression/literal/AmendModuleNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;[Lorg/pkl/core/ast/ExpressionNode;Lorg/graalvm/collections/EconomicMap;Lorg/pkl/core/runtime/ModuleInfo;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/AmendModuleNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/literal/CheckIsAnnotationClassNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lorg/pkl/core/ast/type/UnresolvedTypeNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/literal/ConstantEntriesLiteralNode : org/pkl/core/ast/expression/literal/SpecializedObjectLiteralNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/UnmodifiableEconomicMap;)V
	public fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ConstantEntriesLiteralNode;
	public synthetic fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ObjectLiteralNode;
	protected fun evalDynamic (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalDynamicClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalFunction (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/ast/expression/literal/AmendFunctionNode;)Lorg/pkl/core/runtime/VmFunction;
	protected fun evalListing (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;)Lorg/pkl/core/runtime/VmListing;
	protected fun evalListingClass (Lorg/pkl/core/runtime/VmClass;)V
	protected fun evalMapping (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmMapping;)Lorg/pkl/core/runtime/VmMapping;
	protected fun evalMappingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmMapping;
	protected fun evalNull (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmNull;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)V
}

public final class org/pkl/core/ast/expression/literal/ConstantEntriesLiteralNodeGen : org/pkl/core/ast/expression/literal/ConstantEntriesLiteralNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/UnmodifiableEconomicMap;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ConstantEntriesLiteralNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/literal/ElementsEntriesLiteralNode : org/pkl/core/ast/expression/literal/SpecializedObjectLiteralNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/UnmodifiableEconomicMap;[Lorg/pkl/core/ast/member/ObjectMember;[Lorg/pkl/core/ast/ExpressionNode;[Lorg/pkl/core/ast/member/ObjectMember;)V
	protected fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ElementsEntriesLiteralNode;
	protected synthetic fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ObjectLiteralNode;
	protected fun createMembers (Lcom/oracle/truffle/api/frame/VirtualFrame;I)Lorg/graalvm/collections/UnmodifiableEconomicMap;
	protected fun evalDynamic (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalDynamicClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalFunction (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/ast/expression/literal/AmendFunctionNode;)Lorg/pkl/core/runtime/VmFunction;
	protected fun evalListing (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;)Lorg/pkl/core/runtime/VmListing;
	protected fun evalListingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmListing;
	protected fun evalNull (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmNull;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)V
}

public final class org/pkl/core/ast/expression/literal/ElementsEntriesLiteralNodeGen : org/pkl/core/ast/expression/literal/ElementsEntriesLiteralNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/UnmodifiableEconomicMap;[Lorg/pkl/core/ast/member/ObjectMember;[Lorg/pkl/core/ast/ExpressionNode;[Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ElementsEntriesLiteralNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/literal/ElementsLiteralNode : org/pkl/core/ast/expression/literal/SpecializedObjectLiteralNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/UnmodifiableEconomicMap;[Lorg/pkl/core/ast/member/ObjectMember;)V
	protected fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ElementsLiteralNode;
	protected synthetic fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ObjectLiteralNode;
	protected fun createMembers (I)Lorg/graalvm/collections/UnmodifiableEconomicMap;
	protected fun evalDynamicCached (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;ILorg/graalvm/collections/UnmodifiableEconomicMap;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalDynamicClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/graalvm/collections/UnmodifiableEconomicMap;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalDynamicUncached (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalFunction (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/ast/expression/literal/AmendFunctionNode;)Lorg/pkl/core/runtime/VmFunction;
	protected fun evalListingCached (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;ILorg/graalvm/collections/UnmodifiableEconomicMap;)Lorg/pkl/core/runtime/VmListing;
	protected fun evalListingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/graalvm/collections/UnmodifiableEconomicMap;)Lorg/pkl/core/runtime/VmListing;
	protected fun evalListingUncached (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;)Lorg/pkl/core/runtime/VmListing;
	protected fun evalNull (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmNull;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)V
}

public final class org/pkl/core/ast/expression/literal/ElementsLiteralNodeGen : org/pkl/core/ast/expression/literal/ElementsLiteralNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/UnmodifiableEconomicMap;[Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ElementsLiteralNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/literal/EmptyObjectLiteralNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (Lorg/pkl/core/runtime/VmClass;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmNull;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmObjectLike;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)V
	protected abstract fun getParentNode ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/ast/expression/literal/EmptyObjectLiteralNodeGen : org/pkl/core/ast/expression/literal/EmptyObjectLiteralNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/EmptyObjectLiteralNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/literal/EntriesLiteralNode : org/pkl/core/ast/expression/literal/SpecializedObjectLiteralNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/UnmodifiableEconomicMap;[Lorg/pkl/core/ast/ExpressionNode;[Lorg/pkl/core/ast/member/ObjectMember;)V
	public fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/EntriesLiteralNode;
	public synthetic fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ObjectLiteralNode;
	protected fun createListMembers (Lcom/oracle/truffle/api/frame/VirtualFrame;I)Lorg/graalvm/collections/UnmodifiableEconomicMap;
	protected fun createMapMembers (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/graalvm/collections/EconomicMap;
	protected fun evalDynamic (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalDynamicClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalFunction (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/ast/expression/literal/AmendFunctionNode;)Lorg/pkl/core/runtime/VmFunction;
	protected fun evalListing (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;)Lorg/pkl/core/runtime/VmListing;
	protected fun evalListingClass (Lorg/pkl/core/runtime/VmClass;)V
	protected fun evalMapping (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmMapping;)Lorg/pkl/core/runtime/VmMapping;
	protected fun evalMappingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmMapping;
	protected fun evalNull (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmNull;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/literal/EntriesLiteralNodeGen : org/pkl/core/ast/expression/literal/EntriesLiteralNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/UnmodifiableEconomicMap;[Lorg/pkl/core/ast/ExpressionNode;[Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/EntriesLiteralNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/literal/FalseLiteralNode : org/pkl/core/ast/ExpressionNode, org/pkl/core/ast/ConstantNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Boolean;
	public synthetic fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getValue ()Ljava/lang/Boolean;
	public synthetic fun getValue ()Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/literal/FloatLiteralNode : org/pkl/core/ast/ExpressionNode, org/pkl/core/ast/ConstantNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;D)V
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Double;
	public synthetic fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getValue ()Ljava/lang/Double;
	public synthetic fun getValue ()Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/literal/FunctionLiteralNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/member/UnresolvedFunctionNode;Z)V
	public synthetic fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/runtime/VmFunction;
}

public final class org/pkl/core/ast/expression/literal/IntLiteralNode : org/pkl/core/ast/ExpressionNode, org/pkl/core/ast/ConstantNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;J)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Long;
	public synthetic fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getValue ()Ljava/lang/Long;
	public synthetic fun getValue ()Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/literal/InterpolatedStringLiteralNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/ExpressionNode;)V
	public synthetic fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/String;
}

public final class org/pkl/core/ast/expression/literal/ListLiteralNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/ExpressionNode;)V
	public synthetic fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/runtime/VmList;
}

public final class org/pkl/core/ast/expression/literal/MapLiteralNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/ExpressionNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/literal/ObjectLiteralNode : org/pkl/core/ast/ExpressionNode {
	protected final field isCustomThisScope Z
	protected final field language Lorg/pkl/core/runtime/VmLanguage;
	protected final field parameterTypes [Lorg/pkl/core/ast/type/UnresolvedTypeNode;
	protected final field parametersDescriptor Lcom/oracle/truffle/api/frame/FrameDescriptor;
	protected final field qualifiedScopeName Ljava/lang/String;
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;)V
	protected final fun checkIsValidFunctionAmendment (Lorg/pkl/core/runtime/VmFunction;)Z
	protected abstract fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ObjectLiteralNode;
	protected final fun createAmendFunctionNode (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/expression/literal/AmendFunctionNode;
	protected abstract fun executeWithParent (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	protected abstract fun getParentNode ()Lorg/pkl/core/ast/ExpressionNode;
	protected static fun isTypedObjectClass (Lorg/pkl/core/runtime/VmClass;)Z
}

public abstract class org/pkl/core/ast/expression/literal/PropertiesLiteralNode : org/pkl/core/ast/expression/literal/SpecializedObjectLiteralNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/UnmodifiableEconomicMap;)V
	public synthetic fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/ObjectLiteralNode;
	public fun copy (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/PropertiesLiteralNode;
	protected fun evalClassUncached (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Ljava/lang/Object;
	protected fun evalDynamic (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;)Ljava/lang/Object;
	protected fun evalDynamicClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmDynamic;
	protected fun evalFunction (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/ast/expression/literal/AmendFunctionNode;)Lorg/pkl/core/runtime/VmFunction;
	protected fun evalListing (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;)Ljava/lang/Object;
	protected fun evalListingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmListing;
	protected fun evalMapping (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmMapping;)Ljava/lang/Object;
	protected fun evalMappingClass (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmMapping;
	protected fun evalNull (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmNull;)Ljava/lang/Object;
	protected fun evalTypedObjectCached (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmClass;)Ljava/lang/Object;
	protected fun evalTypedObjectClassCached (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmTyped;
	protected fun evalTypedObjectUncached (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)V
}

public final class org/pkl/core/ast/expression/literal/PropertiesLiteralNodeGen : org/pkl/core/ast/expression/literal/PropertiesLiteralNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/UnmodifiableEconomicMap;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/literal/PropertiesLiteralNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/literal/SetLiteralNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/ExpressionNode;)V
	public synthetic fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/ast/expression/literal/SpecializedObjectLiteralNode : org/pkl/core/ast/expression/literal/ObjectLiteralNode {
	protected field maxListingMemberIndex J
	protected final field members Lorg/graalvm/collections/UnmodifiableEconomicMap;
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Ljava/lang/String;ZLcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/UnmodifiableEconomicMap;)V
	protected fun addListEntries (Lcom/oracle/truffle/api/frame/VirtualFrame;ILorg/graalvm/collections/EconomicMap;[Lorg/pkl/core/ast/ExpressionNode;[Lorg/pkl/core/ast/member/ObjectMember;)V
	protected final fun checkIsValidListingAmendment ()Z
	protected final fun checkIsValidMappingAmendment ()Z
	protected fun checkIsValidTypedAmendment (Ljava/lang/Object;)Z
	protected final fun checkMaxListingMemberIndex (I)Z
	protected fun elementsEntriesFallback (Ljava/lang/Object;Lorg/pkl/core/ast/member/ObjectMember;Z)Ljava/lang/Object;
	protected fun findFirstNonDefaultProperty (Lorg/graalvm/collections/UnmodifiableEconomicMap;)Lorg/pkl/core/ast/member/ObjectMember;
	protected fun findFirstNonProperty (Lorg/graalvm/collections/UnmodifiableEconomicMap;)Lorg/pkl/core/ast/member/ObjectMember;
}

public final class org/pkl/core/ast/expression/literal/TrueLiteralNode : org/pkl/core/ast/ExpressionNode, org/pkl/core/ast/ConstantNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Boolean;
	public synthetic fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getValue ()Ljava/lang/Boolean;
	public synthetic fun getValue ()Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/member/InferParentWithinMethodNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Lorg/pkl/core/runtime/Identifier;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/member/InferParentWithinObjectMethodNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Lorg/pkl/core/runtime/Identifier;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/member/InferParentWithinPropertyNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;)V
	protected fun eval (Lorg/pkl/core/runtime/VmDynamic;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;)Ljava/lang/Object;
	protected fun evalPrototype (Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/Object;
	protected fun evalTypedObject (Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/member/InferParentWithinPropertyNodeGen : org/pkl/core/ast/expression/member/InferParentWithinPropertyNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/member/InferParentWithinPropertyNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/member/InvokeMethodDirectNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/member/ClassMethod;Lorg/pkl/core/ast/ExpressionNode;[Lorg/pkl/core/ast/ExpressionNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/member/InvokeMethodLexicalNode : org/pkl/core/ast/ExpressionNode {
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/member/InvokeMethodVirtualNode : org/pkl/core/ast/ExpressionNode {
	protected final field methodName Lorg/pkl/core/runtime/Identifier;
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;[Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/MemberLookupMode;)V
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;[Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/MemberLookupMode;Z)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/runtime/VmClass;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun evalCached (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/member/ClassMethod;Lcom/oracle/truffle/api/nodes/DirectCallNode;)Ljava/lang/Object;
	protected fun evalFunction (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/runtime/VmClass;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun evalFunctionCached (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/runtime/VmClass;Lcom/oracle/truffle/api/RootCallTarget;Lcom/oracle/truffle/api/nodes/DirectCallNode;)Ljava/lang/Object;
	public abstract fun executeWith (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/runtime/VmClass;)Ljava/lang/Object;
	protected fun resolveMethod (Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/ast/member/ClassMethod;
}

public final class org/pkl/core/ast/expression/member/InvokeMethodVirtualNodeGen : org/pkl/core/ast/expression/member/InvokeMethodVirtualNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;[Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/MemberLookupMode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/internal/GetClassNode;)Lorg/pkl/core/ast/expression/member/InvokeMethodVirtualNode;
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;[Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/MemberLookupMode;ZLorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/internal/GetClassNode;)Lorg/pkl/core/ast/expression/member/InvokeMethodVirtualNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeWith (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;Lorg/pkl/core/runtime/VmClass;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/member/InvokeSuperMethodNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;[Lorg/pkl/core/ast/ExpressionNode;Z)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/ast/member/ClassMethod;Lcom/oracle/truffle/api/nodes/DirectCallNode;)Ljava/lang/Object;
	protected fun findSupermethod (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/member/ClassMethod;
}

public final class org/pkl/core/ast/expression/member/InvokeSuperMethodNodeGen : org/pkl/core/ast/expression/member/InvokeSuperMethodNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;[Lorg/pkl/core/ast/ExpressionNode;Z)Lorg/pkl/core/ast/expression/member/InvokeSuperMethodNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/member/ReadLocalPropertyNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/member/ObjectMember;I)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/member/ReadPropertyNode : org/pkl/core/ast/ExpressionNode {
	protected final field propertyName Lorg/pkl/core/runtime/Identifier;
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;)V
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;Lorg/pkl/core/ast/MemberLookupMode;Z)V
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;Z)V
	protected static fun createCallNode (Lorg/pkl/core/ast/member/ClassProperty;)Lcom/oracle/truffle/api/nodes/DirectCallNode;
	protected fun evalObject (Ljava/lang/Object;Ljava/lang/Class;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun evalOther (Ljava/lang/Object;Ljava/lang/Class;Lorg/pkl/core/ast/member/ClassProperty;Lcom/oracle/truffle/api/nodes/DirectCallNode;)Ljava/lang/Object;
	protected static fun getVmObjectSubclassOrNull (Ljava/lang/Object;)Ljava/lang/Class;
	protected fun resolveProperty (Ljava/lang/Object;)Lorg/pkl/core/ast/member/ClassProperty;
}

public final class org/pkl/core/ast/expression/member/ReadPropertyNodeGen : org/pkl/core/ast/expression/member/ReadPropertyNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/member/ReadPropertyNode;
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;Lorg/pkl/core/ast/MemberLookupMode;ZLorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/member/ReadPropertyNode;
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;ZLorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/member/ReadPropertyNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public class org/pkl/core/ast/expression/member/ReadSuperEntryNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/member/ReadSuperPropertyNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;Z)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/member/ResolveMethodNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;[Lorg/pkl/core/ast/ExpressionNode;ZZLorg/pkl/core/ast/builder/ConstLevel;I)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/primary/CustomThisNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/primary/GetEnclosingOwnerNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (I)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/primary/GetEnclosingReceiverNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (I)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/primary/GetMemberKeyNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> ()V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/primary/GetModuleNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/primary/GetOwnerNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> ()V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/primary/GetReceiverNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> ()V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/primary/OuterNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/primary/ResolveVariableNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;ZZLorg/pkl/core/ast/builder/ConstLevel;I)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/primary/ThisNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/ternary/IfElseNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/unary/AbstractImportNode : org/pkl/core/ast/ExpressionNode {
	protected final field currentModule Lorg/pkl/core/module/ResolvedModuleKey;
	protected final field importUri Ljava/net/URI;
	public final fun getImportUri ()Ljava/net/URI;
}

public abstract class org/pkl/core/ast/expression/unary/AbstractReadNode : org/pkl/core/ast/expression/unary/UnaryExpressionNode {
	protected final field currentModule Lorg/pkl/core/module/ModuleKey;
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/module/ModuleKey;)V
	protected final fun doRead (Ljava/lang/String;Lorg/pkl/core/runtime/VmContext;Lcom/oracle/truffle/api/nodes/Node;)Ljava/lang/Object;
	protected final fun parseUri (Ljava/lang/String;)Ljava/net/URI;
}

public final class org/pkl/core/ast/expression/unary/ImportGlobMemberBodyNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Lorg/pkl/core/module/ResolvedModuleKey;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public class org/pkl/core/ast/expression/unary/ImportGlobNode : org/pkl/core/ast/expression/unary/AbstractImportNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/module/ResolvedModuleKey;Ljava/net/URI;Ljava/lang/String;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/unary/ImportNode : org/pkl/core/ast/expression/unary/AbstractImportNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/module/ResolvedModuleKey;Ljava/net/URI;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/unary/LogicalNotNode : org/pkl/core/ast/expression/unary/UnaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (Z)Z
}

public final class org/pkl/core/ast/expression/unary/LogicalNotNodeGen : org/pkl/core/ast/expression/unary/LogicalNotNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/unary/LogicalNotNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/unary/NonNullNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/unary/NullPropagatingOperationNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/unary/PropagateNullReceiverNode : org/pkl/core/ast/expression/unary/UnaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (Lorg/pkl/core/runtime/VmNull;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/unary/PropagateNullReceiverNodeGen : org/pkl/core/ast/expression/unary/PropagateNullReceiverNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/unary/PropagateNullReceiverNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public class org/pkl/core/ast/expression/unary/ReadGlobMemberBodyNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/unary/ReadGlobNode : org/pkl/core/ast/expression/unary/AbstractReadNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/module/ModuleKey;)V
	public fun read (Ljava/lang/String;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/unary/ReadGlobNodeGen : org/pkl/core/ast/expression/unary/ReadGlobNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/module/ModuleKey;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/unary/ReadGlobNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/unary/ReadNode : org/pkl/core/ast/expression/unary/AbstractReadNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/module/ModuleKey;)V
	public fun read (Ljava/lang/String;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/unary/ReadNodeGen : org/pkl/core/ast/expression/unary/ReadNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/module/ModuleKey;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/unary/ReadNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/unary/ReadOrNullNode : org/pkl/core/ast/expression/unary/AbstractReadNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/module/ModuleKey;)V
	public fun read (Ljava/lang/String;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/unary/ReadOrNullNodeGen : org/pkl/core/ast/expression/unary/ReadOrNullNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/module/ModuleKey;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/unary/ReadOrNullNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/unary/ReadOrNullStdLibNode : org/pkl/core/ast/expression/unary/AbstractReadNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/module/ModuleKey;)V
	public fun read (Ljava/lang/String;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/unary/ReadOrNullStdLibNodeGen : org/pkl/core/ast/expression/unary/ReadOrNullStdLibNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/module/ModuleKey;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/unary/ReadOrNullStdLibNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/unary/ThrowNode : org/pkl/core/ast/expression/unary/UnaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (Ljava/lang/String;)Ljava/lang/Void;
}

public final class org/pkl/core/ast/expression/unary/ThrowNodeGen : org/pkl/core/ast/expression/unary/ThrowNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/unary/ThrowNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/expression/unary/TraceNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/unary/UnaryExpressionNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun fallback (Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/expression/unary/UnaryMinusNode : org/pkl/core/ast/expression/unary/UnaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun eval (D)D
	protected fun eval (J)J
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;)Lorg/pkl/core/runtime/VmDataSize;
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;)Lorg/pkl/core/runtime/VmDuration;
}

public final class org/pkl/core/ast/expression/unary/UnaryMinusNodeGen : org/pkl/core/ast/expression/unary/UnaryMinusNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/expression/unary/UnaryMinusNode;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public abstract class org/pkl/core/ast/frame/ReadEnclosingFrameSlotNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;II)V
	protected fun evalBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	protected fun evalFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	protected fun evalGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	protected fun evalInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	protected fun evalObject (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	protected final fun getCapturedFrame (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lcom/oracle/truffle/api/frame/MaterializedFrame;
}

public final class org/pkl/core/ast/frame/ReadEnclosingFrameSlotNodeGen : org/pkl/core/ast/frame/ReadEnclosingFrameSlotNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;II)Lorg/pkl/core/ast/frame/ReadEnclosingFrameSlotNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public abstract class org/pkl/core/ast/frame/ReadFrameSlotNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;I)V
	protected fun evalBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	protected fun evalFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	protected fun evalGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	protected fun evalInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	protected fun evalObject (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/frame/ReadFrameSlotNodeGen : org/pkl/core/ast/frame/ReadFrameSlotNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;I)Lorg/pkl/core/ast/frame/ReadFrameSlotNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public abstract class org/pkl/core/ast/frame/WriteFrameSlotNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;I)V
	protected fun evalBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;Z)Z
	protected fun evalFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;D)D
	protected fun evalGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	protected fun evalInt (Lcom/oracle/truffle/api/frame/VirtualFrame;J)J
	public abstract fun executeWithValue (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)V
	protected final fun isBooleanOrIllegal (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	protected final fun isFloatOrIllegal (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	protected final fun isIntOrIllegal (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
}

public final class org/pkl/core/ast/frame/WriteFrameSlotNodeGen : org/pkl/core/ast/frame/WriteFrameSlotNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;ILorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/frame/WriteFrameSlotNode;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun executeWithValue (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)V
}

public abstract class org/pkl/core/ast/internal/BlackholeNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> ()V
	protected fun evalBoolean (Z)Ljava/lang/Object;
	protected fun evalFloat (D)Ljava/lang/Object;
	protected fun evalInt (J)Ljava/lang/Object;
	protected fun evalObject (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/internal/BlackholeNodeGen : org/pkl/core/ast/internal/BlackholeNode {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/internal/BlackholeNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/internal/GetBaseModuleClassNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lorg/pkl/core/runtime/Identifier;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/internal/GetClassNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> ()V
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun evalBoolean (Z)Lorg/pkl/core/runtime/VmClass;
	protected fun evalFloat (D)Lorg/pkl/core/runtime/VmClass;
	protected fun evalInt (J)Lorg/pkl/core/runtime/VmClass;
	protected fun evalString (Ljava/lang/String;)Lorg/pkl/core/runtime/VmClass;
	protected fun evalVmValue (Ljava/lang/Object;Ljava/lang/Class;)Lorg/pkl/core/runtime/VmClass;
	public abstract fun executeWith (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmClass;
	protected static fun getValueClass (Ljava/lang/Object;)Ljava/lang/Class;
}

public final class org/pkl/core/ast/internal/GetClassNodeGen : org/pkl/core/ast/internal/GetClassNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/internal/GetClassNode;
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/internal/GetClassNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeWith (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmClass;
}

public abstract class org/pkl/core/ast/internal/IsInstanceOfNode : org/pkl/core/ast/PklNode {
	public fun <init> ()V
	protected fun eval (DLorg/pkl/core/runtime/VmClass;)Z
	protected fun eval (JLorg/pkl/core/runtime/VmClass;)Z
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmClass;)Z
	protected fun eval (ZLorg/pkl/core/runtime/VmClass;)Z
	protected fun evalVmValue (Ljava/lang/Object;Lorg/pkl/core/runtime/VmClass;Ljava/lang/Class;)Z
	public abstract fun executeBoolean (Ljava/lang/Object;Lorg/pkl/core/runtime/VmClass;)Z
	protected fun getJavaClass (Ljava/lang/Object;)Ljava/lang/Class;
}

public final class org/pkl/core/ast/internal/IsInstanceOfNodeGen : org/pkl/core/ast/internal/IsInstanceOfNode {
	public static fun create ()Lorg/pkl/core/ast/internal/IsInstanceOfNode;
	public fun executeBoolean (Ljava/lang/Object;Lorg/pkl/core/runtime/VmClass;)Z
}

public abstract class org/pkl/core/ast/internal/ToStringNode : org/pkl/core/ast/expression/unary/UnaryExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun createInvokeNode ()Lorg/pkl/core/ast/expression/member/InvokeMethodVirtualNode;
	protected fun evalBoolean (Z)Ljava/lang/String;
	protected fun evalFloat (D)Ljava/lang/String;
	protected fun evalInt (J)Ljava/lang/String;
	protected fun evalString (Ljava/lang/String;)Ljava/lang/String;
	protected fun evalTyped (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/ast/expression/member/InvokeMethodVirtualNode;)Ljava/lang/String;
	protected fun fallback (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/internal/ToStringNodeGen : org/pkl/core/ast/internal/ToStringNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/internal/ToStringNode;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/lambda/ApplyVmFunction0Node : org/pkl/core/ast/PklNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun evalDirect (Lorg/pkl/core/runtime/VmFunction;Lcom/oracle/truffle/api/RootCallTarget;Lcom/oracle/truffle/api/nodes/DirectCallNode;)Ljava/lang/Object;
	public abstract fun execute (Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/lambda/ApplyVmFunction0NodeGen : org/pkl/core/ast/lambda/ApplyVmFunction0Node {
	public static fun create ()Lorg/pkl/core/ast/lambda/ApplyVmFunction0Node;
	public fun execute (Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/lambda/ApplyVmFunction1Node : org/pkl/core/ast/ExpressionNode {
	public fun <init> ()V
	public static fun create ()Lorg/pkl/core/ast/lambda/ApplyVmFunction1Node;
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun evalDirect (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Lcom/oracle/truffle/api/RootCallTarget;Lcom/oracle/truffle/api/nodes/DirectCallNode;)Ljava/lang/Object;
	public abstract fun execute (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;)Ljava/lang/Object;
	public final fun executeBoolean (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;)Z
	public final fun executeCollection (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmCollection;
	public final fun executeInt (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;)Ljava/lang/Long;
	public final fun executeString (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;)Ljava/lang/String;
}

public final class org/pkl/core/ast/lambda/ApplyVmFunction1NodeGen : org/pkl/core/ast/lambda/ApplyVmFunction1Node {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/lambda/ApplyVmFunction1Node;
	public fun execute (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/lambda/ApplyVmFunction2Node : org/pkl/core/ast/PklNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun evalDirect (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Lcom/oracle/truffle/api/RootCallTarget;Lcom/oracle/truffle/api/nodes/DirectCallNode;)Ljava/lang/Object;
	public abstract fun execute (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public final fun executeBoolean (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;)Z
	public final fun executeCollection (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmCollection;
	public final fun executeInt (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Long;
	public final fun executeMap (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmMap;
	public final fun executePair (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmPair;
}

public final class org/pkl/core/ast/lambda/ApplyVmFunction2NodeGen : org/pkl/core/ast/lambda/ApplyVmFunction2Node {
	public static fun create ()Lorg/pkl/core/ast/lambda/ApplyVmFunction2Node;
	public fun execute (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/lambda/ApplyVmFunction3Node : org/pkl/core/ast/PklNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun evalDirect (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lcom/oracle/truffle/api/RootCallTarget;Lcom/oracle/truffle/api/nodes/DirectCallNode;)Ljava/lang/Object;
	public abstract fun execute (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/lambda/ApplyVmFunction3NodeGen : org/pkl/core/ast/lambda/ApplyVmFunction3Node {
	public static fun create ()Lorg/pkl/core/ast/lambda/ApplyVmFunction3Node;
	public fun execute (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/lambda/ApplyVmFunction4Node : org/pkl/core/ast/PklNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun evalDirect (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lcom/oracle/truffle/api/RootCallTarget;Lcom/oracle/truffle/api/nodes/DirectCallNode;)Ljava/lang/Object;
	public abstract fun execute (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/lambda/ApplyVmFunction4NodeGen : org/pkl/core/ast/lambda/ApplyVmFunction4Node {
	public static fun create ()Lorg/pkl/core/ast/lambda/ApplyVmFunction4Node;
	public fun execute (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/lambda/ApplyVmFunction5Node : org/pkl/core/ast/PklNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun evalDirect (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lcom/oracle/truffle/api/RootCallTarget;Lcom/oracle/truffle/api/nodes/DirectCallNode;)Ljava/lang/Object;
	public abstract fun execute (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/lambda/ApplyVmFunction5NodeGen : org/pkl/core/ast/lambda/ApplyVmFunction5Node {
	public static fun create ()Lorg/pkl/core/ast/lambda/ApplyVmFunction5Node;
	public fun execute (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/member/ClassMember : org/pkl/core/ast/member/Member {
	protected final field annotations Ljava/util/List;
	protected final field docComment Lcom/oracle/truffle/api/source/SourceSection;
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;ILorg/pkl/core/runtime/Identifier;Ljava/lang/String;Lcom/oracle/truffle/api/source/SourceSection;Ljava/util/List;Lorg/pkl/core/runtime/VmTyped;)V
	public final fun getAnnotations ()Ljava/util/List;
	public final fun getDeclaringClass ()Lorg/pkl/core/runtime/VmClass;
	public final fun getDocComment ()Lcom/oracle/truffle/api/source/SourceSection;
	public final fun getOwner ()Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/ast/member/ClassMethod : org/pkl/core/ast/member/ClassMember {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;ILorg/pkl/core/runtime/Identifier;Ljava/lang/String;Lcom/oracle/truffle/api/source/SourceSection;Ljava/util/List;Lorg/pkl/core/runtime/VmTyped;Ljava/util/List;Ljava/lang/String;)V
	public fun export (Lorg/pkl/core/PClass;)Lorg/pkl/core/PClass$Method;
	public fun getCallSignature ()Ljava/lang/String;
	public fun getCallTarget ()Lcom/oracle/truffle/api/CallTarget;
	public fun getCallTarget (Lcom/oracle/truffle/api/source/SourceSection;)Lcom/oracle/truffle/api/CallTarget;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getModifierMirrors ()Lorg/pkl/core/runtime/VmSet;
	public fun getParameterCount ()I
	public fun getParameterMirrors ()Lorg/pkl/core/runtime/VmMap;
	public fun getReturnTypeMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getReturnTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
	public fun getTypeParameterMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun initFunctionNode (Lorg/pkl/core/ast/member/FunctionNode;)V
}

public final class org/pkl/core/ast/member/ClassNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/ExpressionNode;ILorg/pkl/core/PClassInfo;Ljava/util/List;Lorg/pkl/core/runtime/ModuleInfo;Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/graalvm/collections/EconomicMap;[Lorg/pkl/core/ast/member/UnresolvedPropertyNode;[Lorg/pkl/core/ast/member/UnresolvedMethodNode;)V
	public synthetic fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/member/ClassProperty : org/pkl/core/ast/member/ClassMember {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;ILorg/pkl/core/runtime/Identifier;Ljava/lang/String;Lcom/oracle/truffle/api/source/SourceSection;Ljava/util/List;Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/ast/member/PropertyTypeNode;Lorg/pkl/core/ast/member/ObjectMember;)V
	public fun export (Lorg/pkl/core/PClass;)Lorg/pkl/core/PClass$Property;
	public fun getCallSignature ()Ljava/lang/String;
	public fun getInitializer ()Lorg/pkl/core/ast/member/ObjectMember;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getModifierMirrors ()Lorg/pkl/core/runtime/VmSet;
	public fun getTypeMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getTypeNode ()Lorg/pkl/core/ast/member/PropertyTypeNode;
}

public final class org/pkl/core/ast/member/DefaultPropertyBodyNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;Lorg/pkl/core/ast/member/PropertyTypeNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun isUndefined ()Z
}

public final class org/pkl/core/ast/member/DelegateToExtraStorageMapOrParentNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> ()V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/member/DelegateToExtraStorageObjNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> ()V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/member/DelegateToExtraStorageObjOrParentNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> ()V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/member/ElementOrEntryNode : org/pkl/core/ast/member/RegularMemberNode {
	protected field receiverNode Lorg/pkl/core/ast/ExpressionNode;
	protected fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/ExpressionNode;)V
	protected fun evalDynamic (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;)Ljava/lang/Object;
	protected fun evalListing (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmListing;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun evalMapping (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmMapping;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/member/ElementOrEntryNodeGen : org/pkl/core/ast/member/ElementOrEntryNode {
	public static fun create (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/member/ElementOrEntryNode;
}

public final class org/pkl/core/ast/member/FunctionNode : org/pkl/core/ast/member/RegularMemberNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/Member;I[Lorg/pkl/core/ast/type/TypeNode;Lorg/pkl/core/ast/type/TypeNode;ZLorg/pkl/core/ast/ExpressionNode;)V
	public fun export (Lorg/pkl/core/PClass;Lcom/oracle/truffle/api/source/SourceSection;Ljava/util/List;ILjava/util/List;)Lorg/pkl/core/PClass$Method;
	public fun getCallSignature ()Ljava/lang/String;
	public fun getParameterCount ()I
	public fun getParameterMirrors ()Lorg/pkl/core/runtime/VmMap;
	public fun getReturnTypeMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getReturnTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
}

public class org/pkl/core/ast/member/Lambda : org/pkl/core/ast/member/Member {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)V
	public fun getCallSignature ()Ljava/lang/String;
}

public final class org/pkl/core/ast/member/ListingOrMappingTypeCastNode : org/pkl/core/ast/PklRootNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/type/TypeNode;Ljava/lang/String;)V
	public fun getName ()Ljava/lang/String;
	public fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/member/LocalTypedPropertyNode : org/pkl/core/ast/member/RegularMemberNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;)V
	public fun getDefaultValue ()Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/member/Member {
	protected final field headerSection Lcom/oracle/truffle/api/source/SourceSection;
	protected final field modifiers I
	protected final field name Lorg/pkl/core/runtime/Identifier;
	protected final field qualifiedName Ljava/lang/String;
	protected final field sourceSection Lcom/oracle/truffle/api/source/SourceSection;
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;ILorg/pkl/core/runtime/Identifier;Ljava/lang/String;)V
	public abstract fun getCallSignature ()Ljava/lang/String;
	public final fun getHeaderSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public final fun getModifiers ()I
	public fun getName ()Lorg/pkl/core/runtime/Identifier;
	public fun getNameOrNull ()Lorg/pkl/core/runtime/Identifier;
	public final fun getQualifiedName ()Ljava/lang/String;
	public final fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public final fun isAbstract ()Z
	public final fun isClass ()Z
	public final fun isConst ()Z
	public final fun isConstOrFixed ()Z
	public final fun isExternal ()Z
	public final fun isFixed ()Z
	public final fun isGlob ()Z
	public final fun isHidden ()Z
	public final fun isImport ()Z
	public final fun isLocal ()Z
	public final fun isLocalOrExternalOrAbstract ()Z
	public final fun isLocalOrExternalOrHidden ()Z
	public final fun isType ()Z
	public final fun isTypeAlias ()Z
}

public final class org/pkl/core/ast/member/ModuleNode : org/pkl/core/ast/PklRootNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun getName ()Ljava/lang/String;
	public fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
}

public final class org/pkl/core/ast/member/ObjectMember : org/pkl/core/ast/member/Member {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;ILorg/pkl/core/runtime/Identifier;Ljava/lang/String;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getBodySection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getCallSignature ()Ljava/lang/String;
	public fun getCallTarget ()Lcom/oracle/truffle/api/RootCallTarget;
	public fun getConstantValue ()Ljava/lang/Object;
	public fun getLocalPropertyDefaultValue ()Ljava/lang/Object;
	public fun getMemberNode ()Lorg/pkl/core/ast/MemberNode;
	public fun hashCode ()I
	public fun initConstantValue (Ljava/lang/Object;)V
	public fun initConstantValue (Lorg/pkl/core/ast/ConstantNode;)V
	public fun initMemberNode (Lorg/pkl/core/ast/MemberNode;)V
	public fun isElement ()Z
	public fun isEntry ()Z
	public fun isProp ()Z
	public fun isUndefined ()Z
}

public final class org/pkl/core/ast/member/ObjectMethodNode : org/pkl/core/ast/member/RegularMemberNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/ExpressionNode;I[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;)V
	public fun getReturnTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/member/PropertyTypeNode : org/pkl/core/ast/PklRootNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Ljava/lang/String;Lorg/pkl/core/ast/type/TypeNode;)V
	public fun export ()Lorg/pkl/core/PType;
	public static fun export (Lorg/pkl/core/ast/member/PropertyTypeNode;)Lorg/pkl/core/PType;
	public fun getDefaultValue ()Ljava/lang/Object;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public static fun getMirror (Lorg/pkl/core/ast/member/PropertyTypeNode;)Lorg/pkl/core/runtime/VmTyped;
	public fun getName ()Ljava/lang/String;
	public fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
	public fun isUnknownType ()Z
}

public abstract class org/pkl/core/ast/member/RegularMemberNode : org/pkl/core/ast/MemberNode {
	protected final field member Lorg/pkl/core/ast/member/Member;
	protected fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/Member;Lorg/pkl/core/ast/ExpressionNode;)V
	public final fun getHeaderSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public final fun getName ()Ljava/lang/String;
	public final fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
}

public class org/pkl/core/ast/member/SharedMemberNode : org/pkl/core/ast/MemberNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/ExpressionNode;)V
	protected fun executeImpl (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getHeaderSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getName ()Ljava/lang/String;
	public fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
}

public final class org/pkl/core/ast/member/TypeAliasNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/ExpressionNode;ILjava/lang/String;Ljava/lang/String;Ljava/util/List;Lorg/pkl/core/ast/type/UnresolvedTypeNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/member/TypeCheckedPropertyNode : org/pkl/core/ast/member/RegularMemberNode {
	protected field ownerNode Lorg/pkl/core/ast/ExpressionNode;
	protected fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/ExpressionNode;)V
	protected fun createTypeCheckCallNode (Lorg/pkl/core/ast/member/ClassProperty;)Lcom/oracle/truffle/api/nodes/DirectCallNode;
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmDynamic;)Ljava/lang/Object;
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmObjectLike;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	protected fun evalTypedObjectCached (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/ast/member/ClassProperty;Lcom/oracle/truffle/api/nodes/DirectCallNode;)Ljava/lang/Object;
	protected fun getProperty (Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/ast/member/ClassProperty;
}

public final class org/pkl/core/ast/member/TypeCheckedPropertyNodeGen : org/pkl/core/ast/member/TypeCheckedPropertyNode {
	public static fun create (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/member/TypeCheckedPropertyNode;
}

public final class org/pkl/core/ast/member/TypedPropertyNode : org/pkl/core/ast/member/RegularMemberNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/member/PropertyTypeNode;)V
}

public abstract class org/pkl/core/ast/member/UnresolvedClassMemberNode : org/pkl/core/ast/PklNode {
	protected final field annotationNodes [Lorg/pkl/core/ast/ExpressionNode;
	protected final field descriptor Lcom/oracle/truffle/api/frame/FrameDescriptor;
	protected final field docComment Lcom/oracle/truffle/api/source/SourceSection;
	protected final field headerSection Lcom/oracle/truffle/api/source/SourceSection;
	protected final field language Lorg/pkl/core/runtime/VmLanguage;
	protected final field modifiers I
	protected final field name Lorg/pkl/core/runtime/Identifier;
	protected final field qualifiedName Ljava/lang/String;
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/ExpressionNode;ILorg/pkl/core/runtime/Identifier;Ljava/lang/String;)V
	public abstract fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/ast/member/ClassMember;
	public fun getQualifiedName ()Ljava/lang/String;
}

public final class org/pkl/core/ast/member/UnresolvedFunctionNode : org/pkl/core/ast/PklNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/Member;I[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/member/FunctionNode;
}

public final class org/pkl/core/ast/member/UnresolvedMethodNode : org/pkl/core/ast/member/UnresolvedClassMemberNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/ExpressionNode;ILorg/pkl/core/runtime/Identifier;Ljava/lang/String;ILjava/util/List;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;ZLorg/pkl/core/ast/ExpressionNode;)V
	public synthetic fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/ast/member/ClassMember;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/ast/member/ClassMethod;
	public fun getHeaderSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getName ()Lorg/pkl/core/runtime/Identifier;
	public fun isLocal ()Z
}

public final class org/pkl/core/ast/member/UnresolvedPropertyNode : org/pkl/core/ast/member/UnresolvedClassMemberNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/ExpressionNode;ILorg/pkl/core/runtime/Identifier;Ljava/lang/String;Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/pkl/core/ast/ExpressionNode;)V
	public synthetic fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/ast/member/ClassMember;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/ast/member/ClassProperty;
	public fun getHeaderSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getName ()Lorg/pkl/core/runtime/Identifier;
	public fun isClass ()Z
	public fun isImport ()Z
	public fun isLocal ()Z
	public fun isTypeAlias ()Z
}

public final class org/pkl/core/ast/member/UntypedObjectMemberNode : org/pkl/core/ast/member/RegularMemberNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/ExpressionNode;)V
}

public final class org/pkl/core/ast/repl/ResolveClassMemberNode : org/pkl/core/ast/PklRootNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/member/UnresolvedClassMemberNode;Lorg/pkl/core/runtime/VmClass;)V
	public fun getName ()Ljava/lang/String;
	public fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
}

public final class org/pkl/core/ast/type/GetParentForTypeNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/UnresolvedTypeNode;Ljava/lang/String;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/type/IdentityMixinNode : org/pkl/core/ast/PklRootNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;Lorg/pkl/core/ast/type/TypeNode;)V
	public fun getName ()Ljava/lang/String;
	public fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
}

public abstract class org/pkl/core/ast/type/ResolveDeclaredTypeNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected fun getEnclosingModule (Lorg/pkl/core/runtime/VmObjectLike;)Lorg/pkl/core/runtime/VmTyped;
	protected fun getImport (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/Identifier;Lcom/oracle/truffle/api/source/SourceSection;)Lorg/pkl/core/runtime/VmTyped;
	protected fun getType (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/Identifier;Lcom/oracle/truffle/api/source/SourceSection;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/type/ResolveQualifiedDeclaredTypeNode : org/pkl/core/ast/type/ResolveDeclaredTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;Lorg/pkl/core/runtime/Identifier;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/type/ResolveSimpleDeclaredTypeNode : org/pkl/core/ast/type/ResolveDeclaredTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;Z)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/type/TypeCastNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;)V
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/type/TypeConstraintNode : org/pkl/core/ast/PklNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected static fun createApplyNode ()Lorg/pkl/core/ast/lambda/ApplyVmFunction1Node;
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/ast/lambda/ApplyVmFunction1Node;)V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Z)V
	public abstract fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)V
	public fun export ()Ljava/lang/String;
	protected fun fallback (Ljava/lang/Object;)V
}

public final class org/pkl/core/ast/type/TypeConstraintNodeGen : org/pkl/core/ast/type/TypeConstraintNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/ast/type/TypeConstraintNode;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)V
}

public abstract class org/pkl/core/ast/type/TypeNode : org/pkl/core/ast/PklNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	protected abstract fun acceptTypeNode (Lorg/pkl/core/ast/type/TypeNode$TypeNodeConsumer;)Z
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	protected fun doExport ()Lorg/pkl/core/PType;
	protected abstract fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public abstract fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public abstract fun executeAndSet (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public static fun export (Lorg/pkl/core/ast/type/TypeNode;)Lorg/pkl/core/PType;
	public static fun forClass (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/ast/type/TypeNode;
	public abstract fun getFrameSlotKind ()Lcom/oracle/truffle/api/frame/FrameSlotKind;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public static fun getMirror (Lorg/pkl/core/ast/type/TypeNode;)Lorg/pkl/core/runtime/VmTyped;
	public static fun getMirrors ([Lorg/pkl/core/ast/type/TypeNode;)Lorg/pkl/core/runtime/VmList;
	public fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun getVmTypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
	public abstract fun initWriteSlotNode (I)Lorg/pkl/core/ast/type/TypeNode;
	public fun isEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun isNoopTypeCheck ()Z
	protected fun isParametric ()Z
	protected final fun typeMismatch (Ljava/lang/Object;Ljava/lang/Object;)Lorg/pkl/core/ast/type/VmTypeMismatchException;
}

public final class org/pkl/core/ast/type/TypeNode$AnyTypeNode : org/pkl/core/ast/type/TypeNode$WriteFrameSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun isNoopTypeCheck ()Z
}

public final class org/pkl/core/ast/type/TypeNode$BooleanTypeNode : org/pkl/core/ast/type/TypeNode$FrameSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeAndSet (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getFrameSlotKind ()Lcom/oracle/truffle/api/frame/FrameSlotKind;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$CollectionTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/TypeNode;)V
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$ConstrainedTypeNode : org/pkl/core/ast/type/TypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/TypeNode;[Lorg/pkl/core/ast/type/TypeConstraintNode;)V
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeAndSet (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getBaseTypeSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getFirstConstraintSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getFrameSlotKind ()Lcom/oracle/truffle/api/frame/FrameSlotKind;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun initWriteSlotNode (I)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/TypeNode$DynamicTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$FinalClassTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmClass;)V
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$FinalModuleTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmClass;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$FloatTypeNode : org/pkl/core/ast/type/TypeNode$FrameSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeAndSet (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getFrameSlotKind ()Lcom/oracle/truffle/api/frame/FrameSlotKind;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public abstract class org/pkl/core/ast/type/TypeNode$FrameSlotTypeNode : org/pkl/core/ast/type/TypeNode {
	protected field slot I
	protected field writeFrameSlotNode Lorg/pkl/core/ast/frame/WriteFrameSlotNode;
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun initWriteSlotNode (I)Lorg/pkl/core/ast/type/TypeNode;
}

public abstract class org/pkl/core/ast/type/TypeNode$FunctionClassTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/TypeNode;)V
	protected fun acceptTypeNode (Lorg/pkl/core/ast/type/TypeNode$TypeNodeConsumer;)Z
	protected final fun doExport ()Lorg/pkl/core/PType;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)V
	public final fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public final fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	protected fun isParametric ()Z
}

public abstract class org/pkl/core/ast/type/TypeNode$FunctionNClassTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/type/TypeNode;)V
	protected fun acceptTypeNode (Lorg/pkl/core/ast/type/TypeNode$TypeNodeConsumer;)Z
	protected final fun doExport ()Lorg/pkl/core/PType;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)Ljava/lang/Object;
	protected fun getFunctionNClass ()Lorg/pkl/core/runtime/VmClass;
	public final fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public final fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	protected fun isParametric ()Z
}

public abstract class org/pkl/core/ast/type/TypeNode$FunctionTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/type/TypeNode;Lorg/pkl/core/ast/type/TypeNode;)V
	protected fun acceptTypeNode (Lorg/pkl/core/ast/type/TypeNode$TypeNodeConsumer;)Z
	protected final fun doExport ()Lorg/pkl/core/PType;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)Ljava/lang/Object;
	protected fun getFunctionNClass ()Lorg/pkl/core/runtime/VmClass;
	public final fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public final fun getParameterTypeMirrors ()Lorg/pkl/core/runtime/VmList;
	public final fun getReturnTypeMirror ()Lorg/pkl/core/runtime/VmTyped;
	public final fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	protected fun isParametric ()Z
}

public final class org/pkl/core/ast/type/TypeNode$Int16TypeAliasTypeNode : org/pkl/core/ast/type/TypeNode$IntSlotTypeNode {
	public fun <init> ()V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun getVmTypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
}

public final class org/pkl/core/ast/type/TypeNode$Int32TypeAliasTypeNode : org/pkl/core/ast/type/TypeNode$IntSlotTypeNode {
	public fun <init> ()V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun getVmTypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
}

public final class org/pkl/core/ast/type/TypeNode$Int8TypeAliasTypeNode : org/pkl/core/ast/type/TypeNode$IntSlotTypeNode {
	public fun <init> ()V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun getVmTypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
}

public abstract class org/pkl/core/ast/type/TypeNode$IntSlotTypeNode : org/pkl/core/ast/type/TypeNode$FrameSlotTypeNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public final fun executeAndSet (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public final fun getFrameSlotKind ()Lcom/oracle/truffle/api/frame/FrameSlotKind;
}

public final class org/pkl/core/ast/type/TypeNode$IntTypeNode : org/pkl/core/ast/type/TypeNode$IntSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$ListTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/TypeNode;)V
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getElementTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
	public fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public abstract class org/pkl/core/ast/type/TypeNode$ListingOrMappingTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	protected field keyTypeNode Lorg/pkl/core/ast/type/TypeNode;
	protected field valueTypeCastNode Lorg/pkl/core/ast/member/ListingOrMappingTypeCastNode;
	protected field valueTypeNode Lorg/pkl/core/ast/type/TypeNode;
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Lorg/pkl/core/ast/type/TypeNode;Lorg/pkl/core/ast/type/TypeNode;)V
	public final fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	protected fun doEagerCheck (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmObject;)V
	protected fun doEagerCheck (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmObject;ZZ)V
	public fun getKeyTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
	protected fun getValueTypeCastNode ()Lorg/pkl/core/ast/member/ListingOrMappingTypeCastNode;
	public fun getValueTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
	protected fun isParametric ()Z
}

public final class org/pkl/core/ast/type/TypeNode$ListingTypeNode : org/pkl/core/ast/type/TypeNode$ListingOrMappingTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Lorg/pkl/core/ast/type/TypeNode;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$MapTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/TypeNode;Lorg/pkl/core/ast/type/TypeNode;)V
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getValueTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$MappingTypeNode : org/pkl/core/ast/type/TypeNode$ListingOrMappingTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Lorg/pkl/core/ast/type/TypeNode;Lorg/pkl/core/ast/type/TypeNode;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public abstract class org/pkl/core/ast/type/TypeNode$NonFinalClassTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	protected final field clazz Lorg/pkl/core/runtime/VmClass;
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmClass;)V
	protected fun acceptTypeNode (Lorg/pkl/core/ast/type/TypeNode$TypeNodeConsumer;)Z
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	protected fun eval (Ljava/lang/Object;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmValue;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmValue;Lorg/pkl/core/runtime/VmClass;Z)Ljava/lang/Object;
	public fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public final fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$NonFinalModuleTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmClass;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$NonNullTypeAliasTypeNode : org/pkl/core/ast/type/TypeNode$WriteFrameSlotTypeNode {
	public fun <init> ()V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getVmTypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
}

public final class org/pkl/core/ast/type/TypeNode$NothingTypeNode : org/pkl/core/ast/type/TypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeAndSet (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getFrameSlotKind ()Lcom/oracle/truffle/api/frame/FrameSlotKind;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun initWriteSlotNode (I)Lorg/pkl/core/ast/type/TypeNode;
}

public class org/pkl/core/ast/type/TypeNode$NullableTypeNode : org/pkl/core/ast/type/TypeNode$WriteFrameSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/TypeNode;)V
	protected fun acceptTypeNode (Lorg/pkl/core/ast/type/TypeNode$TypeNodeConsumer;)Z
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	protected final fun doExport ()Lorg/pkl/core/PType;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getElementTypeMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getElementTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/ast/type/TypeNode$NumberTypeNode : org/pkl/core/ast/type/TypeNode$FrameSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeAndSet (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getFrameSlotKind ()Lcom/oracle/truffle/api/frame/FrameSlotKind;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public abstract class org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode : org/pkl/core/ast/type/TypeNode$FrameSlotTypeNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public final fun executeAndSet (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public final fun getFrameSlotKind ()Lcom/oracle/truffle/api/frame/FrameSlotKind;
}

public final class org/pkl/core/ast/type/TypeNode$PairTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/TypeNode;Lorg/pkl/core/ast/type/TypeNode;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public abstract class org/pkl/core/ast/type/TypeNode$SetTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/TypeNode;)V
	protected fun acceptTypeNode (Lorg/pkl/core/ast/type/TypeNode$TypeNodeConsumer;)Z
	public final fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	protected final fun doExport ()Lorg/pkl/core/PType;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
	protected fun fallback (Ljava/lang/Object;)Ljava/lang/Object;
	public fun getElementTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
	public final fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public final fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	protected fun isParametric ()Z
}

public final class org/pkl/core/ast/type/TypeNode$StringLiteralTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)V
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getLiteral ()Ljava/lang/String;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/ast/type/TypeNode$StringTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$TypeAliasTypeNode : org/pkl/core/ast/type/TypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmTypeAlias;[Lorg/pkl/core/ast/type/TypeNode;)V
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeAndSet (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getFrameSlotKind ()Lcom/oracle/truffle/api/frame/FrameSlotKind;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getTypeArgumentMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun getVmTypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
	public fun initWriteSlotNode (I)Lorg/pkl/core/ast/type/TypeNode;
}

protected abstract interface class org/pkl/core/ast/type/TypeNode$TypeNodeConsumer {
	public abstract fun accept (Lorg/pkl/core/ast/type/TypeNode;)Z
}

public final class org/pkl/core/ast/type/TypeNode$TypeVariableNode : org/pkl/core/ast/type/TypeNode$WriteFrameSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/TypeParameter;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getTypeParameterIndex ()I
	public fun getTypeParameterMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun isNoopTypeCheck ()Z
}

public final class org/pkl/core/ast/type/TypeNode$TypedTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/ast/type/TypeNode$UIntTypeAliasTypeNode : org/pkl/core/ast/type/TypeNode$IntSlotTypeNode {
	public fun <init> (Lorg/pkl/core/runtime/VmTypeAlias;J)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun getVmTypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
}

public final class org/pkl/core/ast/type/TypeNode$UnionOfStringLiteralsTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getElementTypeMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
}

public class org/pkl/core/ast/type/TypeNode$UnionTypeNode : org/pkl/core/ast/type/TypeNode$WriteFrameSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;I[Lorg/pkl/core/ast/type/TypeNode;Z)V
	protected fun acceptTypeNode (Lorg/pkl/core/ast/type/TypeNode$TypeNodeConsumer;)Z
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	protected fun doExport ()Lorg/pkl/core/PType;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getElementTypeMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getElementTypeNodes ()[Lorg/pkl/core/ast/type/TypeNode;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun isNoopTypeCheck ()Z
}

public final class org/pkl/core/ast/type/TypeNode$UnknownTypeNode : org/pkl/core/ast/type/TypeNode$WriteFrameSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun isNoopTypeCheck ()Z
}

public class org/pkl/core/ast/type/TypeNode$VarArgsTypeNode : org/pkl/core/ast/type/TypeNode$ObjectSlotTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/TypeNode;)V
	protected fun acceptTypeNode (Lorg/pkl/core/ast/type/TypeNode$TypeNodeConsumer;)Z
	public fun createDefaultValue (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Ljava/lang/Object;
	protected final fun doExport ()Lorg/pkl/core/PType;
	public fun doIsEquivalentTo (Lorg/pkl/core/ast/type/TypeNode;)Z
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	protected fun isParametric ()Z
}

public abstract class org/pkl/core/ast/type/TypeNode$WriteFrameSlotTypeNode : org/pkl/core/ast/type/TypeNode {
	protected field slot I
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public final fun executeAndSet (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public final fun getFrameSlotKind ()Lcom/oracle/truffle/api/frame/FrameSlotKind;
	public fun initWriteSlotNode (I)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/TypeNodeFactory {
	public fun <init> ()V
}

public final class org/pkl/core/ast/type/TypeNodeFactory$FunctionClassTypeNodeGen : org/pkl/core/ast/type/TypeNode$FunctionClassTypeNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/TypeNode;)Lorg/pkl/core/ast/type/TypeNode$FunctionClassTypeNode;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/type/TypeNodeFactory$FunctionNClassTypeNodeGen : org/pkl/core/ast/type/TypeNode$FunctionNClassTypeNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/type/TypeNode;)Lorg/pkl/core/ast/type/TypeNode$FunctionNClassTypeNode;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/type/TypeNodeFactory$FunctionTypeNodeGen : org/pkl/core/ast/type/TypeNode$FunctionTypeNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/type/TypeNode;Lorg/pkl/core/ast/type/TypeNode;)Lorg/pkl/core/ast/type/TypeNode$FunctionTypeNode;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/type/TypeNodeFactory$NonFinalClassTypeNodeGen : org/pkl/core/ast/type/TypeNode$NonFinalClassTypeNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/ast/type/TypeNode$NonFinalClassTypeNode;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/type/TypeNodeFactory$SetTypeNodeGen : org/pkl/core/ast/type/TypeNode$SetTypeNode {
	public static fun create (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/TypeNode;)Lorg/pkl/core/ast/type/TypeNode$SetTypeNode;
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
	public fun executeEagerly (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/ast/type/TypeTestNode : org/pkl/core/ast/ExpressionNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;)V
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/ast/type/UnresolvedTypeNode : org/pkl/core/ast/PklNode {
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public abstract fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$Constrained : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/UnresolvedTypeNode;[Lorg/pkl/core/ast/type/TypeConstraintNode;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$Declared : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$Function : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$Module : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$Nothing : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$Nullable : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/ast/type/UnresolvedTypeNode;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$Parameterized : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/VmLanguage;Lorg/pkl/core/ast/ExpressionNode;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$StringLiteral : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$TypeVariable : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/TypeParameter;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$Union : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;I[Lorg/pkl/core/ast/type/UnresolvedTypeNode;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$UnionOfStringLiterals : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;ILjava/util/Set;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public final class org/pkl/core/ast/type/UnresolvedTypeNode$Unknown : org/pkl/core/ast/type/UnresolvedTypeNode {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;)V
	public fun execute (Lcom/oracle/truffle/api/frame/VirtualFrame;)Lorg/pkl/core/ast/type/TypeNode;
}

public abstract class org/pkl/core/ast/type/VmTypeMismatchException : com/oracle/truffle/api/nodes/ControlFlowException {
	protected final field actualValue Ljava/lang/Object;
	protected field insertedStackFrames Ljava/util/Map;
	protected final field sourceSection Lcom/oracle/truffle/api/source/SourceSection;
	protected fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/Object;)V
	public abstract fun describe (Ljava/lang/StringBuilder;Ljava/lang/String;)V
	protected fun exceptionBuilder ()Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun putInsertedStackFrame (Lcom/oracle/truffle/api/CallTarget;Lorg/pkl/core/StackFrame;)V
	public abstract fun toVmException ()Lorg/pkl/core/runtime/VmException;
}

public final class org/pkl/core/ast/type/VmTypeMismatchException$Constraint : org/pkl/core/ast/type/VmTypeMismatchException {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/Object;)V
	public fun describe (Ljava/lang/StringBuilder;Ljava/lang/String;)V
	public fun toVmException ()Lorg/pkl/core/runtime/VmException;
}

public final class org/pkl/core/ast/type/VmTypeMismatchException$Nothing : org/pkl/core/ast/type/VmTypeMismatchException {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/Object;)V
	public fun describe (Ljava/lang/StringBuilder;Ljava/lang/String;)V
	public fun toVmException ()Lorg/pkl/core/runtime/VmException;
}

public final class org/pkl/core/ast/type/VmTypeMismatchException$Simple : org/pkl/core/ast/type/VmTypeMismatchException {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/Object;Ljava/lang/Object;)V
	public fun describe (Ljava/lang/StringBuilder;Ljava/lang/String;)V
	public fun toVmException ()Lorg/pkl/core/runtime/VmException;
}

public final class org/pkl/core/ast/type/VmTypeMismatchException$Union : org/pkl/core/ast/type/VmTypeMismatchException {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/Object;Lorg/pkl/core/ast/type/TypeNode$UnionTypeNode;[Lorg/pkl/core/ast/type/VmTypeMismatchException;)V
	public fun describe (Ljava/lang/StringBuilder;Ljava/lang/String;)V
	public fun toVmException ()Lorg/pkl/core/runtime/VmException;
}

public final class org/pkl/core/evaluatorSettings/Color : java/lang/Enum {
	public static final field ALWAYS Lorg/pkl/core/evaluatorSettings/Color;
	public static final field AUTO Lorg/pkl/core/evaluatorSettings/Color;
	public static final field NEVER Lorg/pkl/core/evaluatorSettings/Color;
	public fun hasColor ()Z
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/evaluatorSettings/Color;
	public static fun values ()[Lorg/pkl/core/evaluatorSettings/Color;
}

public final class org/pkl/core/evaluatorSettings/PklEvaluatorSettings : java/lang/Record {
	public fun <init> (Ljava/util/Map;Ljava/util/Map;Ljava/util/List;Ljava/util/List;Lorg/pkl/core/evaluatorSettings/Color;Ljava/lang/Boolean;Ljava/nio/file/Path;Ljava/util/List;Lorg/pkl/core/Duration;Ljava/nio/file/Path;Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$Http;Ljava/util/Map;Ljava/util/Map;)V
	public fun allowedModules ()Ljava/util/List;
	public fun allowedResources ()Ljava/util/List;
	public fun color ()Lorg/pkl/core/evaluatorSettings/Color;
	public fun env ()Ljava/util/Map;
	public fun equals (Ljava/lang/Object;)Z
	public fun externalModuleReaders ()Ljava/util/Map;
	public fun externalProperties ()Ljava/util/Map;
	public fun externalResourceReaders ()Ljava/util/Map;
	public fun hashCode ()I
	public fun http ()Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$Http;
	public fun moduleCacheDir ()Ljava/nio/file/Path;
	public fun modulePath ()Ljava/util/List;
	public fun noCache ()Ljava/lang/Boolean;
	public static fun parse (Lorg/pkl/core/Value;Ljava/util/function/BiFunction;)Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings;
	public fun rootDir ()Ljava/nio/file/Path;
	public fun timeout ()Lorg/pkl/core/Duration;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/evaluatorSettings/PklEvaluatorSettings$ExternalReader : java/lang/Record {
	public fun <init> (Ljava/lang/String;Ljava/util/List;)V
	public fun arguments ()Ljava/util/List;
	public final fun equals (Ljava/lang/Object;)Z
	public fun executable ()Ljava/lang/String;
	public final fun hashCode ()I
	public static fun parse (Lorg/pkl/core/Value;)Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$ExternalReader;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/evaluatorSettings/PklEvaluatorSettings$Http : java/lang/Record {
	public static final field DEFAULT Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$Http;
	public fun <init> (Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$Proxy;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public static fun parse (Lorg/pkl/core/Value;)Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$Http;
	public fun proxy ()Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$Proxy;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/evaluatorSettings/PklEvaluatorSettings$Proxy : java/lang/Record {
	public fun <init> (Ljava/net/URI;Ljava/util/List;)V
	public fun address ()Ljava/net/URI;
	public static fun create (Ljava/lang/String;Ljava/util/List;)Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$Proxy;
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun noProxy ()Ljava/util/List;
	public static fun parse (Lorg/pkl/core/Value;)Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$Proxy;
	public final fun toString ()Ljava/lang/String;
}

public abstract interface class org/pkl/core/externalreader/ExternalReaderProcess : java/lang/AutoCloseable {
	public abstract fun close ()V
	public abstract fun getModuleReaderSpec (Ljava/lang/String;)Lorg/pkl/core/module/ExternalModuleResolver$Spec;
	public abstract fun getModuleResolver (J)Lorg/pkl/core/module/ExternalModuleResolver;
	public abstract fun getResourceReaderSpec (Ljava/lang/String;)Lorg/pkl/core/resource/ExternalResourceResolver$Spec;
	public abstract fun getResourceResolver (J)Lorg/pkl/core/resource/ExternalResourceResolver;
	public static fun of (Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$ExternalReader;)Lorg/pkl/core/externalreader/ExternalReaderProcess;
}

public final class org/pkl/core/externalreader/ExternalReaderProcessException : java/lang/Exception {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/Throwable;)V
}

public abstract interface class org/pkl/core/http/HttpClient : java/lang/AutoCloseable {
	public static fun builder ()Lorg/pkl/core/http/HttpClient$Builder;
	public abstract fun close ()V
	public static fun dummyClient ()Lorg/pkl/core/http/HttpClient;
	public abstract fun send (Ljava/net/http/HttpRequest;Ljava/net/http/HttpResponse$BodyHandler;)Ljava/net/http/HttpResponse;
}

public abstract interface class org/pkl/core/http/HttpClient$Builder {
	public abstract fun addCertificates (Ljava/nio/file/Path;)Lorg/pkl/core/http/HttpClient$Builder;
	public abstract fun addCertificates ([B)Lorg/pkl/core/http/HttpClient$Builder;
	public abstract fun build ()Lorg/pkl/core/http/HttpClient;
	public abstract fun buildLazily ()Lorg/pkl/core/http/HttpClient;
	public abstract fun setConnectTimeout (Ljava/time/Duration;)Lorg/pkl/core/http/HttpClient$Builder;
	public abstract fun setProxy (Ljava/net/URI;Ljava/util/List;)Lorg/pkl/core/http/HttpClient$Builder;
	public abstract fun setProxySelector (Ljava/net/ProxySelector;)Lorg/pkl/core/http/HttpClient$Builder;
	public abstract fun setRequestTimeout (Ljava/time/Duration;)Lorg/pkl/core/http/HttpClient$Builder;
	public abstract fun setTestPort (I)Lorg/pkl/core/http/HttpClient$Builder;
	public abstract fun setUserAgent (Ljava/lang/String;)Lorg/pkl/core/http/HttpClient$Builder;
}

public final class org/pkl/core/http/HttpClientInitException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
	public fun <init> (Ljava/lang/Throwable;)V
}

public abstract class org/pkl/core/messaging/AbstractMessagePackDecoder : org/pkl/core/messaging/MessageDecoder {
	protected final field unpacker Lorg/msgpack/core/MessageUnpacker;
	public fun <init> (Ljava/io/InputStream;)V
	public fun <init> (Lorg/msgpack/core/MessageUnpacker;)V
	public fun decode ()Lorg/pkl/core/messaging/Message;
	protected abstract fun decodeMessage (Lorg/pkl/core/messaging/Message$Type;Ljava/util/Map;)Lorg/pkl/core/messaging/Message;
	protected static fun get (Ljava/util/Map;Ljava/lang/String;)Lorg/msgpack/value/Value;
	protected static fun getNullable (Ljava/util/Map;Ljava/lang/String;)Lorg/msgpack/value/Value;
	protected static fun unpackBoolean (Ljava/util/Map;Ljava/lang/String;)Z
	protected static fun unpackByteArray (Ljava/util/Map;Ljava/lang/String;)[B
	protected static fun unpackInt (Ljava/util/Map;Ljava/lang/String;)I
	protected static fun unpackListOrNull (Ljava/util/Map;Ljava/lang/String;Ljava/util/function/Function;)Ljava/util/List;
	protected static fun unpackLong (Ljava/util/Map;Ljava/lang/String;)J
	protected static fun unpackLongOrNull (Ljava/util/Map;Ljava/lang/String;)Ljava/lang/Long;
	protected static fun unpackLongOrNull (Ljava/util/Map;Ljava/lang/String;Ljava/util/function/Function;)Ljava/lang/Object;
	protected static fun unpackString (Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;
	protected static fun unpackStringListOrNull (Ljava/util/Map;Ljava/lang/String;)Ljava/util/List;
	protected static fun unpackStringListOrNull (Ljava/util/Map;Ljava/lang/String;Ljava/util/function/Function;)Ljava/util/List;
	protected static fun unpackStringMapOrNull (Ljava/util/Map;Ljava/lang/String;)Ljava/util/Map;
	protected static fun unpackStringMapOrNull (Ljava/util/Map;Ljava/lang/String;Ljava/util/function/Function;)Ljava/util/Map;
	protected static fun unpackStringOrNull (Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;
	protected static fun unpackStringOrNull (Ljava/util/Map;Ljava/lang/String;Ljava/util/function/Function;)Ljava/lang/Object;
}

public abstract class org/pkl/core/messaging/AbstractMessagePackEncoder : org/pkl/core/messaging/MessageEncoder {
	protected final field packer Lorg/msgpack/core/MessagePacker;
	public fun <init> (Ljava/io/OutputStream;)V
	public fun <init> (Lorg/msgpack/core/MessagePacker;)V
	public final fun encode (Lorg/pkl/core/messaging/Message;)V
	protected abstract fun encodeMessage (Lorg/pkl/core/messaging/Message;)V
	protected fun packKeyValue (Ljava/lang/String;Ljava/lang/Integer;)V
	protected fun packKeyValue (Ljava/lang/String;Ljava/lang/Long;)V
	protected fun packKeyValue (Ljava/lang/String;Ljava/lang/String;)V
	protected fun packKeyValue (Ljava/lang/String;Ljava/util/Collection;)V
	protected fun packKeyValue (Ljava/lang/String;Ljava/util/Collection;Ljava/util/function/Function;)V
	protected fun packKeyValue (Ljava/lang/String;Ljava/util/Map;)V
	protected fun packKeyValue (Ljava/lang/String;Z)V
	protected fun packKeyValue (Ljava/lang/String;[B)V
	protected fun packKeyValueLong (Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/Function;)V
	protected fun packKeyValueString (Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/Function;)V
	protected fun packMapHeader (ILjava/lang/Object;)V
	protected fun packMapHeader (ILjava/lang/Object;Ljava/lang/Object;)V
	protected fun packMapHeader (ILjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
}

public class org/pkl/core/messaging/BaseMessagePackDecoder : org/pkl/core/messaging/AbstractMessagePackDecoder {
	public fun <init> (Ljava/io/InputStream;)V
	public fun <init> (Lorg/msgpack/core/MessageUnpacker;)V
	protected fun decodeMessage (Lorg/pkl/core/messaging/Message$Type;Ljava/util/Map;)Lorg/pkl/core/messaging/Message;
	protected static fun unpackModuleReaderSpec (Lorg/msgpack/value/Value;)Lorg/pkl/core/messaging/Messages$ModuleReaderSpec;
	protected static fun unpackPathElements (Ljava/util/Map;Ljava/lang/String;)Ljava/util/List;
	protected static fun unpackResourceReaderSpec (Lorg/msgpack/value/Value;)Lorg/pkl/core/messaging/Messages$ResourceReaderSpec;
}

public class org/pkl/core/messaging/BaseMessagePackEncoder : org/pkl/core/messaging/AbstractMessagePackEncoder {
	public fun <init> (Ljava/io/OutputStream;)V
	public fun <init> (Lorg/msgpack/core/MessagePacker;)V
	protected fun encodeMessage (Lorg/pkl/core/messaging/Message;)V
	protected fun packModuleReaderSpec (Lorg/pkl/core/messaging/Messages$ModuleReaderSpec;)V
	protected fun packPathElement (Lorg/pkl/core/module/PathElement;)V
	protected fun packResourceReaderSpec (Lorg/pkl/core/messaging/Messages$ResourceReaderSpec;)V
}

public final class org/pkl/core/messaging/DecodeException : org/pkl/core/messaging/ProtocolException {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
}

public abstract interface class org/pkl/core/messaging/Message {
	public abstract fun type ()Lorg/pkl/core/messaging/Message$Type;
}

public abstract interface class org/pkl/core/messaging/Message$Client : org/pkl/core/messaging/Message {
}

public abstract interface class org/pkl/core/messaging/Message$Client$OneWay : org/pkl/core/messaging/Message$Client, org/pkl/core/messaging/Message$OneWay {
}

public abstract interface class org/pkl/core/messaging/Message$Client$Request : org/pkl/core/messaging/Message$Client, org/pkl/core/messaging/Message$Request {
}

public abstract interface class org/pkl/core/messaging/Message$Client$Response : org/pkl/core/messaging/Message$Client, org/pkl/core/messaging/Message$Response {
}

public abstract interface class org/pkl/core/messaging/Message$OneWay : org/pkl/core/messaging/Message {
}

public abstract interface class org/pkl/core/messaging/Message$Request : org/pkl/core/messaging/Message {
	public abstract fun requestId ()J
}

public abstract interface class org/pkl/core/messaging/Message$Response : org/pkl/core/messaging/Message {
	public abstract fun requestId ()J
}

public abstract interface class org/pkl/core/messaging/Message$Server : org/pkl/core/messaging/Message {
}

public abstract interface class org/pkl/core/messaging/Message$Server$OneWay : org/pkl/core/messaging/Message$OneWay, org/pkl/core/messaging/Message$Server {
}

public abstract interface class org/pkl/core/messaging/Message$Server$Request : org/pkl/core/messaging/Message$Request, org/pkl/core/messaging/Message$Server {
}

public abstract interface class org/pkl/core/messaging/Message$Server$Response : org/pkl/core/messaging/Message$Response, org/pkl/core/messaging/Message$Server {
}

public final class org/pkl/core/messaging/Message$Type : java/lang/Enum {
	public static final field CLOSE_EVALUATOR Lorg/pkl/core/messaging/Message$Type;
	public static final field CLOSE_EXTERNAL_PROCESS Lorg/pkl/core/messaging/Message$Type;
	public static final field CREATE_EVALUATOR_REQUEST Lorg/pkl/core/messaging/Message$Type;
	public static final field CREATE_EVALUATOR_RESPONSE Lorg/pkl/core/messaging/Message$Type;
	public static final field EVALUATE_REQUEST Lorg/pkl/core/messaging/Message$Type;
	public static final field EVALUATE_RESPONSE Lorg/pkl/core/messaging/Message$Type;
	public static final field INITIALIZE_MODULE_READER_REQUEST Lorg/pkl/core/messaging/Message$Type;
	public static final field INITIALIZE_MODULE_READER_RESPONSE Lorg/pkl/core/messaging/Message$Type;
	public static final field INITIALIZE_RESOURCE_READER_REQUEST Lorg/pkl/core/messaging/Message$Type;
	public static final field INITIALIZE_RESOURCE_READER_RESPONSE Lorg/pkl/core/messaging/Message$Type;
	public static final field LIST_MODULES_REQUEST Lorg/pkl/core/messaging/Message$Type;
	public static final field LIST_MODULES_RESPONSE Lorg/pkl/core/messaging/Message$Type;
	public static final field LIST_RESOURCES_REQUEST Lorg/pkl/core/messaging/Message$Type;
	public static final field LIST_RESOURCES_RESPONSE Lorg/pkl/core/messaging/Message$Type;
	public static final field LOG_MESSAGE Lorg/pkl/core/messaging/Message$Type;
	public static final field READ_MODULE_REQUEST Lorg/pkl/core/messaging/Message$Type;
	public static final field READ_MODULE_RESPONSE Lorg/pkl/core/messaging/Message$Type;
	public static final field READ_RESOURCE_REQUEST Lorg/pkl/core/messaging/Message$Type;
	public static final field READ_RESOURCE_RESPONSE Lorg/pkl/core/messaging/Message$Type;
	public static fun fromInt (I)Lorg/pkl/core/messaging/Message$Type;
	public fun getCode ()I
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/messaging/Message$Type;
	public static fun values ()[Lorg/pkl/core/messaging/Message$Type;
}

public abstract interface class org/pkl/core/messaging/MessageDecoder {
	public abstract fun decode ()Lorg/pkl/core/messaging/Message;
}

public abstract interface class org/pkl/core/messaging/MessageEncoder {
	public abstract fun encode (Lorg/pkl/core/messaging/Message;)V
}

public abstract interface class org/pkl/core/messaging/MessageTransport : java/lang/AutoCloseable {
	public abstract fun close ()V
	public abstract fun send (Lorg/pkl/core/messaging/Message$OneWay;)V
	public abstract fun send (Lorg/pkl/core/messaging/Message$Request;Lorg/pkl/core/messaging/MessageTransport$ResponseHandler;)V
	public abstract fun send (Lorg/pkl/core/messaging/Message$Response;)V
	public abstract fun start (Lorg/pkl/core/messaging/MessageTransport$OneWayHandler;Lorg/pkl/core/messaging/MessageTransport$RequestHandler;)V
}

public abstract interface class org/pkl/core/messaging/MessageTransport$OneWayHandler {
	public abstract fun handleOneWay (Lorg/pkl/core/messaging/Message$OneWay;)V
}

public abstract interface class org/pkl/core/messaging/MessageTransport$RequestHandler {
	public abstract fun handleRequest (Lorg/pkl/core/messaging/Message$Request;)V
}

public abstract interface class org/pkl/core/messaging/MessageTransport$ResponseHandler {
	public abstract fun handleResponse (Lorg/pkl/core/messaging/Message$Response;)V
}

public class org/pkl/core/messaging/MessageTransportModuleResolver : org/pkl/core/module/ExternalModuleResolver {
	public fun <init> (Lorg/pkl/core/messaging/MessageTransport;J)V
	public fun hasElement (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Z
	public fun listElements (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Ljava/util/List;
	public fun resolveModule (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Ljava/lang/String;
}

public class org/pkl/core/messaging/MessageTransportResourceResolver : org/pkl/core/resource/ExternalResourceResolver {
	public fun <init> (Lorg/pkl/core/messaging/MessageTransport;J)V
	public fun doListElements (Ljava/net/URI;)Ljava/util/List;
	public fun doRead (Ljava/net/URI;)[B
	public fun hasElement (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Z
	public fun listElements (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Ljava/util/List;
	public fun read (Ljava/net/URI;)Ljava/util/Optional;
}

public final class org/pkl/core/messaging/MessageTransports {
	public static fun direct (Lorg/pkl/core/messaging/MessageTransports$Logger;)Lorg/pkl/core/util/Pair;
	public static fun resolveFuture (Ljava/util/concurrent/Future;)Ljava/lang/Object;
	public static fun stream (Lorg/pkl/core/messaging/MessageDecoder;Lorg/pkl/core/messaging/MessageEncoder;Lorg/pkl/core/messaging/MessageTransports$Logger;)Lorg/pkl/core/messaging/MessageTransport;
}

public abstract interface class org/pkl/core/messaging/MessageTransports$Logger {
	public abstract fun log (Ljava/lang/String;)V
}

public final class org/pkl/core/messaging/Messages {
}

public final class org/pkl/core/messaging/Messages$ListModulesRequest : java/lang/Record, org/pkl/core/messaging/Message$Server$Request {
	public fun <init> (JJLjava/net/URI;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun evaluatorId ()J
	public final fun hashCode ()I
	public fun requestId ()J
	public final fun toString ()Ljava/lang/String;
	public fun type ()Lorg/pkl/core/messaging/Message$Type;
	public fun uri ()Ljava/net/URI;
}

public final class org/pkl/core/messaging/Messages$ListModulesResponse : java/lang/Record, org/pkl/core/messaging/Message$Client$Response {
	public fun <init> (JJLjava/util/List;Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun error ()Ljava/lang/String;
	public fun evaluatorId ()J
	public final fun hashCode ()I
	public fun pathElements ()Ljava/util/List;
	public fun requestId ()J
	public final fun toString ()Ljava/lang/String;
	public fun type ()Lorg/pkl/core/messaging/Message$Type;
}

public final class org/pkl/core/messaging/Messages$ListResourcesRequest : java/lang/Record, org/pkl/core/messaging/Message$Server$Request {
	public fun <init> (JJLjava/net/URI;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun evaluatorId ()J
	public final fun hashCode ()I
	public fun requestId ()J
	public final fun toString ()Ljava/lang/String;
	public fun type ()Lorg/pkl/core/messaging/Message$Type;
	public fun uri ()Ljava/net/URI;
}

public final class org/pkl/core/messaging/Messages$ListResourcesResponse : java/lang/Record, org/pkl/core/messaging/Message$Client$Response {
	public fun <init> (JJLjava/util/List;Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun error ()Ljava/lang/String;
	public fun evaluatorId ()J
	public final fun hashCode ()I
	public fun pathElements ()Ljava/util/List;
	public fun requestId ()J
	public final fun toString ()Ljava/lang/String;
	public fun type ()Lorg/pkl/core/messaging/Message$Type;
}

public final class org/pkl/core/messaging/Messages$ModuleReaderSpec : java/lang/Record, org/pkl/core/module/ExternalModuleResolver$Spec {
	public fun <init> (Ljava/lang/String;ZZZ)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun hasHierarchicalUris ()Z
	public final fun hashCode ()I
	public fun isGlobbable ()Z
	public fun isLocal ()Z
	public fun scheme ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/messaging/Messages$ReadModuleRequest : java/lang/Record, org/pkl/core/messaging/Message$Request {
	public fun <init> (JJLjava/net/URI;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun evaluatorId ()J
	public final fun hashCode ()I
	public fun requestId ()J
	public final fun toString ()Ljava/lang/String;
	public fun type ()Lorg/pkl/core/messaging/Message$Type;
	public fun uri ()Ljava/net/URI;
}

public final class org/pkl/core/messaging/Messages$ReadModuleResponse : java/lang/Record, org/pkl/core/messaging/Message$Client$Response {
	public fun <init> (JJLjava/lang/String;Ljava/lang/String;)V
	public fun contents ()Ljava/lang/String;
	public final fun equals (Ljava/lang/Object;)Z
	public fun error ()Ljava/lang/String;
	public fun evaluatorId ()J
	public final fun hashCode ()I
	public fun requestId ()J
	public final fun toString ()Ljava/lang/String;
	public fun type ()Lorg/pkl/core/messaging/Message$Type;
}

public final class org/pkl/core/messaging/Messages$ReadResourceRequest : java/lang/Record, org/pkl/core/messaging/Message$Request {
	public fun <init> (JJLjava/net/URI;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun evaluatorId ()J
	public final fun hashCode ()I
	public fun requestId ()J
	public final fun toString ()Ljava/lang/String;
	public fun type ()Lorg/pkl/core/messaging/Message$Type;
	public fun uri ()Ljava/net/URI;
}

public final class org/pkl/core/messaging/Messages$ReadResourceResponse : java/lang/Record, org/pkl/core/messaging/Message$Client$Response {
	public fun <init> (JJ[BLjava/lang/String;)V
	public fun contents ()[B
	public fun equals (Ljava/lang/Object;)Z
	public fun error ()Ljava/lang/String;
	public fun evaluatorId ()J
	public fun hashCode ()I
	public fun requestId ()J
	public final fun toString ()Ljava/lang/String;
	public fun type ()Lorg/pkl/core/messaging/Message$Type;
}

public final class org/pkl/core/messaging/Messages$ResourceReaderSpec : java/lang/Record, org/pkl/core/resource/ExternalResourceResolver$Spec {
	public fun <init> (Ljava/lang/String;ZZ)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun hasHierarchicalUris ()Z
	public final fun hashCode ()I
	public fun isGlobbable ()Z
	public fun scheme ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
}

public class org/pkl/core/messaging/ProtocolException : java/lang/Exception {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;)V
}

public abstract interface class org/pkl/core/module/ExternalModuleResolver {
	public abstract fun hasElement (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Z
	public abstract fun listElements (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Ljava/util/List;
	public abstract fun resolveModule (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Ljava/lang/String;
}

public abstract interface class org/pkl/core/module/ExternalModuleResolver$Spec {
	public abstract fun hasHierarchicalUris ()Z
	public abstract fun isGlobbable ()Z
	public abstract fun isLocal ()Z
	public abstract fun scheme ()Ljava/lang/String;
}

public final class org/pkl/core/module/FileResolver {
	public static fun hasElement (Ljava/net/URI;)Z
	public static fun hasElement (Ljava/nio/file/Path;)Z
	public static fun listElements (Ljava/net/URI;)Ljava/util/List;
	public static fun listElements (Ljava/nio/file/Path;)Ljava/util/List;
}

public abstract interface class org/pkl/core/module/ModuleKey : org/pkl/core/runtime/ReaderBase {
	public fun getFileCacheLocation ()Ljava/nio/file/Path;
	public abstract fun getUri ()Ljava/net/URI;
	public fun isCached ()Z
	public fun isLocal ()Z
	public abstract fun resolve (Lorg/pkl/core/SecurityManager;)Lorg/pkl/core/module/ResolvedModuleKey;
	public fun resolveUri (Ljava/net/URI;)Ljava/net/URI;
}

public final class org/pkl/core/module/ModuleKeyFactories {
	public static final field file Lorg/pkl/core/module/ModuleKeyFactory;
	public static final field genericUrl Lorg/pkl/core/module/ModuleKeyFactory;
	public static final field http Lorg/pkl/core/module/ModuleKeyFactory;
	public static final field pkg Lorg/pkl/core/module/ModuleKeyFactory;
	public static final field projectpackage Lorg/pkl/core/module/ModuleKeyFactory;
	public static final field standardLibrary Lorg/pkl/core/module/ModuleKeyFactory;
	public static fun classPath (Ljava/lang/ClassLoader;)Lorg/pkl/core/module/ModuleKeyFactory;
	public static fun closeQuietly (Ljava/lang/Iterable;)V
	public static fun externalProcess (Ljava/lang/String;Lorg/pkl/core/externalreader/ExternalReaderProcess;)Lorg/pkl/core/module/ModuleKeyFactory;
	public static fun externalProcess (Ljava/lang/String;Lorg/pkl/core/externalreader/ExternalReaderProcess;J)Lorg/pkl/core/module/ModuleKeyFactory;
	public static fun fromServiceProviders ()Ljava/util/List;
	public static fun modulePath (Lorg/pkl/core/module/ModulePathResolver;)Lorg/pkl/core/module/ModuleKeyFactory;
}

public abstract interface class org/pkl/core/module/ModuleKeyFactory : java/lang/AutoCloseable {
	public fun close ()V
	public abstract fun create (Ljava/net/URI;)Ljava/util/Optional;
}

public final class org/pkl/core/module/ModuleKeys {
	public static fun cached (Lorg/pkl/core/module/ModuleKey;Ljava/lang/String;)Lorg/pkl/core/module/ModuleKey;
	public static fun classPath (Ljava/net/URI;Ljava/lang/ClassLoader;)Lorg/pkl/core/module/ModuleKey;
	public static fun externalResolver (Ljava/net/URI;Lorg/pkl/core/module/ExternalModuleResolver$Spec;Lorg/pkl/core/module/ExternalModuleResolver;)Lorg/pkl/core/module/ModuleKey;
	public static fun file (Ljava/net/URI;)Lorg/pkl/core/module/ModuleKey;
	public static fun genericUrl (Ljava/net/URI;)Lorg/pkl/core/module/ModuleKey;
	public static fun http (Ljava/net/URI;)Lorg/pkl/core/module/ModuleKey;
	public static fun isBaseModule (Lorg/pkl/core/module/ModuleKey;)Z
	public static fun isStdLibModule (Lorg/pkl/core/module/ModuleKey;)Z
	public static fun modulePath (Ljava/net/URI;Lorg/pkl/core/module/ModulePathResolver;)Lorg/pkl/core/module/ModuleKey;
	public static fun pkg (Ljava/net/URI;)Lorg/pkl/core/module/ModuleKey;
	public static fun projectpackage (Ljava/net/URI;)Lorg/pkl/core/module/ModuleKey;
	public static fun standardLibrary (Ljava/net/URI;)Lorg/pkl/core/module/ModuleKey;
	public static fun synthetic (Ljava/net/URI;Ljava/lang/String;)Lorg/pkl/core/module/ModuleKey;
	public static fun synthetic (Ljava/net/URI;Ljava/net/URI;Ljava/net/URI;Ljava/lang/String;Z)Lorg/pkl/core/module/ModuleKey;
}

public class org/pkl/core/module/ModuleKeys$ExternalResolver : org/pkl/core/module/ModuleKey {
	public fun getUri ()Ljava/net/URI;
	public fun hasElement (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Z
	public fun hasHierarchicalUris ()Z
	public fun isGlobbable ()Z
	public fun isLocal ()Z
	public fun listElements (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Ljava/util/List;
	public fun resolve (Lorg/pkl/core/SecurityManager;)Lorg/pkl/core/module/ResolvedModuleKey;
}

public class org/pkl/core/module/ModuleKeys$ProjectPackage {
	protected fun getDependencies ()Ljava/util/Map;
	public synthetic fun getUri ()Ljava/net/URI;
	public fun hasElement (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Z
	public synthetic fun hasFragmentPaths ()Z
	public synthetic fun hasHierarchicalUris ()Z
	public synthetic fun isGlobbable ()Z
	public synthetic fun isLocal ()Z
	public fun listElements (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Ljava/util/List;
	public fun resolve (Lorg/pkl/core/SecurityManager;)Lorg/pkl/core/module/ResolvedModuleKey;
	public synthetic fun resolveUri (Ljava/net/URI;Ljava/net/URI;)Ljava/net/URI;
}

public final class org/pkl/core/module/ModulePathResolver : java/lang/AutoCloseable {
	public fun <init> (Ljava/lang/Iterable;)V
	public fun close ()V
	public static fun empty ()Lorg/pkl/core/module/ModulePathResolver;
	public fun hasElement (Ljava/net/URI;)Z
	public fun resolve (Ljava/net/URI;)Ljava/nio/file/Path;
}

public class org/pkl/core/module/PathElement {
	public static final field comparator Ljava/util/Comparator;
	public fun <init> (Ljava/lang/String;Z)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun isDirectory ()Z
	public static fun opaque (Ljava/lang/String;)Lorg/pkl/core/module/PathElement;
	public fun toString ()Ljava/lang/String;
	public fun withName (Ljava/lang/String;)Lorg/pkl/core/module/PathElement;
}

public final class org/pkl/core/module/PathElement$TreePathElement : org/pkl/core/module/PathElement {
	public fun <init> (Ljava/lang/String;Z)V
	public fun getChildren ()Lorg/graalvm/collections/EconomicMap;
	public fun getChildrenValues ()Ljava/util/List;
	public fun getElement (Ljava/lang/String;)Lorg/pkl/core/module/PathElement$TreePathElement;
	public fun getElement (Ljava/nio/file/Path;)Lorg/pkl/core/module/PathElement$TreePathElement;
	public fun putIfAbsent (Ljava/lang/String;Lorg/pkl/core/module/PathElement$TreePathElement;)Lorg/pkl/core/module/PathElement$TreePathElement;
}

public final class org/pkl/core/module/ProjectDependenciesManager {
	public static final field PKL_PROJECT_DEPS_FILENAME Ljava/lang/String;
	public static final field PKL_PROJECT_FILENAME Ljava/lang/String;
	public fun <init> (Lorg/pkl/core/project/DeclaredDependencies;Lorg/pkl/core/runtime/ModuleResolver;Lorg/pkl/core/SecurityManager;)V
	public fun getDeclaredDependencies ()Lorg/pkl/core/project/DeclaredDependencies;
	public fun getDependencies ()Ljava/util/Map;
	public fun getLocalPackageDependencies (Lorg/pkl/core/packages/PackageUri;)Ljava/util/Map;
	public fun getProjectBaseUri ()Ljava/net/URI;
	public fun getProjectDepsFileUri ()Ljava/net/URI;
	public fun getProjectFileUri ()Ljava/net/URI;
	public fun getResolvedDependenciesForPackage (Lorg/pkl/core/packages/PackageUri;Lorg/pkl/core/packages/DependencyMetadata;)Ljava/util/Map;
	public fun getResolvedDependency (Lorg/pkl/core/packages/PackageUri;)Lorg/pkl/core/packages/Dependency;
	public fun hasUri (Ljava/net/URI;)Z
	public fun isLocalPackage (Lorg/pkl/core/packages/PackageUri;)Z
}

public abstract interface class org/pkl/core/module/ResolvedModuleKey {
	public abstract fun getOriginal ()Lorg/pkl/core/module/ModuleKey;
	public abstract fun getUri ()Ljava/net/URI;
	public abstract fun loadSource ()Ljava/lang/String;
}

public final class org/pkl/core/module/ResolvedModuleKeys {
	public static fun delegated (Lorg/pkl/core/module/ResolvedModuleKey;Lorg/pkl/core/module/ModuleKey;)Lorg/pkl/core/module/ResolvedModuleKey;
	public static fun file (Lorg/pkl/core/module/ModuleKey;Ljava/net/URI;Ljava/nio/file/Path;)Lorg/pkl/core/module/ResolvedModuleKey;
	public static fun url (Lorg/pkl/core/module/ModuleKey;Ljava/net/URI;Ljava/net/URL;)Lorg/pkl/core/module/ResolvedModuleKey;
	public static fun virtual (Lorg/pkl/core/module/ModuleKey;Ljava/net/URI;Ljava/lang/String;Z)Lorg/pkl/core/module/ResolvedModuleKey;
}

public final class org/pkl/core/packages/Checksums {
	public fun <init> (Ljava/lang/String;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getSha256 ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract class org/pkl/core/packages/Dependency {
	protected final field packageUri Lorg/pkl/core/packages/PackageUri;
	public fun getPackageUri ()Lorg/pkl/core/packages/PackageUri;
	public fun getVersion ()Lorg/pkl/core/Version;
}

public final class org/pkl/core/packages/Dependency$LocalDependency : org/pkl/core/packages/Dependency {
	public fun <init> (Lorg/pkl/core/packages/PackageUri;Ljava/nio/file/Path;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getPath ()Ljava/nio/file/Path;
	public fun hashCode ()I
	public fun resolveAssetUri (Ljava/net/URI;Lorg/pkl/core/packages/PackageAssetUri;)Ljava/net/URI;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/packages/Dependency$RemoteDependency : org/pkl/core/packages/Dependency {
	public fun <init> (Lorg/pkl/core/packages/PackageUri;Lorg/pkl/core/packages/Checksums;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getChecksums ()Lorg/pkl/core/packages/Checksums;
	public fun hashCode ()I
	public fun setChecksums (Lorg/pkl/core/packages/Checksums;)V
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/packages/DependencyMetadata {
	public fun <init> (Ljava/lang/String;Lorg/pkl/core/packages/PackageUri;Lorg/pkl/core/Version;Ljava/net/URI;Lorg/pkl/core/packages/Checksums;Ljava/util/Map;Ljava/lang/String;Ljava/net/URI;Ljava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/net/URI;Ljava/lang/String;Ljava/util/List;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getAnnotations ()Ljava/util/List;
	public fun getAuthors ()Ljava/util/List;
	public fun getDependencies ()Ljava/util/Map;
	public fun getDescription ()Ljava/lang/String;
	public fun getDocumentation ()Ljava/net/URI;
	public fun getIssueTracker ()Ljava/net/URI;
	public fun getLicense ()Ljava/lang/String;
	public fun getLicenseText ()Ljava/lang/String;
	public fun getName ()Ljava/lang/String;
	public fun getPackageZipChecksums ()Lorg/pkl/core/packages/Checksums;
	public fun getPackageZipUrl ()Ljava/net/URI;
	public fun getSourceCode ()Ljava/net/URI;
	public fun getSourceCodeUrlScheme ()Ljava/lang/String;
	public fun getVersion ()Lorg/pkl/core/Version;
	public fun hashCode ()I
	public static fun parse (Ljava/lang/String;)Lorg/pkl/core/packages/DependencyMetadata;
	public static fun parseAuthors (Ljava/lang/Object;)Ljava/util/List;
	public static fun parseChecksums (Ljava/lang/Object;)Lorg/pkl/core/packages/Checksums;
	public fun toString ()Ljava/lang/String;
	public fun writeTo (Ljava/io/OutputStream;)V
}

public final class org/pkl/core/packages/PackageAssetUri {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/net/URI;)V
	public fun <init> (Lorg/pkl/core/packages/PackageUri;Ljava/lang/String;)V
	public static fun create (Ljava/net/URI;)Lorg/pkl/core/packages/PackageAssetUri;
	public fun equals (Ljava/lang/Object;)Z
	public fun getAssetPath ()Ljava/lang/String;
	public fun getPackageUri ()Lorg/pkl/core/packages/PackageUri;
	public fun getUri ()Ljava/net/URI;
	public fun getVersion ()Lorg/pkl/core/Version;
	public fun hashCode ()I
	public fun resolve (Ljava/lang/String;)Lorg/pkl/core/packages/PackageAssetUri;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/packages/PackageLoadError : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;[Ljava/lang/Object;)V
	public fun <init> (Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V
	public fun getArguments ()[Ljava/lang/Object;
	public fun getMessageName ()Ljava/lang/String;
}

public abstract interface class org/pkl/core/packages/PackageResolver : java/io/Closeable {
	public abstract fun downloadPackage (Lorg/pkl/core/packages/PackageUri;Lorg/pkl/core/packages/Checksums;Z)V
	public abstract fun getBytes (Lorg/pkl/core/packages/PackageAssetUri;ZLorg/pkl/core/packages/Checksums;)[B
	public abstract fun getDependencyMetadata (Lorg/pkl/core/packages/PackageUri;Lorg/pkl/core/packages/Checksums;)Lorg/pkl/core/packages/DependencyMetadata;
	public abstract fun getDependencyMetadataAndComputeChecksum (Lorg/pkl/core/packages/PackageUri;)Lorg/pkl/core/util/Pair;
	public static fun getInstance (Lorg/pkl/core/SecurityManager;Lorg/pkl/core/http/HttpClient;Ljava/nio/file/Path;)Lorg/pkl/core/packages/PackageResolver;
	public abstract fun hasElement (Lorg/pkl/core/packages/PackageAssetUri;Lorg/pkl/core/packages/Checksums;)Z
	public abstract fun listElements (Lorg/pkl/core/packages/PackageAssetUri;Lorg/pkl/core/packages/Checksums;)Ljava/util/List;
}

public final class org/pkl/core/packages/PackageUri {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/net/URI;)V
	public static fun create (Ljava/lang/String;)Lorg/pkl/core/packages/PackageUri;
	public fun equals (Ljava/lang/Object;)Z
	public fun getChecksums ()Lorg/pkl/core/packages/Checksums;
	public fun getDisplayName ()Ljava/lang/String;
	public fun getMetadataRequestUri ()Ljava/net/URI;
	public fun getPathWithoutVersion ()Ljava/lang/String;
	public fun getUri ()Ljava/net/URI;
	public fun getVersion ()Lorg/pkl/core/Version;
	public fun hashCode ()I
	public fun toExternalPackageUri ()Lorg/pkl/core/packages/PackageUri;
	public fun toPackageAssetUri (Ljava/lang/String;)Lorg/pkl/core/packages/PackageAssetUri;
	public fun toProjectPackageUri ()Lorg/pkl/core/packages/PackageUri;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/packages/PackageUtils {
	public static fun checkHasNoChecksumComponent (Lorg/pkl/core/packages/PackageUri;)V
	public static fun parsePackageUriWithoutChecksums (Ljava/lang/Object;)Lorg/pkl/core/packages/PackageUri;
}

public abstract class org/pkl/core/parser/LexParseException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;IIII)V
	public fun getColumn ()I
	public fun getLength ()I
	public fun getLine ()I
	public fun getPartialParseResult ()Lorg/antlr/v4/runtime/ParserRuleContext;
	public fun getRelevance ()I
	public fun withPartialParseResult (Lorg/antlr/v4/runtime/ParserRuleContext;)Lorg/pkl/core/parser/LexParseException;
}

public final class org/pkl/core/parser/LexParseException$IncompleteInput : org/pkl/core/parser/LexParseException$ParseError {
	public fun <init> (Ljava/lang/String;III)V
}

public final class org/pkl/core/parser/LexParseException$LexError : org/pkl/core/parser/LexParseException {
	public fun <init> (Ljava/lang/String;III)V
}

public class org/pkl/core/parser/LexParseException$ParseError : org/pkl/core/parser/LexParseException {
	public fun <init> (Ljava/lang/String;IIII)V
}

public final class org/pkl/core/parser/Lexer {
	public static final field KEYWORD_NAMES Ljava/util/Set;
	public static final field KEYWORD_TYPES Ljava/util/Set;
	public fun <init> ()V
	public static fun createLexer (Lorg/antlr/v4/runtime/CharStream;)Lorg/pkl/core/parser/antlr/PklLexer;
	public static fun isKeyword (Lorg/antlr/v4/runtime/Token;)Z
	public static fun isRegularIdentifier (Ljava/lang/String;)Z
	public static fun maybeQuoteIdentifier (Ljava/lang/String;)Ljava/lang/String;
}

public final class org/pkl/core/parser/Parser {
	public fun <init> ()V
	public fun createParser (Lorg/antlr/v4/runtime/TokenStream;Ljava/util/List;)Lorg/pkl/core/parser/antlr/PklParser;
	public fun parseExpressionInput (Ljava/lang/String;)Lorg/pkl/core/parser/antlr/PklParser$ExprInputContext;
	public fun parseExpressionInput (Lorg/antlr/v4/runtime/CharStream;)Lorg/pkl/core/parser/antlr/PklParser$ExprInputContext;
	public fun parseModule (Ljava/lang/String;)Lorg/pkl/core/parser/antlr/PklParser$ModuleContext;
	public fun parseModule (Lorg/antlr/v4/runtime/CharStream;)Lorg/pkl/core/parser/antlr/PklParser$ModuleContext;
	public fun parseProduction (Lorg/antlr/v4/runtime/CharStream;Ljava/util/function/Function;)Lorg/antlr/v4/runtime/ParserRuleContext;
	public fun parseReplInput (Ljava/lang/String;)Lorg/pkl/core/parser/antlr/PklParser$ReplInputContext;
	public fun parseReplInput (Lorg/antlr/v4/runtime/CharStream;)Lorg/pkl/core/parser/antlr/PklParser$ReplInputContext;
}

public class org/pkl/core/parser/antlr/PklLexer : org/antlr/v4/runtime/Lexer {
	public static final field ABSTRACT I
	public static final field AMENDS I
	public static final field AND I
	public static final field ARROW I
	public static final field AS I
	public static final field ASSIGN I
	public static final field AT I
	public static final field BlockComment I
	public static final field CASE I
	public static final field CLASS I
	public static final field COALESCE I
	public static final field COLON I
	public static final field COMMA I
	public static final field CONST I
	public static final field CommentsChannel I
	public static final field DELETE I
	public static final field DIV I
	public static final field DOT I
	public static final field DocComment I
	public static final field ELSE I
	public static final field EQUAL I
	public static final field EXTENDS I
	public static final field EXTERNAL I
	public static final field FALSE I
	public static final field FIXED I
	public static final field FOR I
	public static final field FUNCTION I
	public static final field FloatLiteral I
	public static final field GT I
	public static final field GTE I
	public static final field HIDDEN_ I
	public static final field IF I
	public static final field IMPORT I
	public static final field IMPORT_GLOB I
	public static final field IN I
	public static final field INT_DIV I
	public static final field IS I
	public static final field Identifier I
	public static final field IntLiteral I
	public static final field LBRACE I
	public static final field LBRACK I
	public static final field LET I
	public static final field LOCAL I
	public static final field LPAREN I
	public static final field LPRED I
	public static final field LT I
	public static final field LTE I
	public static final field LineComment I
	public static final field MINUS I
	public static final field MLCharacterEscape I
	public static final field MLCharacters I
	public static final field MLEndQuote I
	public static final field MLInterpolation I
	public static final field MLNewline I
	public static final field MLQuote I
	public static final field MLString I
	public static final field MLUnicodeEscape I
	public static final field MOD I
	public static final field MODULE I
	public static final field NEW I
	public static final field NON_NULL I
	public static final field NOT I
	public static final field NOTHING I
	public static final field NOT_EQUAL I
	public static final field NULL I
	public static final field NewlineSemicolon I
	public static final field NewlineSemicolonChannel I
	public static final field OPEN I
	public static final field OR I
	public static final field OUT I
	public static final field OUTER I
	public static final field OVERRIDE I
	public static final field PIPE I
	public static final field PLUS I
	public static final field POW I
	public static final field PROTECTED I
	public static final field QDOT I
	public static final field QSPREAD I
	public static final field QUESTION I
	public static final field RBRACE I
	public static final field RBRACK I
	public static final field READ I
	public static final field READ_GLOB I
	public static final field READ_OR_NULL I
	public static final field RECORD I
	public static final field RPAREN I
	public static final field SLCharacterEscape I
	public static final field SLCharacters I
	public static final field SLEndQuote I
	public static final field SLInterpolation I
	public static final field SLQuote I
	public static final field SLString I
	public static final field SLUnicodeEscape I
	public static final field SPREAD I
	public static final field STAR I
	public static final field SUPER I
	public static final field SWITCH I
	public static final field ShebangChannel I
	public static final field ShebangComment I
	public static final field THIS I
	public static final field THROW I
	public static final field TRACE I
	public static final field TRUE I
	public static final field TYPE_ALIAS I
	public static final field UNDERSCORE I
	public static final field UNION I
	public static final field UNKNOWN I
	public static final field VARARG I
	public static final field VOCABULARY Lorg/antlr/v4/runtime/Vocabulary;
	public static final field WHEN I
	public static final field Whitespace I
	public static final field WhitespaceChannel I
	public static final field _ATN Lorg/antlr/v4/runtime/atn/ATN;
	public static final field _serializedATN Ljava/lang/String;
	public static field channelNames [Ljava/lang/String;
	public static field modeNames [Ljava/lang/String;
	public static final field ruleNames [Ljava/lang/String;
	public static final field tokenNames [Ljava/lang/String;
	public fun <init> (Lorg/antlr/v4/runtime/CharStream;)V
	public fun action (Lorg/antlr/v4/runtime/RuleContext;II)V
	public fun getChannelNames ()[Ljava/lang/String;
	public fun getGrammarFileName ()Ljava/lang/String;
	public fun getModeNames ()[Ljava/lang/String;
	public fun getRuleNames ()[Ljava/lang/String;
	public fun getSerializedATN ()Ljava/lang/String;
	public fun getTokenNames ()[Ljava/lang/String;
	public fun getVocabulary ()Lorg/antlr/v4/runtime/Vocabulary;
	public fun sempred (Lorg/antlr/v4/runtime/RuleContext;II)Z
}

public class org/pkl/core/parser/antlr/PklParser : org/antlr/v4/runtime/Parser {
	public static final field ABSTRACT I
	public static final field AMENDS I
	public static final field AND I
	public static final field ARROW I
	public static final field AS I
	public static final field ASSIGN I
	public static final field AT I
	public static final field BlockComment I
	public static final field CASE I
	public static final field CLASS I
	public static final field COALESCE I
	public static final field COLON I
	public static final field COMMA I
	public static final field CONST I
	public static final field DELETE I
	public static final field DIV I
	public static final field DOT I
	public static final field DocComment I
	public static final field ELSE I
	public static final field EQUAL I
	public static final field EXTENDS I
	public static final field EXTERNAL I
	public static final field FALSE I
	public static final field FIXED I
	public static final field FOR I
	public static final field FUNCTION I
	public static final field FloatLiteral I
	public static final field GT I
	public static final field GTE I
	public static final field HIDDEN_ I
	public static final field IF I
	public static final field IMPORT I
	public static final field IMPORT_GLOB I
	public static final field IN I
	public static final field INT_DIV I
	public static final field IS I
	public static final field Identifier I
	public static final field IntLiteral I
	public static final field LBRACE I
	public static final field LBRACK I
	public static final field LET I
	public static final field LOCAL I
	public static final field LPAREN I
	public static final field LPRED I
	public static final field LT I
	public static final field LTE I
	public static final field LineComment I
	public static final field MINUS I
	public static final field MLCharacterEscape I
	public static final field MLCharacters I
	public static final field MLEndQuote I
	public static final field MLInterpolation I
	public static final field MLNewline I
	public static final field MLQuote I
	public static final field MLUnicodeEscape I
	public static final field MOD I
	public static final field MODULE I
	public static final field NEW I
	public static final field NON_NULL I
	public static final field NOT I
	public static final field NOTHING I
	public static final field NOT_EQUAL I
	public static final field NULL I
	public static final field NewlineSemicolon I
	public static final field OPEN I
	public static final field OR I
	public static final field OUT I
	public static final field OUTER I
	public static final field OVERRIDE I
	public static final field PIPE I
	public static final field PLUS I
	public static final field POW I
	public static final field PROTECTED I
	public static final field QDOT I
	public static final field QSPREAD I
	public static final field QUESTION I
	public static final field RBRACE I
	public static final field RBRACK I
	public static final field READ I
	public static final field READ_GLOB I
	public static final field READ_OR_NULL I
	public static final field RECORD I
	public static final field RPAREN I
	public static final field RULE_annotation I
	public static final field RULE_argumentList I
	public static final field RULE_classBody I
	public static final field RULE_classHeader I
	public static final field RULE_classMethod I
	public static final field RULE_classProperty I
	public static final field RULE_clazz I
	public static final field RULE_expr I
	public static final field RULE_exprInput I
	public static final field RULE_importClause I
	public static final field RULE_methodHeader I
	public static final field RULE_modifier I
	public static final field RULE_module I
	public static final field RULE_moduleDecl I
	public static final field RULE_moduleExtendsOrAmendsClause I
	public static final field RULE_moduleHeader I
	public static final field RULE_multiLineStringPart I
	public static final field RULE_objectBody I
	public static final field RULE_objectMember I
	public static final field RULE_parameter I
	public static final field RULE_parameterList I
	public static final field RULE_qualifiedIdentifier I
	public static final field RULE_replInput I
	public static final field RULE_reservedKeyword I
	public static final field RULE_singleLineStringPart I
	public static final field RULE_stringConstant I
	public static final field RULE_type I
	public static final field RULE_typeAlias I
	public static final field RULE_typeAliasHeader I
	public static final field RULE_typeAnnotation I
	public static final field RULE_typeArgumentList I
	public static final field RULE_typeParameter I
	public static final field RULE_typeParameterList I
	public static final field RULE_typedIdentifier I
	public static final field SLCharacterEscape I
	public static final field SLCharacters I
	public static final field SLEndQuote I
	public static final field SLInterpolation I
	public static final field SLQuote I
	public static final field SLUnicodeEscape I
	public static final field SPREAD I
	public static final field STAR I
	public static final field SUPER I
	public static final field SWITCH I
	public static final field ShebangComment I
	public static final field THIS I
	public static final field THROW I
	public static final field TRACE I
	public static final field TRUE I
	public static final field TYPE_ALIAS I
	public static final field UNDERSCORE I
	public static final field UNION I
	public static final field UNKNOWN I
	public static final field VARARG I
	public static final field VOCABULARY Lorg/antlr/v4/runtime/Vocabulary;
	public static final field WHEN I
	public static final field Whitespace I
	public static final field _ATN Lorg/antlr/v4/runtime/atn/ATN;
	public static final field _serializedATN Ljava/lang/String;
	public static final field ruleNames [Ljava/lang/String;
	public static final field tokenNames [Ljava/lang/String;
	public fun <init> (Lorg/antlr/v4/runtime/TokenStream;)V
	public final fun annotation ()Lorg/pkl/core/parser/antlr/PklParser$AnnotationContext;
	public final fun argumentList ()Lorg/pkl/core/parser/antlr/PklParser$ArgumentListContext;
	public final fun classBody ()Lorg/pkl/core/parser/antlr/PklParser$ClassBodyContext;
	public final fun classHeader ()Lorg/pkl/core/parser/antlr/PklParser$ClassHeaderContext;
	public final fun classMethod ()Lorg/pkl/core/parser/antlr/PklParser$ClassMethodContext;
	public final fun classProperty ()Lorg/pkl/core/parser/antlr/PklParser$ClassPropertyContext;
	public final fun clazz ()Lorg/pkl/core/parser/antlr/PklParser$ClazzContext;
	protected fun createFailedPredicateException (Ljava/lang/String;Ljava/lang/String;)Lorg/antlr/v4/runtime/FailedPredicateException;
	public final fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public final fun exprInput ()Lorg/pkl/core/parser/antlr/PklParser$ExprInputContext;
	public fun getGrammarFileName ()Ljava/lang/String;
	public fun getRuleNames ()[Ljava/lang/String;
	public fun getSerializedATN ()Ljava/lang/String;
	public fun getTokenNames ()[Ljava/lang/String;
	public fun getVocabulary ()Lorg/antlr/v4/runtime/Vocabulary;
	public final fun importClause ()Lorg/pkl/core/parser/antlr/PklParser$ImportClauseContext;
	public final fun methodHeader ()Lorg/pkl/core/parser/antlr/PklParser$MethodHeaderContext;
	public final fun modifier ()Lorg/pkl/core/parser/antlr/PklParser$ModifierContext;
	public final fun module ()Lorg/pkl/core/parser/antlr/PklParser$ModuleContext;
	public final fun moduleDecl ()Lorg/pkl/core/parser/antlr/PklParser$ModuleDeclContext;
	public final fun moduleExtendsOrAmendsClause ()Lorg/pkl/core/parser/antlr/PklParser$ModuleExtendsOrAmendsClauseContext;
	public final fun moduleHeader ()Lorg/pkl/core/parser/antlr/PklParser$ModuleHeaderContext;
	public final fun multiLineStringPart ()Lorg/pkl/core/parser/antlr/PklParser$MultiLineStringPartContext;
	public final fun objectBody ()Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
	public final fun objectMember ()Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;
	public final fun parameter ()Lorg/pkl/core/parser/antlr/PklParser$ParameterContext;
	public final fun parameterList ()Lorg/pkl/core/parser/antlr/PklParser$ParameterListContext;
	public final fun qualifiedIdentifier ()Lorg/pkl/core/parser/antlr/PklParser$QualifiedIdentifierContext;
	public final fun replInput ()Lorg/pkl/core/parser/antlr/PklParser$ReplInputContext;
	public final fun reservedKeyword ()Lorg/pkl/core/parser/antlr/PklParser$ReservedKeywordContext;
	public fun sempred (Lorg/antlr/v4/runtime/RuleContext;II)Z
	public final fun singleLineStringPart ()Lorg/pkl/core/parser/antlr/PklParser$SingleLineStringPartContext;
	public final fun stringConstant ()Lorg/pkl/core/parser/antlr/PklParser$StringConstantContext;
	public final fun type ()Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
	public final fun typeAlias ()Lorg/pkl/core/parser/antlr/PklParser$TypeAliasContext;
	public final fun typeAliasHeader ()Lorg/pkl/core/parser/antlr/PklParser$TypeAliasHeaderContext;
	public final fun typeAnnotation ()Lorg/pkl/core/parser/antlr/PklParser$TypeAnnotationContext;
	public final fun typeArgumentList ()Lorg/pkl/core/parser/antlr/PklParser$TypeArgumentListContext;
	public final fun typeParameter ()Lorg/pkl/core/parser/antlr/PklParser$TypeParameterContext;
	public final fun typeParameterList ()Lorg/pkl/core/parser/antlr/PklParser$TypeParameterListContext;
	public final fun typedIdentifier ()Lorg/pkl/core/parser/antlr/PklParser$TypedIdentifierContext;
}

public class org/pkl/core/parser/antlr/PklParser$AdditiveExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun MINUS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun PLUS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$AmendExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun objectBody ()Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
}

public class org/pkl/core/parser/antlr/PklParser$AnnotationContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun AT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun objectBody ()Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
	public fun type ()Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
}

public class org/pkl/core/parser/antlr/PklParser$ArgumentListContext : org/antlr/v4/runtime/ParserRuleContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public field errs Ljava/util/List;
	public field es Ljava/util/List;
	public field expr Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field s53 Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun COMMA ()Ljava/util/List;
	public fun COMMA (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$ClassBodyContext : org/antlr/v4/runtime/ParserRuleContext {
	public field classMethod Lorg/pkl/core/parser/antlr/PklParser$ClassMethodContext;
	public field classProperty Lorg/pkl/core/parser/antlr/PklParser$ClassPropertyContext;
	public field err Lorg/antlr/v4/runtime/Token;
	public field ms Ljava/util/List;
	public field ps Ljava/util/List;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun LBRACE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RBRACE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun classMethod ()Ljava/util/List;
	public fun classMethod (I)Lorg/pkl/core/parser/antlr/PklParser$ClassMethodContext;
	public fun classProperty ()Ljava/util/List;
	public fun classProperty (I)Lorg/pkl/core/parser/antlr/PklParser$ClassPropertyContext;
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$ClassHeaderContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun CLASS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun EXTENDS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun Identifier ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun modifier ()Ljava/util/List;
	public fun modifier (I)Lorg/pkl/core/parser/antlr/PklParser$ModifierContext;
	public fun type ()Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
	public fun typeParameterList ()Lorg/pkl/core/parser/antlr/PklParser$TypeParameterListContext;
}

public class org/pkl/core/parser/antlr/PklParser$ClassMethodContext : org/antlr/v4/runtime/ParserRuleContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun ASSIGN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun DocComment ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun annotation ()Ljava/util/List;
	public fun annotation (I)Lorg/pkl/core/parser/antlr/PklParser$AnnotationContext;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun getRuleIndex ()I
	public fun methodHeader ()Lorg/pkl/core/parser/antlr/PklParser$MethodHeaderContext;
}

public class org/pkl/core/parser/antlr/PklParser$ClassPropertyContext : org/antlr/v4/runtime/ParserRuleContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun ASSIGN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun DocComment ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun Identifier ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun annotation ()Ljava/util/List;
	public fun annotation (I)Lorg/pkl/core/parser/antlr/PklParser$AnnotationContext;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun getRuleIndex ()I
	public fun modifier ()Ljava/util/List;
	public fun modifier (I)Lorg/pkl/core/parser/antlr/PklParser$ModifierContext;
	public fun objectBody ()Ljava/util/List;
	public fun objectBody (I)Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
	public fun typeAnnotation ()Lorg/pkl/core/parser/antlr/PklParser$TypeAnnotationContext;
}

public class org/pkl/core/parser/antlr/PklParser$ClazzContext : org/antlr/v4/runtime/ParserRuleContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun DocComment ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun annotation ()Ljava/util/List;
	public fun annotation (I)Lorg/pkl/core/parser/antlr/PklParser$AnnotationContext;
	public fun classBody ()Lorg/pkl/core/parser/antlr/PklParser$ClassBodyContext;
	public fun classHeader ()Lorg/pkl/core/parser/antlr/PklParser$ClassHeaderContext;
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$ComparisonExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun GT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun GTE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LTE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$ConstrainedTypeContext : org/pkl/core/parser/antlr/PklParser$TypeContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public field errs Ljava/util/List;
	public field es Ljava/util/List;
	public field expr Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field s53 Lorg/antlr/v4/runtime/Token;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun COMMA ()Ljava/util/List;
	public fun COMMA (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun type ()Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
}

public class org/pkl/core/parser/antlr/PklParser$DeclaredTypeContext : org/pkl/core/parser/antlr/PklParser$TypeContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun qualifiedIdentifier ()Lorg/pkl/core/parser/antlr/PklParser$QualifiedIdentifierContext;
	public fun typeArgumentList ()Lorg/pkl/core/parser/antlr/PklParser$TypeArgumentListContext;
}

public class org/pkl/core/parser/antlr/PklParser$DefaultUnionTypeContext : org/pkl/core/parser/antlr/PklParser$TypeContext {
	public field u Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun STAR ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun type ()Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
}

public class org/pkl/core/parser/antlr/PklParser$EqualityExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun EQUAL ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun NOT_EQUAL ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$ExponentiationExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun POW ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$ExprContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> ()V
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun copyFrom (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$ExprInputContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun EOF ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$FalseLiteralContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun FALSE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
}

public class org/pkl/core/parser/antlr/PklParser$FloatLiteralContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun FloatLiteral ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
}

public class org/pkl/core/parser/antlr/PklParser$ForGeneratorContext : org/pkl/core/parser/antlr/PklParser$ObjectMemberContext {
	public field e Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field err Lorg/antlr/v4/runtime/Token;
	public field t1 Lorg/pkl/core/parser/antlr/PklParser$ParameterContext;
	public field t2 Lorg/pkl/core/parser/antlr/PklParser$ParameterContext;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;)V
	public fun COMMA ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun FOR ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun IN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun objectBody ()Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
	public fun parameter ()Ljava/util/List;
	public fun parameter (I)Lorg/pkl/core/parser/antlr/PklParser$ParameterContext;
}

public class org/pkl/core/parser/antlr/PklParser$FunctionLiteralContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun ARROW ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun parameterList ()Lorg/pkl/core/parser/antlr/PklParser$ParameterListContext;
}

public class org/pkl/core/parser/antlr/PklParser$FunctionTypeContext : org/pkl/core/parser/antlr/PklParser$TypeContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public field errs Ljava/util/List;
	public field ps Ljava/util/List;
	public field r Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
	public field s53 Lorg/antlr/v4/runtime/Token;
	public field t Lorg/antlr/v4/runtime/Token;
	public field type Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun ARROW ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun COMMA ()Ljava/util/List;
	public fun COMMA (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun type ()Ljava/util/List;
	public fun type (I)Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
}

public class org/pkl/core/parser/antlr/PklParser$IfExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field c Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field err Lorg/antlr/v4/runtime/Token;
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun ELSE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun IF ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$ImportClauseContext : org/antlr/v4/runtime/ParserRuleContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun AS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun IMPORT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun IMPORT_GLOB ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun Identifier ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun stringConstant ()Lorg/pkl/core/parser/antlr/PklParser$StringConstantContext;
}

public class org/pkl/core/parser/antlr/PklParser$ImportExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun IMPORT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun IMPORT_GLOB ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun stringConstant ()Lorg/pkl/core/parser/antlr/PklParser$StringConstantContext;
}

public class org/pkl/core/parser/antlr/PklParser$IntLiteralContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun IntLiteral ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
}

public class org/pkl/core/parser/antlr/PklParser$LetExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun ASSIGN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LET ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun parameter ()Lorg/pkl/core/parser/antlr/PklParser$ParameterContext;
}

public class org/pkl/core/parser/antlr/PklParser$LogicalAndExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun AND ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$LogicalNotExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun NOT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$LogicalOrExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun OR ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$MemberPredicateContext : org/pkl/core/parser/antlr/PklParser$ObjectMemberContext {
	public field err1 Lorg/antlr/v4/runtime/Token;
	public field err2 Lorg/antlr/v4/runtime/Token;
	public field k Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public field v Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;)V
	public fun ASSIGN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LPRED ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RBRACK ()Ljava/util/List;
	public fun RBRACK (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun objectBody ()Ljava/util/List;
	public fun objectBody (I)Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
}

public class org/pkl/core/parser/antlr/PklParser$MethodHeaderContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun FUNCTION ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun Identifier ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun modifier ()Ljava/util/List;
	public fun modifier (I)Lorg/pkl/core/parser/antlr/PklParser$ModifierContext;
	public fun parameterList ()Lorg/pkl/core/parser/antlr/PklParser$ParameterListContext;
	public fun typeAnnotation ()Lorg/pkl/core/parser/antlr/PklParser$TypeAnnotationContext;
	public fun typeParameterList ()Lorg/pkl/core/parser/antlr/PklParser$TypeParameterListContext;
}

public class org/pkl/core/parser/antlr/PklParser$ModifierContext : org/antlr/v4/runtime/ParserRuleContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun ABSTRACT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun CONST ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun EXTERNAL ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun FIXED ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun HIDDEN_ ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LOCAL ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun OPEN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$ModuleContext : org/antlr/v4/runtime/ParserRuleContext {
	public field classMethod Lorg/pkl/core/parser/antlr/PklParser$ClassMethodContext;
	public field classProperty Lorg/pkl/core/parser/antlr/PklParser$ClassPropertyContext;
	public field clazz Lorg/pkl/core/parser/antlr/PklParser$ClazzContext;
	public field cs Ljava/util/List;
	public field importClause Lorg/pkl/core/parser/antlr/PklParser$ImportClauseContext;
	public field is Ljava/util/List;
	public field ms Ljava/util/List;
	public field ps Ljava/util/List;
	public field ts Ljava/util/List;
	public field typeAlias Lorg/pkl/core/parser/antlr/PklParser$TypeAliasContext;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun EOF ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun classMethod ()Ljava/util/List;
	public fun classMethod (I)Lorg/pkl/core/parser/antlr/PklParser$ClassMethodContext;
	public fun classProperty ()Ljava/util/List;
	public fun classProperty (I)Lorg/pkl/core/parser/antlr/PklParser$ClassPropertyContext;
	public fun clazz ()Ljava/util/List;
	public fun clazz (I)Lorg/pkl/core/parser/antlr/PklParser$ClazzContext;
	public fun getRuleIndex ()I
	public fun importClause ()Ljava/util/List;
	public fun importClause (I)Lorg/pkl/core/parser/antlr/PklParser$ImportClauseContext;
	public fun moduleDecl ()Lorg/pkl/core/parser/antlr/PklParser$ModuleDeclContext;
	public fun typeAlias ()Ljava/util/List;
	public fun typeAlias (I)Lorg/pkl/core/parser/antlr/PklParser$TypeAliasContext;
}

public class org/pkl/core/parser/antlr/PklParser$ModuleDeclContext : org/antlr/v4/runtime/ParserRuleContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun DocComment ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun annotation ()Ljava/util/List;
	public fun annotation (I)Lorg/pkl/core/parser/antlr/PklParser$AnnotationContext;
	public fun getRuleIndex ()I
	public fun moduleHeader ()Lorg/pkl/core/parser/antlr/PklParser$ModuleHeaderContext;
}

public class org/pkl/core/parser/antlr/PklParser$ModuleExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun MODULE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
}

public class org/pkl/core/parser/antlr/PklParser$ModuleExtendsOrAmendsClauseContext : org/antlr/v4/runtime/ParserRuleContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun AMENDS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun EXTENDS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun stringConstant ()Lorg/pkl/core/parser/antlr/PklParser$StringConstantContext;
}

public class org/pkl/core/parser/antlr/PklParser$ModuleHeaderContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun MODULE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun modifier ()Ljava/util/List;
	public fun modifier (I)Lorg/pkl/core/parser/antlr/PklParser$ModifierContext;
	public fun moduleExtendsOrAmendsClause ()Lorg/pkl/core/parser/antlr/PklParser$ModuleExtendsOrAmendsClauseContext;
	public fun qualifiedIdentifier ()Lorg/pkl/core/parser/antlr/PklParser$QualifiedIdentifierContext;
}

public class org/pkl/core/parser/antlr/PklParser$ModuleTypeContext : org/pkl/core/parser/antlr/PklParser$TypeContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun MODULE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
}

public class org/pkl/core/parser/antlr/PklParser$MultiLineStringLiteralContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public field t2 Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun MLEndQuote ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun MLQuote ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun multiLineStringPart ()Ljava/util/List;
	public fun multiLineStringPart (I)Lorg/pkl/core/parser/antlr/PklParser$MultiLineStringPartContext;
}

public class org/pkl/core/parser/antlr/PklParser$MultiLineStringPartContext : org/antlr/v4/runtime/ParserRuleContext {
	public field MLCharacterEscape Lorg/antlr/v4/runtime/Token;
	public field MLCharacters Lorg/antlr/v4/runtime/Token;
	public field MLNewline Lorg/antlr/v4/runtime/Token;
	public field MLUnicodeEscape Lorg/antlr/v4/runtime/Token;
	public field e Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field ts Ljava/util/List;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun MLCharacterEscape ()Ljava/util/List;
	public fun MLCharacterEscape (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun MLCharacters ()Ljava/util/List;
	public fun MLCharacters (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun MLInterpolation ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun MLNewline ()Ljava/util/List;
	public fun MLNewline (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun MLUnicodeEscape ()Ljava/util/List;
	public fun MLUnicodeEscape (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$MultiplicativeExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun DIV ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun INT_DIV ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun MOD ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun STAR ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$NewExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun NEW ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun objectBody ()Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
	public fun type ()Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
}

public class org/pkl/core/parser/antlr/PklParser$NonNullExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun NON_NULL ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$NothingTypeContext : org/pkl/core/parser/antlr/PklParser$TypeContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun NOTHING ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
}

public class org/pkl/core/parser/antlr/PklParser$NullCoalesceExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun COALESCE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$NullLiteralContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun NULL ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
}

public class org/pkl/core/parser/antlr/PklParser$NullableTypeContext : org/pkl/core/parser/antlr/PklParser$TypeContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun QUESTION ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun type ()Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
}

public class org/pkl/core/parser/antlr/PklParser$ObjectBodyContext : org/antlr/v4/runtime/ParserRuleContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public field errs Ljava/util/List;
	public field parameter Lorg/pkl/core/parser/antlr/PklParser$ParameterContext;
	public field ps Ljava/util/List;
	public field s53 Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun ARROW ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun COMMA ()Ljava/util/List;
	public fun COMMA (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LBRACE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RBRACE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun objectMember ()Ljava/util/List;
	public fun objectMember (I)Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;
	public fun parameter ()Ljava/util/List;
	public fun parameter (I)Lorg/pkl/core/parser/antlr/PklParser$ParameterContext;
}

public class org/pkl/core/parser/antlr/PklParser$ObjectElementContext : org/pkl/core/parser/antlr/PklParser$ObjectMemberContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;)V
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$ObjectEntryContext : org/pkl/core/parser/antlr/PklParser$ObjectMemberContext {
	public field err1 Lorg/antlr/v4/runtime/Token;
	public field err2 Lorg/antlr/v4/runtime/Token;
	public field k Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public field v Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;)V
	public fun ASSIGN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LBRACK ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RBRACK ()Ljava/util/List;
	public fun RBRACK (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun objectBody ()Ljava/util/List;
	public fun objectBody (I)Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
}

public class org/pkl/core/parser/antlr/PklParser$ObjectMemberContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> ()V
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun copyFrom (Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;)V
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$ObjectMethodContext : org/pkl/core/parser/antlr/PklParser$ObjectMemberContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;)V
	public fun ASSIGN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun methodHeader ()Lorg/pkl/core/parser/antlr/PklParser$MethodHeaderContext;
}

public class org/pkl/core/parser/antlr/PklParser$ObjectPropertyContext : org/pkl/core/parser/antlr/PklParser$ObjectMemberContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;)V
	public fun ASSIGN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun Identifier ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun modifier ()Ljava/util/List;
	public fun modifier (I)Lorg/pkl/core/parser/antlr/PklParser$ModifierContext;
	public fun objectBody ()Ljava/util/List;
	public fun objectBody (I)Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
	public fun typeAnnotation ()Lorg/pkl/core/parser/antlr/PklParser$TypeAnnotationContext;
}

public class org/pkl/core/parser/antlr/PklParser$ObjectSpreadContext : org/pkl/core/parser/antlr/PklParser$ObjectMemberContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;)V
	public fun QSPREAD ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SPREAD ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$OuterExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun OUTER ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
}

public class org/pkl/core/parser/antlr/PklParser$ParameterContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun UNDERSCORE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun typedIdentifier ()Lorg/pkl/core/parser/antlr/PklParser$TypedIdentifierContext;
}

public class org/pkl/core/parser/antlr/PklParser$ParameterListContext : org/antlr/v4/runtime/ParserRuleContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public field errs Ljava/util/List;
	public field parameter Lorg/pkl/core/parser/antlr/PklParser$ParameterContext;
	public field s53 Lorg/antlr/v4/runtime/Token;
	public field ts Ljava/util/List;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun COMMA ()Ljava/util/List;
	public fun COMMA (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun parameter ()Ljava/util/List;
	public fun parameter (I)Lorg/pkl/core/parser/antlr/PklParser$ParameterContext;
}

public class org/pkl/core/parser/antlr/PklParser$ParenthesizedExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$ParenthesizedTypeContext : org/pkl/core/parser/antlr/PklParser$TypeContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun type ()Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
}

public class org/pkl/core/parser/antlr/PklParser$PipeExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun PIPE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$QualifiedAccessExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun DOT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun Identifier ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun QDOT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun argumentList ()Lorg/pkl/core/parser/antlr/PklParser$ArgumentListContext;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$QualifiedIdentifierContext : org/antlr/v4/runtime/ParserRuleContext {
	public field Identifier Lorg/antlr/v4/runtime/Token;
	public field ts Ljava/util/List;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun DOT ()Ljava/util/List;
	public fun DOT (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun Identifier ()Ljava/util/List;
	public fun Identifier (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$ReadExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun READ ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun READ_GLOB ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun READ_OR_NULL ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$ReplInputContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun EOF ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun classMethod ()Ljava/util/List;
	public fun classMethod (I)Lorg/pkl/core/parser/antlr/PklParser$ClassMethodContext;
	public fun classProperty ()Ljava/util/List;
	public fun classProperty (I)Lorg/pkl/core/parser/antlr/PklParser$ClassPropertyContext;
	public fun clazz ()Ljava/util/List;
	public fun clazz (I)Lorg/pkl/core/parser/antlr/PklParser$ClazzContext;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun getRuleIndex ()I
	public fun importClause ()Ljava/util/List;
	public fun importClause (I)Lorg/pkl/core/parser/antlr/PklParser$ImportClauseContext;
	public fun moduleDecl ()Ljava/util/List;
	public fun moduleDecl (I)Lorg/pkl/core/parser/antlr/PklParser$ModuleDeclContext;
	public fun typeAlias ()Ljava/util/List;
	public fun typeAlias (I)Lorg/pkl/core/parser/antlr/PklParser$TypeAliasContext;
}

public class org/pkl/core/parser/antlr/PklParser$ReservedKeywordContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun CASE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun DELETE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun OVERRIDE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun PROTECTED ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RECORD ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SWITCH ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun VARARG ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$SingleLineStringLiteralContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public field t2 Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun SLEndQuote ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SLQuote ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun singleLineStringPart ()Ljava/util/List;
	public fun singleLineStringPart (I)Lorg/pkl/core/parser/antlr/PklParser$SingleLineStringPartContext;
}

public class org/pkl/core/parser/antlr/PklParser$SingleLineStringPartContext : org/antlr/v4/runtime/ParserRuleContext {
	public field SLCharacterEscape Lorg/antlr/v4/runtime/Token;
	public field SLCharacters Lorg/antlr/v4/runtime/Token;
	public field SLUnicodeEscape Lorg/antlr/v4/runtime/Token;
	public field e Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field ts Ljava/util/List;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SLCharacterEscape ()Ljava/util/List;
	public fun SLCharacterEscape (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SLCharacters ()Ljava/util/List;
	public fun SLCharacters (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SLInterpolation ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SLUnicodeEscape ()Ljava/util/List;
	public fun SLUnicodeEscape (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$StringConstantContext : org/antlr/v4/runtime/ParserRuleContext {
	public field SLCharacterEscape Lorg/antlr/v4/runtime/Token;
	public field SLCharacters Lorg/antlr/v4/runtime/Token;
	public field SLUnicodeEscape Lorg/antlr/v4/runtime/Token;
	public field t Lorg/antlr/v4/runtime/Token;
	public field t2 Lorg/antlr/v4/runtime/Token;
	public field ts Ljava/util/List;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun SLCharacterEscape ()Ljava/util/List;
	public fun SLCharacterEscape (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SLCharacters ()Ljava/util/List;
	public fun SLCharacters (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SLEndQuote ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SLQuote ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SLUnicodeEscape ()Ljava/util/List;
	public fun SLUnicodeEscape (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$StringLiteralTypeContext : org/pkl/core/parser/antlr/PklParser$TypeContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun stringConstant ()Lorg/pkl/core/parser/antlr/PklParser$StringConstantContext;
}

public class org/pkl/core/parser/antlr/PklParser$SubscriptExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun LBRACK ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RBRACK ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Ljava/util/List;
	public fun expr (I)Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$SuperAccessExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun DOT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun Identifier ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SUPER ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun argumentList ()Lorg/pkl/core/parser/antlr/PklParser$ArgumentListContext;
}

public class org/pkl/core/parser/antlr/PklParser$SuperSubscriptExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field e Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field err Lorg/antlr/v4/runtime/Token;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun LBRACK ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RBRACK ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun SUPER ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$ThisExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun THIS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
}

public class org/pkl/core/parser/antlr/PklParser$ThrowExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun THROW ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$TraceExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun TRACE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$TrueLiteralContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun TRUE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
}

public class org/pkl/core/parser/antlr/PklParser$TypeAliasContext : org/antlr/v4/runtime/ParserRuleContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun ASSIGN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun DocComment ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun annotation ()Ljava/util/List;
	public fun annotation (I)Lorg/pkl/core/parser/antlr/PklParser$AnnotationContext;
	public fun getRuleIndex ()I
	public fun type ()Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
	public fun typeAliasHeader ()Lorg/pkl/core/parser/antlr/PklParser$TypeAliasHeaderContext;
}

public class org/pkl/core/parser/antlr/PklParser$TypeAliasHeaderContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun Identifier ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun TYPE_ALIAS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun modifier ()Ljava/util/List;
	public fun modifier (I)Lorg/pkl/core/parser/antlr/PklParser$ModifierContext;
	public fun typeParameterList ()Lorg/pkl/core/parser/antlr/PklParser$TypeParameterListContext;
}

public class org/pkl/core/parser/antlr/PklParser$TypeAnnotationContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun COLON ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun type ()Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
}

public class org/pkl/core/parser/antlr/PklParser$TypeArgumentListContext : org/antlr/v4/runtime/ParserRuleContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public field errs Ljava/util/List;
	public field s53 Lorg/antlr/v4/runtime/Token;
	public field ts Ljava/util/List;
	public field type Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun COMMA ()Ljava/util/List;
	public fun COMMA (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun GT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun type ()Ljava/util/List;
	public fun type (I)Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
}

public class org/pkl/core/parser/antlr/PklParser$TypeContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> ()V
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun copyFrom (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$TypeParameterContext : org/antlr/v4/runtime/ParserRuleContext {
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun IN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun Identifier ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun OUT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
}

public class org/pkl/core/parser/antlr/PklParser$TypeParameterListContext : org/antlr/v4/runtime/ParserRuleContext {
	public field err Lorg/antlr/v4/runtime/Token;
	public field errs Ljava/util/List;
	public field s53 Lorg/antlr/v4/runtime/Token;
	public field ts Ljava/util/List;
	public field typeParameter Lorg/pkl/core/parser/antlr/PklParser$TypeParameterContext;
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun COMMA ()Ljava/util/List;
	public fun COMMA (I)Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun GT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LT ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun typeParameter ()Ljava/util/List;
	public fun typeParameter (I)Lorg/pkl/core/parser/antlr/PklParser$TypeParameterContext;
}

public class org/pkl/core/parser/antlr/PklParser$TypeTestExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public field l Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
	public field t Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun AS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun IS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun type ()Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
}

public class org/pkl/core/parser/antlr/PklParser$TypedIdentifierContext : org/antlr/v4/runtime/ParserRuleContext {
	public fun <init> (Lorg/antlr/v4/runtime/ParserRuleContext;I)V
	public fun Identifier ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun getRuleIndex ()I
	public fun typeAnnotation ()Lorg/pkl/core/parser/antlr/PklParser$TypeAnnotationContext;
}

public class org/pkl/core/parser/antlr/PklParser$UnaryMinusExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun MINUS ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
}

public class org/pkl/core/parser/antlr/PklParser$UnionTypeContext : org/pkl/core/parser/antlr/PklParser$TypeContext {
	public field l Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
	public field r Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun UNION ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun type ()Ljava/util/List;
	public fun type (I)Lorg/pkl/core/parser/antlr/PklParser$TypeContext;
}

public class org/pkl/core/parser/antlr/PklParser$UnknownTypeContext : org/pkl/core/parser/antlr/PklParser$TypeContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)V
	public fun UNKNOWN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
}

public class org/pkl/core/parser/antlr/PklParser$UnqualifiedAccessExprContext : org/pkl/core/parser/antlr/PklParser$ExprContext {
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)V
	public fun Identifier ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun argumentList ()Lorg/pkl/core/parser/antlr/PklParser$ArgumentListContext;
}

public class org/pkl/core/parser/antlr/PklParser$WhenGeneratorContext : org/pkl/core/parser/antlr/PklParser$ObjectMemberContext {
	public field b1 Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
	public field b2 Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
	public field e Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public field err Lorg/antlr/v4/runtime/Token;
	public fun <init> (Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;)V
	public fun ELSE ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun LPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun RPAREN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun WHEN ()Lorg/antlr/v4/runtime/tree/TerminalNode;
	public fun accept (Lorg/antlr/v4/runtime/tree/ParseTreeVisitor;)Ljava/lang/Object;
	public fun expr ()Lorg/pkl/core/parser/antlr/PklParser$ExprContext;
	public fun objectBody ()Ljava/util/List;
	public fun objectBody (I)Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;
}

public class org/pkl/core/parser/antlr/PklParserBaseVisitor : org/antlr/v4/runtime/tree/AbstractParseTreeVisitor, org/pkl/core/parser/antlr/PklParserVisitor {
	public fun <init> ()V
	public fun visitAdditiveExpr (Lorg/pkl/core/parser/antlr/PklParser$AdditiveExprContext;)Ljava/lang/Object;
	public fun visitAmendExpr (Lorg/pkl/core/parser/antlr/PklParser$AmendExprContext;)Ljava/lang/Object;
	public fun visitAnnotation (Lorg/pkl/core/parser/antlr/PklParser$AnnotationContext;)Ljava/lang/Object;
	public fun visitArgumentList (Lorg/pkl/core/parser/antlr/PklParser$ArgumentListContext;)Ljava/lang/Object;
	public fun visitClassBody (Lorg/pkl/core/parser/antlr/PklParser$ClassBodyContext;)Ljava/lang/Object;
	public fun visitClassHeader (Lorg/pkl/core/parser/antlr/PklParser$ClassHeaderContext;)Ljava/lang/Object;
	public fun visitClassMethod (Lorg/pkl/core/parser/antlr/PklParser$ClassMethodContext;)Ljava/lang/Object;
	public fun visitClassProperty (Lorg/pkl/core/parser/antlr/PklParser$ClassPropertyContext;)Ljava/lang/Object;
	public fun visitClazz (Lorg/pkl/core/parser/antlr/PklParser$ClazzContext;)Ljava/lang/Object;
	public fun visitComparisonExpr (Lorg/pkl/core/parser/antlr/PklParser$ComparisonExprContext;)Ljava/lang/Object;
	public fun visitConstrainedType (Lorg/pkl/core/parser/antlr/PklParser$ConstrainedTypeContext;)Ljava/lang/Object;
	public fun visitDeclaredType (Lorg/pkl/core/parser/antlr/PklParser$DeclaredTypeContext;)Ljava/lang/Object;
	public fun visitDefaultUnionType (Lorg/pkl/core/parser/antlr/PklParser$DefaultUnionTypeContext;)Ljava/lang/Object;
	public fun visitEqualityExpr (Lorg/pkl/core/parser/antlr/PklParser$EqualityExprContext;)Ljava/lang/Object;
	public fun visitExponentiationExpr (Lorg/pkl/core/parser/antlr/PklParser$ExponentiationExprContext;)Ljava/lang/Object;
	public fun visitExpr (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)Ljava/lang/Object;
	public fun visitExprInput (Lorg/pkl/core/parser/antlr/PklParser$ExprInputContext;)Ljava/lang/Object;
	public fun visitFalseLiteral (Lorg/pkl/core/parser/antlr/PklParser$FalseLiteralContext;)Ljava/lang/Object;
	public fun visitFloatLiteral (Lorg/pkl/core/parser/antlr/PklParser$FloatLiteralContext;)Ljava/lang/Object;
	public fun visitForGenerator (Lorg/pkl/core/parser/antlr/PklParser$ForGeneratorContext;)Ljava/lang/Object;
	public fun visitFunctionLiteral (Lorg/pkl/core/parser/antlr/PklParser$FunctionLiteralContext;)Ljava/lang/Object;
	public fun visitFunctionType (Lorg/pkl/core/parser/antlr/PklParser$FunctionTypeContext;)Ljava/lang/Object;
	public fun visitIfExpr (Lorg/pkl/core/parser/antlr/PklParser$IfExprContext;)Ljava/lang/Object;
	public fun visitImportClause (Lorg/pkl/core/parser/antlr/PklParser$ImportClauseContext;)Ljava/lang/Object;
	public fun visitImportExpr (Lorg/pkl/core/parser/antlr/PklParser$ImportExprContext;)Ljava/lang/Object;
	public fun visitIntLiteral (Lorg/pkl/core/parser/antlr/PklParser$IntLiteralContext;)Ljava/lang/Object;
	public fun visitLetExpr (Lorg/pkl/core/parser/antlr/PklParser$LetExprContext;)Ljava/lang/Object;
	public fun visitLogicalAndExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalAndExprContext;)Ljava/lang/Object;
	public fun visitLogicalNotExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalNotExprContext;)Ljava/lang/Object;
	public fun visitLogicalOrExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalOrExprContext;)Ljava/lang/Object;
	public fun visitMemberPredicate (Lorg/pkl/core/parser/antlr/PklParser$MemberPredicateContext;)Ljava/lang/Object;
	public fun visitMethodHeader (Lorg/pkl/core/parser/antlr/PklParser$MethodHeaderContext;)Ljava/lang/Object;
	public fun visitModifier (Lorg/pkl/core/parser/antlr/PklParser$ModifierContext;)Ljava/lang/Object;
	public fun visitModule (Lorg/pkl/core/parser/antlr/PklParser$ModuleContext;)Ljava/lang/Object;
	public fun visitModuleDecl (Lorg/pkl/core/parser/antlr/PklParser$ModuleDeclContext;)Ljava/lang/Object;
	public fun visitModuleExpr (Lorg/pkl/core/parser/antlr/PklParser$ModuleExprContext;)Ljava/lang/Object;
	public fun visitModuleExtendsOrAmendsClause (Lorg/pkl/core/parser/antlr/PklParser$ModuleExtendsOrAmendsClauseContext;)Ljava/lang/Object;
	public fun visitModuleHeader (Lorg/pkl/core/parser/antlr/PklParser$ModuleHeaderContext;)Ljava/lang/Object;
	public fun visitModuleType (Lorg/pkl/core/parser/antlr/PklParser$ModuleTypeContext;)Ljava/lang/Object;
	public fun visitMultiLineStringLiteral (Lorg/pkl/core/parser/antlr/PklParser$MultiLineStringLiteralContext;)Ljava/lang/Object;
	public fun visitMultiLineStringPart (Lorg/pkl/core/parser/antlr/PklParser$MultiLineStringPartContext;)Ljava/lang/Object;
	public fun visitMultiplicativeExpr (Lorg/pkl/core/parser/antlr/PklParser$MultiplicativeExprContext;)Ljava/lang/Object;
	public fun visitNewExpr (Lorg/pkl/core/parser/antlr/PklParser$NewExprContext;)Ljava/lang/Object;
	public fun visitNonNullExpr (Lorg/pkl/core/parser/antlr/PklParser$NonNullExprContext;)Ljava/lang/Object;
	public fun visitNothingType (Lorg/pkl/core/parser/antlr/PklParser$NothingTypeContext;)Ljava/lang/Object;
	public fun visitNullCoalesceExpr (Lorg/pkl/core/parser/antlr/PklParser$NullCoalesceExprContext;)Ljava/lang/Object;
	public fun visitNullLiteral (Lorg/pkl/core/parser/antlr/PklParser$NullLiteralContext;)Ljava/lang/Object;
	public fun visitNullableType (Lorg/pkl/core/parser/antlr/PklParser$NullableTypeContext;)Ljava/lang/Object;
	public fun visitObjectBody (Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;)Ljava/lang/Object;
	public fun visitObjectElement (Lorg/pkl/core/parser/antlr/PklParser$ObjectElementContext;)Ljava/lang/Object;
	public fun visitObjectEntry (Lorg/pkl/core/parser/antlr/PklParser$ObjectEntryContext;)Ljava/lang/Object;
	public fun visitObjectMember (Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;)Ljava/lang/Object;
	public fun visitObjectMethod (Lorg/pkl/core/parser/antlr/PklParser$ObjectMethodContext;)Ljava/lang/Object;
	public fun visitObjectProperty (Lorg/pkl/core/parser/antlr/PklParser$ObjectPropertyContext;)Ljava/lang/Object;
	public fun visitObjectSpread (Lorg/pkl/core/parser/antlr/PklParser$ObjectSpreadContext;)Ljava/lang/Object;
	public fun visitOuterExpr (Lorg/pkl/core/parser/antlr/PklParser$OuterExprContext;)Ljava/lang/Object;
	public fun visitParameter (Lorg/pkl/core/parser/antlr/PklParser$ParameterContext;)Ljava/lang/Object;
	public fun visitParameterList (Lorg/pkl/core/parser/antlr/PklParser$ParameterListContext;)Ljava/lang/Object;
	public fun visitParenthesizedExpr (Lorg/pkl/core/parser/antlr/PklParser$ParenthesizedExprContext;)Ljava/lang/Object;
	public fun visitParenthesizedType (Lorg/pkl/core/parser/antlr/PklParser$ParenthesizedTypeContext;)Ljava/lang/Object;
	public fun visitPipeExpr (Lorg/pkl/core/parser/antlr/PklParser$PipeExprContext;)Ljava/lang/Object;
	public fun visitQualifiedAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$QualifiedAccessExprContext;)Ljava/lang/Object;
	public fun visitQualifiedIdentifier (Lorg/pkl/core/parser/antlr/PklParser$QualifiedIdentifierContext;)Ljava/lang/Object;
	public fun visitReadExpr (Lorg/pkl/core/parser/antlr/PklParser$ReadExprContext;)Ljava/lang/Object;
	public fun visitReplInput (Lorg/pkl/core/parser/antlr/PklParser$ReplInputContext;)Ljava/lang/Object;
	public fun visitReservedKeyword (Lorg/pkl/core/parser/antlr/PklParser$ReservedKeywordContext;)Ljava/lang/Object;
	public fun visitSingleLineStringLiteral (Lorg/pkl/core/parser/antlr/PklParser$SingleLineStringLiteralContext;)Ljava/lang/Object;
	public fun visitSingleLineStringPart (Lorg/pkl/core/parser/antlr/PklParser$SingleLineStringPartContext;)Ljava/lang/Object;
	public fun visitStringConstant (Lorg/pkl/core/parser/antlr/PklParser$StringConstantContext;)Ljava/lang/Object;
	public fun visitStringLiteralType (Lorg/pkl/core/parser/antlr/PklParser$StringLiteralTypeContext;)Ljava/lang/Object;
	public fun visitSubscriptExpr (Lorg/pkl/core/parser/antlr/PklParser$SubscriptExprContext;)Ljava/lang/Object;
	public fun visitSuperAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$SuperAccessExprContext;)Ljava/lang/Object;
	public fun visitSuperSubscriptExpr (Lorg/pkl/core/parser/antlr/PklParser$SuperSubscriptExprContext;)Ljava/lang/Object;
	public fun visitThisExpr (Lorg/pkl/core/parser/antlr/PklParser$ThisExprContext;)Ljava/lang/Object;
	public fun visitThrowExpr (Lorg/pkl/core/parser/antlr/PklParser$ThrowExprContext;)Ljava/lang/Object;
	public fun visitTraceExpr (Lorg/pkl/core/parser/antlr/PklParser$TraceExprContext;)Ljava/lang/Object;
	public fun visitTrueLiteral (Lorg/pkl/core/parser/antlr/PklParser$TrueLiteralContext;)Ljava/lang/Object;
	public fun visitType (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)Ljava/lang/Object;
	public fun visitTypeAlias (Lorg/pkl/core/parser/antlr/PklParser$TypeAliasContext;)Ljava/lang/Object;
	public fun visitTypeAliasHeader (Lorg/pkl/core/parser/antlr/PklParser$TypeAliasHeaderContext;)Ljava/lang/Object;
	public fun visitTypeAnnotation (Lorg/pkl/core/parser/antlr/PklParser$TypeAnnotationContext;)Ljava/lang/Object;
	public fun visitTypeArgumentList (Lorg/pkl/core/parser/antlr/PklParser$TypeArgumentListContext;)Ljava/lang/Object;
	public fun visitTypeParameter (Lorg/pkl/core/parser/antlr/PklParser$TypeParameterContext;)Ljava/lang/Object;
	public fun visitTypeParameterList (Lorg/pkl/core/parser/antlr/PklParser$TypeParameterListContext;)Ljava/lang/Object;
	public fun visitTypeTestExpr (Lorg/pkl/core/parser/antlr/PklParser$TypeTestExprContext;)Ljava/lang/Object;
	public fun visitTypedIdentifier (Lorg/pkl/core/parser/antlr/PklParser$TypedIdentifierContext;)Ljava/lang/Object;
	public fun visitUnaryMinusExpr (Lorg/pkl/core/parser/antlr/PklParser$UnaryMinusExprContext;)Ljava/lang/Object;
	public fun visitUnionType (Lorg/pkl/core/parser/antlr/PklParser$UnionTypeContext;)Ljava/lang/Object;
	public fun visitUnknownType (Lorg/pkl/core/parser/antlr/PklParser$UnknownTypeContext;)Ljava/lang/Object;
	public fun visitUnqualifiedAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$UnqualifiedAccessExprContext;)Ljava/lang/Object;
	public fun visitWhenGenerator (Lorg/pkl/core/parser/antlr/PklParser$WhenGeneratorContext;)Ljava/lang/Object;
}

public abstract interface class org/pkl/core/parser/antlr/PklParserVisitor : org/antlr/v4/runtime/tree/ParseTreeVisitor {
	public abstract fun visitAdditiveExpr (Lorg/pkl/core/parser/antlr/PklParser$AdditiveExprContext;)Ljava/lang/Object;
	public abstract fun visitAmendExpr (Lorg/pkl/core/parser/antlr/PklParser$AmendExprContext;)Ljava/lang/Object;
	public abstract fun visitAnnotation (Lorg/pkl/core/parser/antlr/PklParser$AnnotationContext;)Ljava/lang/Object;
	public abstract fun visitArgumentList (Lorg/pkl/core/parser/antlr/PklParser$ArgumentListContext;)Ljava/lang/Object;
	public abstract fun visitClassBody (Lorg/pkl/core/parser/antlr/PklParser$ClassBodyContext;)Ljava/lang/Object;
	public abstract fun visitClassHeader (Lorg/pkl/core/parser/antlr/PklParser$ClassHeaderContext;)Ljava/lang/Object;
	public abstract fun visitClassMethod (Lorg/pkl/core/parser/antlr/PklParser$ClassMethodContext;)Ljava/lang/Object;
	public abstract fun visitClassProperty (Lorg/pkl/core/parser/antlr/PklParser$ClassPropertyContext;)Ljava/lang/Object;
	public abstract fun visitClazz (Lorg/pkl/core/parser/antlr/PklParser$ClazzContext;)Ljava/lang/Object;
	public abstract fun visitComparisonExpr (Lorg/pkl/core/parser/antlr/PklParser$ComparisonExprContext;)Ljava/lang/Object;
	public abstract fun visitConstrainedType (Lorg/pkl/core/parser/antlr/PklParser$ConstrainedTypeContext;)Ljava/lang/Object;
	public abstract fun visitDeclaredType (Lorg/pkl/core/parser/antlr/PklParser$DeclaredTypeContext;)Ljava/lang/Object;
	public abstract fun visitDefaultUnionType (Lorg/pkl/core/parser/antlr/PklParser$DefaultUnionTypeContext;)Ljava/lang/Object;
	public abstract fun visitEqualityExpr (Lorg/pkl/core/parser/antlr/PklParser$EqualityExprContext;)Ljava/lang/Object;
	public abstract fun visitExponentiationExpr (Lorg/pkl/core/parser/antlr/PklParser$ExponentiationExprContext;)Ljava/lang/Object;
	public abstract fun visitExpr (Lorg/pkl/core/parser/antlr/PklParser$ExprContext;)Ljava/lang/Object;
	public abstract fun visitExprInput (Lorg/pkl/core/parser/antlr/PklParser$ExprInputContext;)Ljava/lang/Object;
	public abstract fun visitFalseLiteral (Lorg/pkl/core/parser/antlr/PklParser$FalseLiteralContext;)Ljava/lang/Object;
	public abstract fun visitFloatLiteral (Lorg/pkl/core/parser/antlr/PklParser$FloatLiteralContext;)Ljava/lang/Object;
	public abstract fun visitForGenerator (Lorg/pkl/core/parser/antlr/PklParser$ForGeneratorContext;)Ljava/lang/Object;
	public abstract fun visitFunctionLiteral (Lorg/pkl/core/parser/antlr/PklParser$FunctionLiteralContext;)Ljava/lang/Object;
	public abstract fun visitFunctionType (Lorg/pkl/core/parser/antlr/PklParser$FunctionTypeContext;)Ljava/lang/Object;
	public abstract fun visitIfExpr (Lorg/pkl/core/parser/antlr/PklParser$IfExprContext;)Ljava/lang/Object;
	public abstract fun visitImportClause (Lorg/pkl/core/parser/antlr/PklParser$ImportClauseContext;)Ljava/lang/Object;
	public abstract fun visitImportExpr (Lorg/pkl/core/parser/antlr/PklParser$ImportExprContext;)Ljava/lang/Object;
	public abstract fun visitIntLiteral (Lorg/pkl/core/parser/antlr/PklParser$IntLiteralContext;)Ljava/lang/Object;
	public abstract fun visitLetExpr (Lorg/pkl/core/parser/antlr/PklParser$LetExprContext;)Ljava/lang/Object;
	public abstract fun visitLogicalAndExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalAndExprContext;)Ljava/lang/Object;
	public abstract fun visitLogicalNotExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalNotExprContext;)Ljava/lang/Object;
	public abstract fun visitLogicalOrExpr (Lorg/pkl/core/parser/antlr/PklParser$LogicalOrExprContext;)Ljava/lang/Object;
	public abstract fun visitMemberPredicate (Lorg/pkl/core/parser/antlr/PklParser$MemberPredicateContext;)Ljava/lang/Object;
	public abstract fun visitMethodHeader (Lorg/pkl/core/parser/antlr/PklParser$MethodHeaderContext;)Ljava/lang/Object;
	public abstract fun visitModifier (Lorg/pkl/core/parser/antlr/PklParser$ModifierContext;)Ljava/lang/Object;
	public abstract fun visitModule (Lorg/pkl/core/parser/antlr/PklParser$ModuleContext;)Ljava/lang/Object;
	public abstract fun visitModuleDecl (Lorg/pkl/core/parser/antlr/PklParser$ModuleDeclContext;)Ljava/lang/Object;
	public abstract fun visitModuleExpr (Lorg/pkl/core/parser/antlr/PklParser$ModuleExprContext;)Ljava/lang/Object;
	public abstract fun visitModuleExtendsOrAmendsClause (Lorg/pkl/core/parser/antlr/PklParser$ModuleExtendsOrAmendsClauseContext;)Ljava/lang/Object;
	public abstract fun visitModuleHeader (Lorg/pkl/core/parser/antlr/PklParser$ModuleHeaderContext;)Ljava/lang/Object;
	public abstract fun visitModuleType (Lorg/pkl/core/parser/antlr/PklParser$ModuleTypeContext;)Ljava/lang/Object;
	public abstract fun visitMultiLineStringLiteral (Lorg/pkl/core/parser/antlr/PklParser$MultiLineStringLiteralContext;)Ljava/lang/Object;
	public abstract fun visitMultiLineStringPart (Lorg/pkl/core/parser/antlr/PklParser$MultiLineStringPartContext;)Ljava/lang/Object;
	public abstract fun visitMultiplicativeExpr (Lorg/pkl/core/parser/antlr/PklParser$MultiplicativeExprContext;)Ljava/lang/Object;
	public abstract fun visitNewExpr (Lorg/pkl/core/parser/antlr/PklParser$NewExprContext;)Ljava/lang/Object;
	public abstract fun visitNonNullExpr (Lorg/pkl/core/parser/antlr/PklParser$NonNullExprContext;)Ljava/lang/Object;
	public abstract fun visitNothingType (Lorg/pkl/core/parser/antlr/PklParser$NothingTypeContext;)Ljava/lang/Object;
	public abstract fun visitNullCoalesceExpr (Lorg/pkl/core/parser/antlr/PklParser$NullCoalesceExprContext;)Ljava/lang/Object;
	public abstract fun visitNullLiteral (Lorg/pkl/core/parser/antlr/PklParser$NullLiteralContext;)Ljava/lang/Object;
	public abstract fun visitNullableType (Lorg/pkl/core/parser/antlr/PklParser$NullableTypeContext;)Ljava/lang/Object;
	public abstract fun visitObjectBody (Lorg/pkl/core/parser/antlr/PklParser$ObjectBodyContext;)Ljava/lang/Object;
	public abstract fun visitObjectElement (Lorg/pkl/core/parser/antlr/PklParser$ObjectElementContext;)Ljava/lang/Object;
	public abstract fun visitObjectEntry (Lorg/pkl/core/parser/antlr/PklParser$ObjectEntryContext;)Ljava/lang/Object;
	public abstract fun visitObjectMember (Lorg/pkl/core/parser/antlr/PklParser$ObjectMemberContext;)Ljava/lang/Object;
	public abstract fun visitObjectMethod (Lorg/pkl/core/parser/antlr/PklParser$ObjectMethodContext;)Ljava/lang/Object;
	public abstract fun visitObjectProperty (Lorg/pkl/core/parser/antlr/PklParser$ObjectPropertyContext;)Ljava/lang/Object;
	public abstract fun visitObjectSpread (Lorg/pkl/core/parser/antlr/PklParser$ObjectSpreadContext;)Ljava/lang/Object;
	public abstract fun visitOuterExpr (Lorg/pkl/core/parser/antlr/PklParser$OuterExprContext;)Ljava/lang/Object;
	public abstract fun visitParameter (Lorg/pkl/core/parser/antlr/PklParser$ParameterContext;)Ljava/lang/Object;
	public abstract fun visitParameterList (Lorg/pkl/core/parser/antlr/PklParser$ParameterListContext;)Ljava/lang/Object;
	public abstract fun visitParenthesizedExpr (Lorg/pkl/core/parser/antlr/PklParser$ParenthesizedExprContext;)Ljava/lang/Object;
	public abstract fun visitParenthesizedType (Lorg/pkl/core/parser/antlr/PklParser$ParenthesizedTypeContext;)Ljava/lang/Object;
	public abstract fun visitPipeExpr (Lorg/pkl/core/parser/antlr/PklParser$PipeExprContext;)Ljava/lang/Object;
	public abstract fun visitQualifiedAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$QualifiedAccessExprContext;)Ljava/lang/Object;
	public abstract fun visitQualifiedIdentifier (Lorg/pkl/core/parser/antlr/PklParser$QualifiedIdentifierContext;)Ljava/lang/Object;
	public abstract fun visitReadExpr (Lorg/pkl/core/parser/antlr/PklParser$ReadExprContext;)Ljava/lang/Object;
	public abstract fun visitReplInput (Lorg/pkl/core/parser/antlr/PklParser$ReplInputContext;)Ljava/lang/Object;
	public abstract fun visitReservedKeyword (Lorg/pkl/core/parser/antlr/PklParser$ReservedKeywordContext;)Ljava/lang/Object;
	public abstract fun visitSingleLineStringLiteral (Lorg/pkl/core/parser/antlr/PklParser$SingleLineStringLiteralContext;)Ljava/lang/Object;
	public abstract fun visitSingleLineStringPart (Lorg/pkl/core/parser/antlr/PklParser$SingleLineStringPartContext;)Ljava/lang/Object;
	public abstract fun visitStringConstant (Lorg/pkl/core/parser/antlr/PklParser$StringConstantContext;)Ljava/lang/Object;
	public abstract fun visitStringLiteralType (Lorg/pkl/core/parser/antlr/PklParser$StringLiteralTypeContext;)Ljava/lang/Object;
	public abstract fun visitSubscriptExpr (Lorg/pkl/core/parser/antlr/PklParser$SubscriptExprContext;)Ljava/lang/Object;
	public abstract fun visitSuperAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$SuperAccessExprContext;)Ljava/lang/Object;
	public abstract fun visitSuperSubscriptExpr (Lorg/pkl/core/parser/antlr/PklParser$SuperSubscriptExprContext;)Ljava/lang/Object;
	public abstract fun visitThisExpr (Lorg/pkl/core/parser/antlr/PklParser$ThisExprContext;)Ljava/lang/Object;
	public abstract fun visitThrowExpr (Lorg/pkl/core/parser/antlr/PklParser$ThrowExprContext;)Ljava/lang/Object;
	public abstract fun visitTraceExpr (Lorg/pkl/core/parser/antlr/PklParser$TraceExprContext;)Ljava/lang/Object;
	public abstract fun visitTrueLiteral (Lorg/pkl/core/parser/antlr/PklParser$TrueLiteralContext;)Ljava/lang/Object;
	public abstract fun visitType (Lorg/pkl/core/parser/antlr/PklParser$TypeContext;)Ljava/lang/Object;
	public abstract fun visitTypeAlias (Lorg/pkl/core/parser/antlr/PklParser$TypeAliasContext;)Ljava/lang/Object;
	public abstract fun visitTypeAliasHeader (Lorg/pkl/core/parser/antlr/PklParser$TypeAliasHeaderContext;)Ljava/lang/Object;
	public abstract fun visitTypeAnnotation (Lorg/pkl/core/parser/antlr/PklParser$TypeAnnotationContext;)Ljava/lang/Object;
	public abstract fun visitTypeArgumentList (Lorg/pkl/core/parser/antlr/PklParser$TypeArgumentListContext;)Ljava/lang/Object;
	public abstract fun visitTypeParameter (Lorg/pkl/core/parser/antlr/PklParser$TypeParameterContext;)Ljava/lang/Object;
	public abstract fun visitTypeParameterList (Lorg/pkl/core/parser/antlr/PklParser$TypeParameterListContext;)Ljava/lang/Object;
	public abstract fun visitTypeTestExpr (Lorg/pkl/core/parser/antlr/PklParser$TypeTestExprContext;)Ljava/lang/Object;
	public abstract fun visitTypedIdentifier (Lorg/pkl/core/parser/antlr/PklParser$TypedIdentifierContext;)Ljava/lang/Object;
	public abstract fun visitUnaryMinusExpr (Lorg/pkl/core/parser/antlr/PklParser$UnaryMinusExprContext;)Ljava/lang/Object;
	public abstract fun visitUnionType (Lorg/pkl/core/parser/antlr/PklParser$UnionTypeContext;)Ljava/lang/Object;
	public abstract fun visitUnknownType (Lorg/pkl/core/parser/antlr/PklParser$UnknownTypeContext;)Ljava/lang/Object;
	public abstract fun visitUnqualifiedAccessExpr (Lorg/pkl/core/parser/antlr/PklParser$UnqualifiedAccessExprContext;)Ljava/lang/Object;
	public abstract fun visitWhenGenerator (Lorg/pkl/core/parser/antlr/PklParser$WhenGeneratorContext;)Ljava/lang/Object;
}

public final class org/pkl/core/project/CanonicalPackageUri : java/lang/Record {
	public fun <init> (Ljava/net/URI;I)V
	public fun baseUri ()Ljava/net/URI;
	public fun equals (Ljava/lang/Object;)Z
	public static fun fromPackageUri (Lorg/pkl/core/packages/PackageUri;)Lorg/pkl/core/project/CanonicalPackageUri;
	public fun getBaseUri ()Ljava/net/URI;
	public fun getMajorVersion ()I
	public final fun hashCode ()I
	public fun majorVersion ()I
	public static fun of (Ljava/lang/String;)Lorg/pkl/core/project/CanonicalPackageUri;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/project/DeclaredDependencies : java/lang/Record {
	public fun <init> (Ljava/util/Map;Ljava/util/Map;Ljava/net/URI;Lorg/pkl/core/packages/PackageUri;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun getLocalDependencies ()Ljava/util/Map;
	public fun getMyPackageUri ()Lorg/pkl/core/packages/PackageUri;
	public fun getProjectFileUri ()Ljava/net/URI;
	public fun getRemoteDependencies ()Ljava/util/Map;
	public final fun hashCode ()I
	public fun localDependencies ()Ljava/util/Map;
	public fun myPackageUri ()Lorg/pkl/core/packages/PackageUri;
	public fun projectFileUri ()Ljava/net/URI;
	public fun remoteDependencies ()Ljava/util/Map;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/project/Package : java/lang/Record {
	public fun <init> (Ljava/lang/String;Lorg/pkl/core/packages/PackageUri;Lorg/pkl/core/Version;Ljava/net/URI;Ljava/lang/String;Ljava/util/List;Ljava/net/URI;Ljava/net/URI;Ljava/net/URI;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URI;Ljava/util/List;Ljava/util/List;)V
	public fun apiTests ()Ljava/util/List;
	public fun authors ()Ljava/util/List;
	public fun description ()Ljava/lang/String;
	public fun documentation ()Ljava/net/URI;
	public final fun equals (Ljava/lang/Object;)Z
	public fun exclude ()Ljava/util/List;
	public fun getApiTests ()Ljava/util/List;
	public fun getAuthors ()Ljava/util/List;
	public fun getDescription ()Ljava/lang/String;
	public fun getDocumentation ()Ljava/net/URI;
	public fun getExclude ()Ljava/util/List;
	public fun getIssueTracker ()Ljava/net/URI;
	public fun getLicense ()Ljava/lang/String;
	public fun getLicenseText ()Ljava/lang/String;
	public fun getName ()Ljava/lang/String;
	public fun getPackageZipUrl ()Ljava/net/URI;
	public fun getSourceCode ()Ljava/net/URI;
	public fun getSourceCodeUrlScheme ()Ljava/lang/String;
	public fun getUri ()Lorg/pkl/core/packages/PackageUri;
	public fun getVersion ()Lorg/pkl/core/Version;
	public fun getWebsite ()Ljava/net/URI;
	public final fun hashCode ()I
	public fun issueTracker ()Ljava/net/URI;
	public fun license ()Ljava/lang/String;
	public fun licenseText ()Ljava/lang/String;
	public fun name ()Ljava/lang/String;
	public fun packageZipUrl ()Ljava/net/URI;
	public fun sourceCode ()Ljava/net/URI;
	public fun sourceCodeUrlScheme ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
	public fun uri ()Lorg/pkl/core/packages/PackageUri;
	public fun version ()Lorg/pkl/core/Version;
	public fun website ()Ljava/net/URI;
}

public final class org/pkl/core/project/Project {
	public fun equals (Ljava/lang/Object;)Z
	public fun getAnnotations ()Ljava/util/List;
	public fun getDependencies ()Lorg/pkl/core/project/DeclaredDependencies;
	public fun getEvaluatorSettings ()Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings;
	public fun getLocalProjectDependencies ()Ljava/util/Map;
	public fun getPackage ()Lorg/pkl/core/project/Package;
	public fun getProjectBaseUri ()Ljava/net/URI;
	public fun getProjectDir ()Ljava/nio/file/Path;
	public fun getProjectFileUri ()Ljava/net/URI;
	public fun getSettings ()Lorg/pkl/core/project/Project$EvaluatorSettings;
	public fun getTests ()Ljava/util/List;
	public fun hashCode ()I
	public static fun load (Lorg/pkl/core/Evaluator;Lorg/pkl/core/ModuleSource;)Lorg/pkl/core/project/Project;
	public static fun load (Lorg/pkl/core/ModuleSource;)Lorg/pkl/core/project/Project;
	public static fun loadFromPath (Ljava/nio/file/Path;)Lorg/pkl/core/project/Project;
	public static fun loadFromPath (Ljava/nio/file/Path;Lorg/pkl/core/SecurityManager;Ljava/time/Duration;)Lorg/pkl/core/project/Project;
	public static fun loadFromPath (Ljava/nio/file/Path;Lorg/pkl/core/SecurityManager;Ljava/time/Duration;Lorg/pkl/core/StackFrameTransformer;Ljava/util/Map;)Lorg/pkl/core/project/Project;
	public static fun parseProject (Lorg/pkl/core/PObject;)Lorg/pkl/core/project/Project;
}

public class org/pkl/core/project/Project$EvaluatorSettings {
	public fun <init> (Ljava/util/Map;Ljava/util/Map;Ljava/util/List;Ljava/util/List;Ljava/lang/Boolean;Ljava/nio/file/Path;Ljava/util/List;Lorg/pkl/core/Duration;Ljava/nio/file/Path;)V
	public fun <init> (Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getAllowedModules ()Ljava/util/List;
	public fun getAllowedResources ()Ljava/util/List;
	public fun getEnv ()Ljava/util/Map;
	public fun getExternalProperties ()Ljava/util/Map;
	public fun getModuleCacheDir ()Ljava/nio/file/Path;
	public fun getModulePath ()Ljava/util/List;
	public fun getRootDir ()Ljava/nio/file/Path;
	public fun getTimeout ()Lorg/pkl/core/Duration;
	public fun hashCode ()I
	public fun isNoCache ()Ljava/lang/Boolean;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/project/ProjectDependenciesResolver {
	public fun <init> (Lorg/pkl/core/project/Project;Lorg/pkl/core/packages/PackageResolver;Ljava/io/Writer;)V
	public fun resolve ()Lorg/pkl/core/project/ProjectDeps;
}

public final class org/pkl/core/project/ProjectDeps {
	public fun <init> (Lorg/graalvm/collections/EconomicMap;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun get (Lorg/pkl/core/project/CanonicalPackageUri;)Lorg/pkl/core/packages/Dependency;
	public fun hashCode ()I
	public static fun parse (Ljava/lang/String;)Lorg/pkl/core/project/ProjectDeps;
	public static fun parse (Ljava/nio/file/Path;)Lorg/pkl/core/project/ProjectDeps;
	public fun toString ()Ljava/lang/String;
	public fun writeTo (Ljava/io/OutputStream;)V
}

public final class org/pkl/core/project/ProjectPackager {
	public fun <init> (Ljava/util/List;Ljava/nio/file/Path;Ljava/lang/String;Lorg/pkl/core/StackFrameTransformer;ZLorg/pkl/core/SecurityManager;Lorg/pkl/core/http/HttpClient;ZLjava/io/Writer;)V
	public fun createPackages ()V
	public fun doPackage (Lorg/pkl/core/project/Project;)Lorg/pkl/core/project/ProjectPackager$PackageResult;
	public fun validateImportsAndReads (Lorg/pkl/core/project/Project;Ljava/nio/file/Path;)V
}

public final class org/pkl/core/project/ProjectPackager$PackageResult : java/lang/Record {
	public fun <init> (Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun getMetadataChecksum ()Ljava/lang/String;
	public fun getMetadataChecksumFile ()Ljava/nio/file/Path;
	public fun getMetadataFile ()Ljava/nio/file/Path;
	public fun getZipChecksumFile ()Ljava/nio/file/Path;
	public fun getZipFile ()Ljava/nio/file/Path;
	public final fun hashCode ()I
	public fun metadataChecksum ()Ljava/lang/String;
	public fun metadataChecksumFile ()Ljava/nio/file/Path;
	public fun metadataFile ()Ljava/nio/file/Path;
	public final fun toString ()Ljava/lang/String;
	public fun zipChecksumFile ()Ljava/nio/file/Path;
	public fun zipFile ()Ljava/nio/file/Path;
}

public abstract class org/pkl/core/repl/ReplRequest {
	public final field id Ljava/lang/String;
}

public final class org/pkl/core/repl/ReplRequest$Completion : org/pkl/core/repl/ReplRequest {
	public final field text Ljava/lang/String;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/repl/ReplRequest$Eval : org/pkl/core/repl/ReplRequest {
	public final field evalDefinitions Z
	public final field forceResults Z
	public final field text Ljava/lang/String;
	public fun <init> (Ljava/lang/String;Ljava/lang/String;ZZ)V
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/repl/ReplRequest$Load : org/pkl/core/repl/ReplRequest {
	public final field uri Ljava/net/URI;
	public fun <init> (Ljava/lang/String;Ljava/net/URI;)V
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/repl/ReplRequest$Reset : org/pkl/core/repl/ReplRequest {
	public fun <init> (Ljava/lang/String;)V
	public fun toString ()Ljava/lang/String;
}

public abstract class org/pkl/core/repl/ReplResponse {
	public fun getMessage ()Ljava/lang/String;
}

public final class org/pkl/core/repl/ReplResponse$Completion : org/pkl/core/repl/ReplResponse {
	public static final field EMPTY Lorg/pkl/core/repl/ReplResponse$Completion;
	public final field members Ljava/util/Collection;
	public fun <init> (Ljava/util/Collection;)V
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/repl/ReplResponse$EvalError : org/pkl/core/repl/ReplResponse {
	public fun <init> (Ljava/lang/String;)V
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/repl/ReplResponse$EvalSuccess : org/pkl/core/repl/ReplResponse {
	public fun <init> (Ljava/lang/String;)V
	public fun getResult ()Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/repl/ReplResponse$IncompleteInput : org/pkl/core/repl/ReplResponse {
	public fun <init> (Ljava/lang/String;)V
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/repl/ReplResponse$InternalError : org/pkl/core/repl/ReplResponse {
	public fun <init> (Ljava/lang/Throwable;)V
	public fun getCause ()Ljava/lang/Throwable;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/repl/ReplResponse$InvalidRequest : org/pkl/core/repl/ReplResponse {
	public fun <init> (Ljava/lang/String;)V
	public fun toString ()Ljava/lang/String;
}

public class org/pkl/core/repl/ReplServer : java/lang/AutoCloseable {
	public fun <init> (Lorg/pkl/core/SecurityManager;Lorg/pkl/core/http/HttpClient;Lorg/pkl/core/Logger;Ljava/util/Collection;Ljava/util/Collection;Ljava/util/Map;Ljava/util/Map;Ljava/nio/file/Path;Lorg/pkl/core/project/DeclaredDependencies;Ljava/lang/String;Ljava/nio/file/Path;Lorg/pkl/core/StackFrameTransformer;Z)V
	public fun close ()V
	public fun handleRequest (Lorg/pkl/core/repl/ReplRequest;)Ljava/util/List;
}

public abstract interface class org/pkl/core/resource/ExternalResourceResolver {
	public abstract fun hasElement (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Z
	public abstract fun listElements (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Ljava/util/List;
	public abstract fun read (Ljava/net/URI;)Ljava/util/Optional;
}

public abstract interface class org/pkl/core/resource/ExternalResourceResolver$Spec {
	public abstract fun hasHierarchicalUris ()Z
	public abstract fun isGlobbable ()Z
	public abstract fun scheme ()Ljava/lang/String;
}

public final class org/pkl/core/resource/Resource : java/lang/Record {
	public fun <init> (Ljava/net/URI;[B)V
	public fun bytes ()[B
	public final fun equals (Ljava/lang/Object;)Z
	public fun getBase64 ()Ljava/lang/String;
	public fun getBytes ()[B
	public fun getText ()Ljava/lang/String;
	public fun getUri ()Ljava/net/URI;
	public final fun hashCode ()I
	public final fun toString ()Ljava/lang/String;
	public fun uri ()Ljava/net/URI;
}

public abstract interface class org/pkl/core/resource/ResourceReader : java/lang/AutoCloseable, org/pkl/core/runtime/ReaderBase {
	public fun close ()V
	public abstract fun getUriScheme ()Ljava/lang/String;
	public abstract fun read (Ljava/net/URI;)Ljava/util/Optional;
}

public final class org/pkl/core/resource/ResourceReaders {
	public static fun classPath (Ljava/lang/ClassLoader;)Lorg/pkl/core/resource/ResourceReader;
	public static fun environmentVariable ()Lorg/pkl/core/resource/ResourceReader;
	public static fun externalProcess (Ljava/lang/String;Lorg/pkl/core/externalreader/ExternalReaderProcess;)Lorg/pkl/core/resource/ResourceReader;
	public static fun externalProcess (Ljava/lang/String;Lorg/pkl/core/externalreader/ExternalReaderProcess;J)Lorg/pkl/core/resource/ResourceReader;
	public static fun externalProperty ()Lorg/pkl/core/resource/ResourceReader;
	public static fun externalResolver (Lorg/pkl/core/resource/ExternalResourceResolver$Spec;Lorg/pkl/core/resource/ExternalResourceResolver;)Lorg/pkl/core/resource/ResourceReader;
	public static fun file ()Lorg/pkl/core/resource/ResourceReader;
	public static fun fromServiceProviders ()Ljava/util/List;
	public static fun http ()Lorg/pkl/core/resource/ResourceReader;
	public static fun https ()Lorg/pkl/core/resource/ResourceReader;
	public static fun modulePath (Lorg/pkl/core/module/ModulePathResolver;)Lorg/pkl/core/resource/ResourceReader;
	public static fun pkg ()Lorg/pkl/core/resource/ResourceReader;
	public static fun projectpackage ()Lorg/pkl/core/resource/ResourceReader;
}

public class org/pkl/core/runtime/AnalyzeModule : org/pkl/core/runtime/StdLibModule {
	public fun <init> ()V
	public static fun getImportClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getImportGraphClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/runtime/BaseModule : org/pkl/core/runtime/StdLibModule {
	public fun <init> ()V
	public static fun getAnnotationClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getAnyClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getBooleanClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getClassClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getCollectionClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getDataSizeClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getDeprecatedClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getDurationClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getDynamicClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getFloatClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getFunction0Class ()Lorg/pkl/core/runtime/VmClass;
	public static fun getFunction1Class ()Lorg/pkl/core/runtime/VmClass;
	public static fun getFunction2Class ()Lorg/pkl/core/runtime/VmClass;
	public static fun getFunction3Class ()Lorg/pkl/core/runtime/VmClass;
	public static fun getFunction4Class ()Lorg/pkl/core/runtime/VmClass;
	public static fun getFunction5Class ()Lorg/pkl/core/runtime/VmClass;
	public static fun getFunctionClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getFunctionNClass (I)Lorg/pkl/core/runtime/VmClass;
	public static fun getInt16TypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
	public static fun getInt32TypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
	public static fun getInt8TypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
	public static fun getIntClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getIntSeqClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getListClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getListingClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getMapClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getMappingClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getMixinTypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
	public static fun getModuleClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getModuleInfoClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getNonNullTypeAlias ()Lorg/pkl/core/runtime/VmTypeAlias;
	public static fun getNullClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getNumberClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getPairClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getRegexClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getRegexMatchClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getRenderDirectiveClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getResourceClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getSetClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getStringClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getTypeAliasClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getTypedClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getVarArgsClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/runtime/BenchmarkModule : org/pkl/core/runtime/StdLibModule {
	public fun <init> ()V
	public static fun getBenchmarkResultClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/runtime/FileSystemManager {
	public static fun getFileSystem (Ljava/net/URI;)Ljava/nio/file/FileSystem;
}

public final class org/pkl/core/runtime/Identifier : java/lang/Comparable {
	public static final field AFTER Lorg/pkl/core/runtime/Identifier;
	public static final field ANY Lorg/pkl/core/runtime/Identifier;
	public static final field APPLY Lorg/pkl/core/runtime/Identifier;
	public static final field ATTRIBUTES Lorg/pkl/core/runtime/Identifier;
	public static final field B Lorg/pkl/core/runtime/Identifier;
	public static final field BASE64 Lorg/pkl/core/runtime/Identifier;
	public static final field BEFORE Lorg/pkl/core/runtime/Identifier;
	public static final field CONVERTERS Lorg/pkl/core/runtime/Identifier;
	public static final field D Lorg/pkl/core/runtime/Identifier;
	public static final field DEFAULT Lorg/pkl/core/runtime/Identifier;
	public static final field EXAMPLES Lorg/pkl/core/runtime/Identifier;
	public static final field EXPRESSION Lorg/pkl/core/runtime/Identifier;
	public static final field FACTS Lorg/pkl/core/runtime/Identifier;
	public static final field FILES Lorg/pkl/core/runtime/Identifier;
	public static final field GB Lorg/pkl/core/runtime/Identifier;
	public static final field GIB Lorg/pkl/core/runtime/Identifier;
	public static final field H Lorg/pkl/core/runtime/Identifier;
	public static final field INDENT Lorg/pkl/core/runtime/Identifier;
	public static final field INDENT_WIDTH Lorg/pkl/core/runtime/Identifier;
	public static final field IS_BLOCK_FORMAT Lorg/pkl/core/runtime/Identifier;
	public static final field IS_STREAM Lorg/pkl/core/runtime/Identifier;
	public static final field IS_VERBOSE Lorg/pkl/core/runtime/Identifier;
	public static final field IS_XML_ELEMENT Lorg/pkl/core/runtime/Identifier;
	public static final field IT Lorg/pkl/core/runtime/Identifier;
	public static final field ITERATIONS Lorg/pkl/core/runtime/Identifier;
	public static final field ITERATION_TIME Lorg/pkl/core/runtime/Identifier;
	public static final field KB Lorg/pkl/core/runtime/Identifier;
	public static final field KIB Lorg/pkl/core/runtime/Identifier;
	public static final field LIST Lorg/pkl/core/runtime/Identifier;
	public static final field MAP Lorg/pkl/core/runtime/Identifier;
	public static final field MAX_COLLECTION_ALIASES Lorg/pkl/core/runtime/Identifier;
	public static final field MB Lorg/pkl/core/runtime/Identifier;
	public static final field MESSAGE Lorg/pkl/core/runtime/Identifier;
	public static final field MIB Lorg/pkl/core/runtime/Identifier;
	public static final field MIN Lorg/pkl/core/runtime/Identifier;
	public static final field MIN_PKL_VERSION Lorg/pkl/core/runtime/Identifier;
	public static final field MODE Lorg/pkl/core/runtime/Identifier;
	public static final field MODULE Lorg/pkl/core/runtime/Identifier;
	public static final field MODULE_INFO Lorg/pkl/core/runtime/Identifier;
	public static final field MS Lorg/pkl/core/runtime/Identifier;
	public static final field NAME Lorg/pkl/core/runtime/Identifier;
	public static final field NS Lorg/pkl/core/runtime/Identifier;
	public static final field OMIT_NULL_PROPERTIES Lorg/pkl/core/runtime/Identifier;
	public static final field OUTPUT Lorg/pkl/core/runtime/Identifier;
	public static final field PATH Lorg/pkl/core/runtime/Identifier;
	public static final field PB Lorg/pkl/core/runtime/Identifier;
	public static final field PIB Lorg/pkl/core/runtime/Identifier;
	public static final field RESTRICT_CHARSET Lorg/pkl/core/runtime/Identifier;
	public static final field ROOT_ELEMENT_ATTRIBUTES Lorg/pkl/core/runtime/Identifier;
	public static final field ROOT_ELEMENT_NAME Lorg/pkl/core/runtime/Identifier;
	public static final field S Lorg/pkl/core/runtime/Identifier;
	public static final field SET Lorg/pkl/core/runtime/Identifier;
	public static final field SOURCE_MODULE Lorg/pkl/core/runtime/Identifier;
	public static final field SOURCE_TEXT Lorg/pkl/core/runtime/Identifier;
	public static final field SOURCE_URI Lorg/pkl/core/runtime/Identifier;
	public static final field TB Lorg/pkl/core/runtime/Identifier;
	public static final field TEXT Lorg/pkl/core/runtime/Identifier;
	public static final field TIB Lorg/pkl/core/runtime/Identifier;
	public static final field TO_STRING Lorg/pkl/core/runtime/Identifier;
	public static final field TYPED Lorg/pkl/core/runtime/Identifier;
	public static final field URI Lorg/pkl/core/runtime/Identifier;
	public static final field US Lorg/pkl/core/runtime/Identifier;
	public static final field USE_CUSTOM_STRING_DELIMITERS Lorg/pkl/core/runtime/Identifier;
	public static final field USE_MAPPING Lorg/pkl/core/runtime/Identifier;
	public static final field VALUE Lorg/pkl/core/runtime/Identifier;
	public static final field XML_VERSION Lorg/pkl/core/runtime/Identifier;
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Lorg/pkl/core/runtime/Identifier;)I
	public static fun get (Ljava/lang/String;)Lorg/pkl/core/runtime/Identifier;
	public fun isLocalMethod ()Z
	public fun isLocalProp ()Z
	public fun isRegular ()Z
	public static fun localMethod (Ljava/lang/String;)Lorg/pkl/core/runtime/Identifier;
	public static fun localProperty (Ljava/lang/String;)Lorg/pkl/core/runtime/Identifier;
	public static fun method (Ljava/lang/String;Z)Lorg/pkl/core/runtime/Identifier;
	public static fun property (Ljava/lang/String;Z)Lorg/pkl/core/runtime/Identifier;
	public fun toLocalMethod ()Lorg/pkl/core/runtime/Identifier;
	public fun toLocalProperty ()Lorg/pkl/core/runtime/Identifier;
	public fun toRegular ()Lorg/pkl/core/runtime/Identifier;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/runtime/Iterators {
	public static fun emptyTruffleIterator ()Ljava/util/Iterator;
}

public final class org/pkl/core/runtime/Iterators$ReverseArrayIterator : java/util/Iterator {
	public fun <init> ([Ljava/lang/Object;)V
	public fun hasNext ()Z
	public fun next ()Ljava/lang/Object;
}

public final class org/pkl/core/runtime/Iterators$ReverseTruffleIterator : java/util/Iterator {
	public fun <init> (Ljava/util/List;)V
	public fun forEachRemaining (Ljava/util/function/Consumer;)V
	public fun hasNext ()Z
	public fun next ()Ljava/lang/Object;
	public fun remove ()V
}

public final class org/pkl/core/runtime/Iterators$TruffleIterator : java/util/Iterator {
	public fun <init> (Ljava/lang/Iterable;)V
	public fun forEachRemaining (Ljava/util/function/Consumer;)V
	public fun hasNext ()Z
	public fun next ()Ljava/lang/Object;
	public fun remove ()V
}

public final class org/pkl/core/runtime/JsonnetModule : org/pkl/core/runtime/StdLibModule {
	public fun <init> ()V
	public static fun getExtVarClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getImportStrClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/runtime/KeyLookupSuggestions {
	public static fun forMap (Lorg/pkl/core/runtime/VmMap;Ljava/lang/String;)Ljava/util/List;
	public static fun forObject (Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/String;)Ljava/util/List;
}

public final class org/pkl/core/runtime/KeyLookupSuggestions$Candidate : java/lang/Comparable {
	public fun <init> (Ljava/lang/String;D)V
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Lorg/pkl/core/runtime/KeyLookupSuggestions$Candidate;)I
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/runtime/LoggerImpl : org/pkl/core/Logger {
	public fun <init> (Lorg/pkl/core/Logger;Lorg/pkl/core/StackFrameTransformer;)V
	public fun trace (Ljava/lang/String;Lorg/pkl/core/StackFrame;)V
	public fun warn (Ljava/lang/String;Lorg/pkl/core/StackFrame;)V
}

public final class org/pkl/core/runtime/MathModule : org/pkl/core/runtime/StdLibModule {
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/runtime/MemberLookupSuggestions {
	public fun <init> (Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/Object;ILjava/util/Set;)V
	public fun find (Z)Ljava/util/List;
}

public final class org/pkl/core/runtime/MemberLookupSuggestions$Candidate : java/lang/Comparable {
	public fun <init> (Lorg/pkl/core/runtime/MemberLookupSuggestions$Candidate$Kind;Ljava/lang/String;Ljava/lang/String;DI)V
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Lorg/pkl/core/runtime/MemberLookupSuggestions$Candidate;)I
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/runtime/MemberLookupSuggestions$Candidate$Kind : java/lang/Enum {
	public static final field METHOD Lorg/pkl/core/runtime/MemberLookupSuggestions$Candidate$Kind;
	public static final field PROPERTY Lorg/pkl/core/runtime/MemberLookupSuggestions$Candidate$Kind;
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/runtime/MemberLookupSuggestions$Candidate$Kind;
	public static fun values ()[Lorg/pkl/core/runtime/MemberLookupSuggestions$Candidate$Kind;
}

public final class org/pkl/core/runtime/MirrorFactories {
	public static final field classFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field classTypeFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field declaredTypeFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field functionTypeFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field functionTypeFactory2 Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field methodFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field methodParameterFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field moduleFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field moduleTypeFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field nothingTypeFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field nullableTypeFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field nullableTypeFactory2 Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field propertyFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field sourceLocationFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field stringLiteralTypeFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field stringLiteralTypeFactory2 Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field typeAliasFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field typeAliasTypeFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field typeParameterFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field typeVariableFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field typeVariableFactory2 Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field unionOfStringLiteralsTypeFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field unionOfStringLiteralsTypeFactory2 Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field unionTypeFactory Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field unionTypeFactory2 Lorg/pkl/core/stdlib/VmObjectFactory;
	public static final field unknownTypeFactory Lorg/pkl/core/stdlib/VmObjectFactory;
}

public final class org/pkl/core/runtime/ModuleCache {
	public fun <init> ()V
	public fun getOrLoad (Lorg/pkl/core/module/ModuleKey;Lorg/pkl/core/SecurityManager;Lorg/pkl/core/runtime/ModuleResolver;Ljava/util/function/Supplier;Lorg/pkl/core/runtime/ModuleCache$ModuleInitializer;Lcom/oracle/truffle/api/nodes/Node;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract interface class org/pkl/core/runtime/ModuleCache$ModuleInitializer {
	public abstract fun initialize (Lorg/pkl/core/module/ModuleKey;Lorg/pkl/core/module/ResolvedModuleKey;Lorg/pkl/core/runtime/ModuleResolver;Lcom/oracle/truffle/api/source/Source;Lorg/pkl/core/runtime/VmTyped;Lcom/oracle/truffle/api/nodes/Node;)V
}

public final class org/pkl/core/runtime/ModuleInfo {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;Lorg/pkl/core/module/ModuleKey;Lorg/pkl/core/module/ResolvedModuleKey;Z)V
	public fun getAnnotations ()Ljava/util/List;
	public fun getDocComment ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getHeaderSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getMirror (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
	public fun getModuleKey ()Lorg/pkl/core/module/ModuleKey;
	public fun getModuleName ()Ljava/lang/String;
	public fun getModuleSchema (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/ModuleSchema;
	public fun getResolvedModuleKey ()Lorg/pkl/core/module/ResolvedModuleKey;
	public fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun initAnnotations (Ljava/util/List;)V
	public fun isAmend ()Z
}

public final class org/pkl/core/runtime/ModuleResolver {
	public fun <init> (Ljava/util/Collection;)V
	public fun getFactories ()Ljava/util/Collection;
	public fun resolve (Ljava/net/URI;)Lorg/pkl/core/module/ModuleKey;
	public fun resolve (Ljava/net/URI;Lcom/oracle/truffle/api/nodes/Node;)Lorg/pkl/core/module/ModuleKey;
	public fun resolve (Lorg/pkl/core/ModuleSource;)Lorg/pkl/core/module/ModuleKey;
	public fun resolveCached (Ljava/net/URI;Ljava/lang/String;)Lorg/pkl/core/module/ModuleKey;
}

public final class org/pkl/core/runtime/NullReceiverException : com/oracle/truffle/api/nodes/ControlFlowException {
	public static final field INSTANCE Lorg/pkl/core/runtime/NullReceiverException;
}

public final class org/pkl/core/runtime/PlatformModule : org/pkl/core/runtime/StdLibModule {
	public fun <init> ()V
	public static fun getLanguageClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
	public static fun getOperatingSystemClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getPlatformClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getProcessorClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getRuntimeClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getVirtualMachineClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/runtime/ProjectModule : org/pkl/core/runtime/StdLibModule {
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
}

public abstract interface class org/pkl/core/runtime/ReaderBase {
	public fun hasElement (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Z
	public fun hasFragmentPaths ()Z
	public abstract fun hasHierarchicalUris ()Z
	public abstract fun isGlobbable ()Z
	public fun listElements (Lorg/pkl/core/SecurityManager;Ljava/net/URI;)Ljava/util/List;
	public fun resolveUri (Ljava/net/URI;Ljava/net/URI;)Ljava/net/URI;
}

public final class org/pkl/core/runtime/ReflectModule : org/pkl/core/runtime/StdLibModule {
	public static fun getClassClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getDeclaredTypeClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getFunctionTypeClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getMethodClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getMethodParameterClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
	public static fun getModuleClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getModuleTypeClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getNothingTypeClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getNullableTypeClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getPropertyClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getSourceLocationClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getStringLiteralTypeClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getTypeAliasClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getTypeParameterClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getTypeVariableClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getUnionTypeClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getUnknownTypeClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/runtime/ReleaseModule : org/pkl/core/runtime/StdLibModule {
	public fun <init> ()V
	public static fun getDocumentationClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
	public static fun getReleaseClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getSourceCodeClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getStandardLibraryClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/runtime/ResourceManager {
	public fun <init> (Lorg/pkl/core/SecurityManager;Ljava/util/Collection;)V
	public fun doRead (Lorg/pkl/core/resource/ResourceReader;Ljava/net/URI;Lcom/oracle/truffle/api/nodes/Node;)Ljava/util/Optional;
	public fun getReader (Ljava/net/URI;Lcom/oracle/truffle/api/nodes/Node;)Lorg/pkl/core/resource/ResourceReader;
	public fun getResourceReader (Ljava/net/URI;)Lorg/pkl/core/resource/ResourceReader;
	public fun read (Ljava/net/URI;Lcom/oracle/truffle/api/nodes/Node;)Ljava/util/Optional;
}

public final class org/pkl/core/runtime/SemVerModule : org/pkl/core/runtime/StdLibModule {
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
	public static fun getVersionClass ()Lorg/pkl/core/runtime/VmClass;
}

public final class org/pkl/core/runtime/SettingsModule : org/pkl/core/runtime/StdLibModule {
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/runtime/StackTraceRenderer {
	public fun <init> (Ljava/util/function/Function;)V
	public fun render (Ljava/util/List;Ljava/lang/String;Lorg/pkl/core/util/AnsiStringBuilder;)V
}

public abstract class org/pkl/core/runtime/StdLibModule {
	public fun <init> ()V
	protected static fun loadModule (Ljava/net/URI;Lorg/pkl/core/runtime/VmTyped;)V
}

public final class org/pkl/core/runtime/TestModule : org/pkl/core/runtime/StdLibModule {
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/runtime/TestRunner {
	public fun <init> (Lorg/pkl/core/BufferedLogger;Lorg/pkl/core/StackFrameTransformer;ZZ)V
	public fun run (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/TestResults;
}

public final class org/pkl/core/runtime/VmBugException : org/pkl/core/runtime/VmException {
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;Z[Ljava/lang/Object;Ljava/util/List;Lcom/oracle/truffle/api/nodes/Node;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
	public fun getLocalizedMessage ()Ljava/lang/String;
	public fun toPklException (Lorg/pkl/core/StackFrameTransformer;Z)Lorg/pkl/core/PklException;
}

public final class org/pkl/core/runtime/VmClass : org/pkl/core/runtime/VmValue {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Ljava/util/List;ILorg/pkl/core/PClassInfo;Ljava/util/List;Lorg/pkl/core/runtime/VmTyped;)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public fun addMethod (Lorg/pkl/core/ast/member/ClassMethod;)V
	public fun addMethods (Ljava/lang/Iterable;)V
	public fun addProperties (Ljava/lang/Iterable;)V
	public fun addProperty (Lorg/pkl/core/ast/member/ClassProperty;)V
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Lorg/pkl/core/PClass;
	public fun force (Z)V
	public fun getAllHiddenPropertyNames ()Lorg/graalvm/collections/UnmodifiableEconomicSet;
	public fun getAllRegularPropertyNames ()Lorg/graalvm/collections/UnmodifiableEconomicSet;
	public fun getAnnotations ()Ljava/util/List;
	public fun getDeclaredMethod (Lorg/pkl/core/runtime/Identifier;)Lorg/pkl/core/ast/member/ClassMethod;
	public fun getDeclaredMethods ()Ljava/lang/Iterable;
	public fun getDeclaredProperties ()Ljava/lang/Iterable;
	public fun getDeclaredProperty (Lorg/pkl/core/runtime/Identifier;)Lorg/pkl/core/ast/member/ClassProperty;
	public fun getDisplayName ()Ljava/lang/String;
	public fun getDocComment ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getDynamicToTypedMembers ()Lorg/graalvm/collections/EconomicMap;
	public fun getHeaderSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getMapToTypedMembers ()Lorg/graalvm/collections/EconomicMap;
	public fun getMethod (Lorg/pkl/core/runtime/Identifier;)Lorg/pkl/core/ast/member/ClassMethod;
	public fun getMethodMirrors ()Lorg/pkl/core/runtime/VmMap;
	public fun getMethods ()Ljava/lang/Iterable;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getModifierMirrors ()Lorg/pkl/core/runtime/VmSet;
	public fun getModule ()Lorg/pkl/core/runtime/VmTyped;
	public fun getModuleMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getModuleName ()Ljava/lang/String;
	public fun getPClassInfo ()Lorg/pkl/core/PClassInfo;
	public fun getProperty (Lorg/pkl/core/runtime/Identifier;)Lorg/pkl/core/ast/member/ClassProperty;
	public fun getPropertyMirrors ()Lorg/pkl/core/runtime/VmMap;
	public fun getPrototype ()Lorg/pkl/core/runtime/VmTyped;
	public fun getQualifiedName ()Ljava/lang/String;
	public fun getSimpleName ()Ljava/lang/String;
	public fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getSuperclass ()Lorg/pkl/core/runtime/VmClass;
	public fun getSuperclassMirror ()Lorg/pkl/core/runtime/VmValue;
	public fun getSupertypeMirror ()Lorg/pkl/core/runtime/VmValue;
	public fun getTypeParameterCount ()I
	public fun getTypeParameterMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getTypedToDynamicMembers ()Lorg/graalvm/collections/EconomicMap;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hasDeclaredMethod (Lorg/pkl/core/runtime/Identifier;)Z
	public fun hasProperty (Lorg/pkl/core/runtime/Identifier;)Z
	public fun hashCode ()I
	public fun initSupertype (Lorg/pkl/core/ast/type/TypeNode;Lorg/pkl/core/runtime/VmClass;)V
	public fun isAbstract ()Z
	public fun isClassClass ()Z
	public fun isClosed ()Z
	public fun isCollectionClass ()Z
	public fun isDynamicClass ()Z
	public fun isExternal ()Z
	public fun isFunctionClass ()Z
	public fun isFunctionNClass ()Z
	public fun isHiddenProperty (Ljava/lang/Object;)Z
	public fun isInstantiable ()Z
	public fun isListClass ()Z
	public fun isListingClass ()Z
	public fun isMapClass ()Z
	public fun isMappingClass ()Z
	public fun isModuleClass ()Z
	public fun isNullClass ()Z
	public fun isOpen ()Z
	public fun isPairClass ()Z
	public fun isSetClass ()Z
	public fun isSubclassOf (Lorg/pkl/core/runtime/VmClass;)Z
	public fun isSuperclassOf (Lorg/pkl/core/runtime/VmClass;)Z
	public fun isVarArgsClass ()Z
	public fun notifyInitialized ()V
	public fun toString ()Ljava/lang/String;
	public fun visitMethodDefsTopDown (Ljava/util/function/Consumer;)V
}

public abstract class org/pkl/core/runtime/VmCollection : org/pkl/core/runtime/VmValue, java/lang/Iterable {
	public fun <init> ()V
	public abstract fun add (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmCollection;
	public abstract fun builder ()Lorg/pkl/core/runtime/VmCollection$Builder;
	public final fun checkLengthOne ()V
	public final fun checkNonEmpty ()V
	protected static fun checkPositive (J)V
	public abstract fun concatenate (Lorg/pkl/core/runtime/VmCollection;)Lorg/pkl/core/runtime/VmCollection;
	public final fun endsWith (Lorg/pkl/core/runtime/VmCollection;)Z
	public final fun flatten ()Lorg/pkl/core/runtime/VmCollection;
	public abstract fun getLength ()I
	public abstract fun isEmpty ()Z
	public abstract fun isLengthOne ()Z
	public fun isSequence ()Z
	public final fun join (Ljava/lang/String;)Ljava/lang/String;
	public final fun replaceRange (JJLorg/pkl/core/runtime/VmCollection;)Lorg/pkl/core/runtime/VmList;
	public final fun replaceRangeOrNull (JJLorg/pkl/core/runtime/VmCollection;)Ljava/lang/Object;
	public abstract fun reverseIterator ()Ljava/util/Iterator;
	public final fun startsWith (Lorg/pkl/core/runtime/VmCollection;)Z
	public final fun toString ()Ljava/lang/String;
	public final fun zip (Lorg/pkl/core/runtime/VmCollection;)Lorg/pkl/core/runtime/VmCollection;
}

public abstract interface class org/pkl/core/runtime/VmCollection$Builder {
	public abstract fun add (Ljava/lang/Object;)V
	public abstract fun addAll (Ljava/lang/Iterable;)V
	public abstract fun build ()Lorg/pkl/core/runtime/VmCollection;
}

public final class org/pkl/core/runtime/VmContext {
	public fun <init> ()V
	public static fun get (Lcom/oracle/truffle/api/nodes/Node;)Lorg/pkl/core/runtime/VmContext;
	public fun getEnvironmentVariables ()Ljava/util/Map;
	public fun getExternalProperties ()Ljava/util/Map;
	public fun getFrameTransformer ()Lorg/pkl/core/StackFrameTransformer;
	public fun getHttpClient ()Lorg/pkl/core/http/HttpClient;
	public fun getLogger ()Lorg/pkl/core/Logger;
	public fun getModuleCache ()Lorg/pkl/core/runtime/ModuleCache;
	public fun getModuleCacheDir ()Ljava/nio/file/Path;
	public fun getModuleResolver ()Lorg/pkl/core/runtime/ModuleResolver;
	public fun getPackageResolver ()Lorg/pkl/core/packages/PackageResolver;
	public fun getProjectDependenciesManager ()Lorg/pkl/core/module/ProjectDependenciesManager;
	public fun getResourceManager ()Lorg/pkl/core/runtime/ResourceManager;
	public fun getSecurityManager ()Lorg/pkl/core/SecurityManager;
	public fun initialize (Lorg/pkl/core/runtime/VmContext$Holder;)V
}

public final class org/pkl/core/runtime/VmContext$Holder {
	public fun <init> (Lorg/pkl/core/StackFrameTransformer;Lorg/pkl/core/SecurityManager;Lorg/pkl/core/http/HttpClient;Lorg/pkl/core/runtime/ModuleResolver;Lorg/pkl/core/runtime/ResourceManager;Lorg/pkl/core/Logger;Ljava/util/Map;Ljava/util/Map;Ljava/nio/file/Path;Ljava/lang/String;Lorg/pkl/core/packages/PackageResolver;Lorg/pkl/core/module/ProjectDependenciesManager;)V
}

public final class org/pkl/core/runtime/VmDataSize : org/pkl/core/runtime/VmValue, java/lang/Comparable {
	public fun <init> (DLorg/pkl/core/DataSizeUnit;)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public fun add (Lorg/pkl/core/runtime/VmDataSize;)Lorg/pkl/core/runtime/VmDataSize;
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Lorg/pkl/core/runtime/VmDataSize;)I
	public fun convertTo (Lorg/pkl/core/DataSizeUnit;)Lorg/pkl/core/runtime/VmDataSize;
	public fun divide (D)Lorg/pkl/core/runtime/VmDataSize;
	public fun divide (Lorg/pkl/core/runtime/VmDataSize;)D
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Lorg/pkl/core/Value;
	public fun force (Z)V
	public fun getUnit ()Lorg/pkl/core/DataSizeUnit;
	public fun getValue ()D
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public fun multiply (D)Lorg/pkl/core/runtime/VmDataSize;
	public fun pow (D)Lorg/pkl/core/runtime/VmDataSize;
	public fun remainder (D)Lorg/pkl/core/runtime/VmDataSize;
	public fun round ()Lorg/pkl/core/runtime/VmDataSize;
	public fun subtract (Lorg/pkl/core/runtime/VmDataSize;)Lorg/pkl/core/runtime/VmDataSize;
	public fun toString ()Ljava/lang/String;
	public static fun toUnit (Lorg/pkl/core/runtime/Identifier;)Lorg/pkl/core/DataSizeUnit;
}

public final class org/pkl/core/runtime/VmDuration : org/pkl/core/runtime/VmValue, java/lang/Comparable {
	public fun <init> (DLorg/pkl/core/DurationUnit;)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public fun add (Lorg/pkl/core/runtime/VmDuration;)Lorg/pkl/core/runtime/VmDuration;
	public synthetic fun compareTo (Ljava/lang/Object;)I
	public fun compareTo (Lorg/pkl/core/runtime/VmDuration;)I
	public fun convertTo (Lorg/pkl/core/DurationUnit;)Lorg/pkl/core/runtime/VmDuration;
	public fun divide (D)Lorg/pkl/core/runtime/VmDuration;
	public fun divide (Lorg/pkl/core/runtime/VmDuration;)D
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Lorg/pkl/core/Value;
	public fun force (Z)V
	public fun getUnit ()Lorg/pkl/core/DurationUnit;
	public fun getValue ()D
	public fun getValue (Lorg/pkl/core/DurationUnit;)D
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public fun multiply (D)Lorg/pkl/core/runtime/VmDuration;
	public fun pow (D)Lorg/pkl/core/runtime/VmDuration;
	public fun remainder (D)Lorg/pkl/core/runtime/VmDuration;
	public fun round ()Lorg/pkl/core/runtime/VmDuration;
	public fun subtract (Lorg/pkl/core/runtime/VmDuration;)Lorg/pkl/core/runtime/VmDuration;
	public fun toString ()Ljava/lang/String;
	public static fun toUnit (Lorg/pkl/core/runtime/Identifier;)Lorg/pkl/core/DurationUnit;
}

public final class org/pkl/core/runtime/VmDynamic : org/pkl/core/runtime/VmObject {
	public fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;Lorg/pkl/core/runtime/VmObject;Lorg/graalvm/collections/UnmodifiableEconomicMap;I)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public static fun empty ()Lorg/pkl/core/runtime/VmDynamic;
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Lorg/pkl/core/PObject;
	public fun getLength ()I
	public fun getRegularMemberCount ()I
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hasElements ()Z
	public fun hashCode ()I
	public fun isSequence ()Z
}

public class org/pkl/core/runtime/VmEvalException : org/pkl/core/runtime/VmException {
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;Z[Ljava/lang/Object;Ljava/util/List;Lcom/oracle/truffle/api/nodes/Node;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
}

public abstract class org/pkl/core/runtime/VmException : com/oracle/truffle/api/exception/AbstractTruffleException {
	protected field hint Ljava/lang/String;
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;Z[Ljava/lang/Object;Ljava/util/List;Lcom/oracle/truffle/api/nodes/Node;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V
	public fun getHint ()Ljava/lang/String;
	public final fun getInsertedStackFrames ()Ljava/util/Map;
	public final fun getMemberName ()Ljava/lang/String;
	public final fun getMessageArguments ()[Ljava/lang/Object;
	public final fun getProgramValues ()Ljava/util/List;
	public final fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public final fun isExternalMessage ()Z
	public fun setHint (Ljava/lang/String;)V
	public fun toPklException (Lorg/pkl/core/StackFrameTransformer;Z)Lorg/pkl/core/PklException;
}

public final class org/pkl/core/runtime/VmException$Kind : java/lang/Enum {
	public static final field BUG Lorg/pkl/core/runtime/VmException$Kind;
	public static final field EVAL_ERROR Lorg/pkl/core/runtime/VmException$Kind;
	public static final field UNDEFINED_VALUE Lorg/pkl/core/runtime/VmException$Kind;
	public static final field WRAPPED Lorg/pkl/core/runtime/VmException$Kind;
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/runtime/VmException$Kind;
	public static fun values ()[Lorg/pkl/core/runtime/VmException$Kind;
}

public final class org/pkl/core/runtime/VmException$ProgramValue : java/lang/Record {
	public fun <init> (Ljava/lang/String;Ljava/lang/Object;)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun name ()Ljava/lang/String;
	public fun toString ()Ljava/lang/String;
	public fun value ()Ljava/lang/Object;
}

public final class org/pkl/core/runtime/VmExceptionBuilder {
	public fun <init> ()V
	public fun adhocEvalError (Ljava/lang/String;[Ljava/lang/Object;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun bug (Ljava/lang/String;[Ljava/lang/Object;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun build ()Lorg/pkl/core/runtime/VmException;
	public fun cannotFindKey (Lorg/pkl/core/runtime/VmMap;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun cannotFindMember (Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun cannotFindMethod (Lorg/pkl/core/runtime/VmObjectLike;Lorg/pkl/core/runtime/Identifier;IZ)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun cannotFindProperty (Lorg/pkl/core/runtime/VmObjectLike;Lorg/pkl/core/runtime/Identifier;ZZ)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun evalError (Ljava/lang/String;[Ljava/lang/Object;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun typeMismatch (Ljava/lang/Object;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun typeMismatch (Ljava/lang/Object;Lorg/pkl/core/runtime/VmClass;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun undefinedPropertyValue (Lorg/pkl/core/runtime/Identifier;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun undefinedValue ()Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun unreachableCode ()Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun withCause (Ljava/lang/Throwable;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun withHint (Ljava/lang/String;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun withInsertedStackFrames (Ljava/util/Map;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun withLocation (Lcom/oracle/truffle/api/nodes/Node;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun withMemberName (Ljava/lang/String;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun withOptionalLocation (Lcom/oracle/truffle/api/nodes/Node;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun withProgramValue (Ljava/lang/String;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun withSourceSection (Lcom/oracle/truffle/api/source/SourceSection;)Lorg/pkl/core/runtime/VmExceptionBuilder;
	public fun wrapping (Lorg/pkl/core/runtime/VmException;)Lorg/pkl/core/runtime/VmExceptionBuilder;
}

public class org/pkl/core/runtime/VmExceptionBuilder$MultilineValue {
	public static fun of (Ljava/lang/Iterable;)Ljava/lang/Object;
	public static fun of (Ljava/util/stream/Stream;)Ljava/lang/Object;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/runtime/VmExceptionRenderer {
	public fun <init> (Lorg/pkl/core/runtime/StackTraceRenderer;Z)V
	public fun render (Lorg/pkl/core/runtime/VmException;)Ljava/lang/String;
}

public final class org/pkl/core/runtime/VmFileDetector : java/nio/file/spi/FileTypeDetector {
	public fun <init> ()V
	public fun probeContentType (Ljava/nio/file/Path;)Ljava/lang/String;
}

public final class org/pkl/core/runtime/VmFunction : org/pkl/core/runtime/VmObjectLike {
	public fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;Ljava/lang/Object;ILorg/pkl/core/ast/PklRootNode;Ljava/lang/Object;)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public fun apply (Ljava/lang/Object;)Ljava/lang/Object;
	public fun apply (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public fun applyString (Ljava/lang/Object;)Ljava/lang/String;
	public fun copy (ILorg/pkl/core/ast/PklRootNode;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmFunction;
	public fun equals (Ljava/lang/Object;)Z
	public fun export ()Ljava/lang/Object;
	public fun force (Z)V
	public fun force (ZZ)V
	public fun forceAndIterateMemberValues (Lorg/pkl/core/runtime/VmObjectLike$ForcedMemberValueConsumer;)Z
	public fun getCachedValue (Ljava/lang/Object;)Ljava/lang/Object;
	public fun getCallTarget ()Lcom/oracle/truffle/api/RootCallTarget;
	public fun getMember (Ljava/lang/Object;)Lorg/pkl/core/ast/member/ObjectMember;
	public fun getMembers ()Lorg/graalvm/collections/UnmodifiableEconomicMap;
	public fun getParameterCount ()I
	public fun getParent ()Lorg/pkl/core/runtime/VmObjectLike;
	public fun getThisValue ()Ljava/lang/Object;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hasCachedValue (Ljava/lang/Object;)Z
	public fun hasMember (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun iterateAlreadyForcedMemberValues (Lorg/pkl/core/runtime/VmObjectLike$ForcedMemberValueConsumer;)Z
	public fun iterateMemberValues (Lorg/pkl/core/runtime/VmObjectLike$MemberValueConsumer;)Z
	public fun iterateMembers (Ljava/util/function/BiFunction;)Z
	public fun setCachedValue (Ljava/lang/Object;Ljava/lang/Object;)V
}

public class org/pkl/core/runtime/VmImportAnalyzer {
	public fun <init> ()V
	public static fun analyze ([Ljava/net/URI;Lorg/pkl/core/runtime/VmContext;)Lorg/pkl/core/ImportGraph;
}

public final class org/pkl/core/runtime/VmIntSeq : org/pkl/core/runtime/VmValue, java/lang/Iterable {
	public final field end J
	public final field last J
	public final field start J
	public final field step J
	public fun <init> (JJJ)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun export ()Ljava/lang/Object;
	public fun force (Z)V
	public fun getLength ()J
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public fun isEmpty ()Z
	public synthetic fun iterator ()Ljava/util/Iterator;
	public fun iterator ()Ljava/util/PrimitiveIterator$OfLong;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/runtime/VmLanguage : com/oracle/truffle/api/TruffleLanguage {
	public static final field MIME_TYPE Ljava/lang/String;
	public fun <init> ()V
	public static fun get (Lcom/oracle/truffle/api/nodes/Node;)Lorg/pkl/core/runtime/VmLanguage;
	public fun loadModule (Lorg/pkl/core/module/ModuleKey;)Lorg/pkl/core/runtime/VmTyped;
	public fun loadModule (Lorg/pkl/core/module/ModuleKey;Lcom/oracle/truffle/api/nodes/Node;)Lorg/pkl/core/runtime/VmTyped;
	public fun parse (Lcom/oracle/truffle/api/TruffleLanguage$ParsingRequest;)Lcom/oracle/truffle/api/CallTarget;
}

public final class org/pkl/core/runtime/VmLanguageProvider : com/oracle/truffle/api/provider/TruffleLanguageProvider {
	public fun <init> ()V
}

public final class org/pkl/core/runtime/VmList : org/pkl/core/runtime/VmCollection {
	public static final field EMPTY Lorg/pkl/core/runtime/VmList;
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public synthetic fun add (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmCollection;
	public fun add (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmList;
	public fun builder ()Lorg/pkl/core/runtime/VmCollection$Builder;
	public synthetic fun concatenate (Lorg/pkl/core/runtime/VmCollection;)Lorg/pkl/core/runtime/VmCollection;
	public fun concatenate (Lorg/pkl/core/runtime/VmCollection;)Lorg/pkl/core/runtime/VmList;
	public fun contains (Ljava/lang/Object;)Z
	public static fun create (Ljava/lang/Iterable;)Lorg/pkl/core/runtime/VmList;
	public static fun create ([Ljava/lang/Object;)Lorg/pkl/core/runtime/VmList;
	public static fun create ([Ljava/lang/Object;I)Lorg/pkl/core/runtime/VmList;
	public static fun createFromConstantNodes ([Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/runtime/VmList;
	public fun drop (J)Lorg/pkl/core/runtime/VmList;
	public fun dropLast (J)Lorg/pkl/core/runtime/VmList;
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Ljava/util/List;
	public fun force (Z)V
	public fun get (J)Ljava/lang/Object;
	public fun getFirst ()Ljava/lang/Object;
	public fun getFirstOrNull ()Ljava/lang/Object;
	public fun getLast ()Ljava/lang/Object;
	public fun getLastIndex ()J
	public fun getLastOrNull ()Ljava/lang/Object;
	public fun getLength ()I
	public fun getOrNull (J)Ljava/lang/Object;
	public fun getRest ()Lorg/pkl/core/runtime/VmList;
	public fun getRestOrNull ()Ljava/lang/Object;
	public fun getSingle ()Ljava/lang/Object;
	public fun getSingleOrNull ()Ljava/lang/Object;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public fun indexOf (Ljava/lang/Object;)J
	public fun indexOfOrNull (Ljava/lang/Object;)Ljava/lang/Object;
	public fun isEmpty ()Z
	public fun isLengthOne ()Z
	public fun iterator ()Ljava/util/Iterator;
	public fun lastIndexOf (Ljava/lang/Object;)J
	public fun lastIndexOfOrNull (Ljava/lang/Object;)Ljava/lang/Object;
	public static fun of (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmList;
	public static fun of (Ljava/lang/Object;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmList;
	public fun repeat (J)Lorg/pkl/core/runtime/VmList;
	public fun replace (JLjava/lang/Object;)Lorg/pkl/core/runtime/VmList;
	public fun replaceOrNull (JLjava/lang/Object;)Ljava/lang/Object;
	public fun reverse ()Lorg/pkl/core/runtime/VmList;
	public fun reverseIterator ()Ljava/util/Iterator;
	public fun split (J)Lorg/pkl/core/runtime/VmPair;
	public fun splitOrNull (J)Ljava/lang/Object;
	public fun subList (JJ)Lorg/pkl/core/runtime/VmList;
	public fun subListOrNull (JJ)Ljava/lang/Object;
	public fun take (J)Lorg/pkl/core/runtime/VmList;
	public fun takeLast (J)Lorg/pkl/core/runtime/VmList;
	public fun toArray ()[Ljava/lang/Object;
	public fun toDynamic ()Lorg/pkl/core/runtime/VmDynamic;
	public fun toList ()Lorg/pkl/core/runtime/VmList;
	public fun toListing ()Lorg/pkl/core/runtime/VmListing;
	public fun toSet ()Lorg/pkl/core/runtime/VmSet;
}

public final class org/pkl/core/runtime/VmListing : org/pkl/core/runtime/VmListingOrMapping {
	public fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;Lorg/pkl/core/runtime/VmObject;Lorg/graalvm/collections/UnmodifiableEconomicMap;I)V
	public fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;Lorg/pkl/core/runtime/VmObject;Lorg/graalvm/collections/UnmodifiableEconomicMap;ILorg/pkl/core/ast/member/ListingOrMappingTypeCastNode;Ljava/lang/Object;Lorg/pkl/core/runtime/VmObjectLike;)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public static fun empty ()Lorg/pkl/core/runtime/VmListing;
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Ljava/util/List;
	public fun getLength ()I
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public static fun isDefaultProperty (Ljava/lang/Object;)Z
	public fun isEmpty ()Z
	public fun isSequence ()Z
}

public abstract class org/pkl/core/runtime/VmListingOrMapping : org/pkl/core/runtime/VmObject {
	public fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;Lorg/pkl/core/runtime/VmObject;Lorg/graalvm/collections/UnmodifiableEconomicMap;)V
	public fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;Lorg/pkl/core/runtime/VmObject;Lorg/graalvm/collections/UnmodifiableEconomicMap;Lorg/pkl/core/ast/member/ListingOrMappingTypeCastNode;Ljava/lang/Object;Lorg/pkl/core/runtime/VmObjectLike;)V
	public final fun executeTypeCasts (Ljava/lang/Object;Lorg/pkl/core/runtime/VmObjectLike;Lcom/oracle/truffle/api/nodes/IndirectCallNode;Lorg/pkl/core/ast/member/ObjectMember;Lorg/pkl/core/ast/member/ListingOrMappingTypeCastNode;)Ljava/lang/Object;
	public final fun getCachedValue (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun isValueTypeKnownSubtypeOf (Lorg/pkl/core/ast/type/TypeNode;)Z
}

public final class org/pkl/core/runtime/VmMap : org/pkl/core/runtime/VmValue, java/lang/Iterable {
	public static final field EMPTY Lorg/pkl/core/runtime/VmMap;
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public static fun builder ()Lorg/pkl/core/runtime/VmMap$Builder;
	public static fun builder (Lorg/pkl/core/runtime/VmMap;)Lorg/pkl/core/runtime/VmMap$Builder;
	public fun concatenate (Lorg/pkl/core/runtime/VmMap;)Lorg/pkl/core/runtime/VmMap;
	public fun containsKey (Ljava/lang/Object;)Z
	public fun containsValue (Ljava/lang/Object;)Z
	public static fun create (Lorg/organicdesign/fp/collections/ImMap;Lorg/organicdesign/fp/collections/RrbTree$ImRrbt;)Lorg/pkl/core/runtime/VmMap;
	public static fun createFromConstantNodes ([Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/runtime/VmMap;
	public fun entries ()Lorg/pkl/core/runtime/VmList;
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Ljava/util/Map;
	public fun force (Z)V
	public fun getLength ()I
	public fun getOrNull (Ljava/lang/Object;)Ljava/lang/Object;
	public fun getOrVmNull (Ljava/lang/Object;)Ljava/lang/Object;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public fun isEmpty ()Z
	public fun iterator ()Ljava/util/Iterator;
	public fun keys ()Lorg/pkl/core/runtime/VmSet;
	public fun put (Ljava/lang/Object;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmMap;
	public fun remove (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmMap;
	public fun toDynamic ()Lorg/pkl/core/runtime/VmDynamic;
	public fun toMapping ()Lorg/pkl/core/runtime/VmMapping;
	public fun toString ()Ljava/lang/String;
	public fun values ()Lorg/pkl/core/runtime/VmList;
}

public final class org/pkl/core/runtime/VmMap$Builder {
	public fun add (Ljava/lang/Object;Ljava/lang/Object;)V
	public fun build ()Lorg/pkl/core/runtime/VmMap;
	public fun get (Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/runtime/VmMapping : org/pkl/core/runtime/VmListingOrMapping {
	public fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;Lorg/pkl/core/runtime/VmObject;Lorg/graalvm/collections/UnmodifiableEconomicMap;)V
	public fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;Lorg/pkl/core/runtime/VmObject;Lorg/graalvm/collections/UnmodifiableEconomicMap;Lorg/pkl/core/ast/member/ListingOrMappingTypeCastNode;Ljava/lang/Object;Lorg/pkl/core/runtime/VmObjectLike;)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public static fun empty ()Lorg/pkl/core/runtime/VmMapping;
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Ljava/util/Map;
	public fun getAllKeys ()Lorg/pkl/core/runtime/VmSet;
	public fun getEntryCount ()I
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public static fun isDefaultProperty (Ljava/lang/Object;)Z
}

public final class org/pkl/core/runtime/VmNull : org/pkl/core/runtime/VmValue {
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun export ()Ljava/lang/Object;
	public fun force (Z)V
	public fun getDefaultValue ()Ljava/lang/Object;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public static fun lift (Ljava/lang/Object;)Ljava/lang/Object;
	public fun toString ()Ljava/lang/String;
	public static fun unwrap (Ljava/lang/Object;)Ljava/lang/Object;
	public static fun withDefault (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmNull;
	public static fun withoutDefault ()Lorg/pkl/core/runtime/VmNull;
}

public abstract class org/pkl/core/runtime/VmObject : org/pkl/core/runtime/VmObjectLike {
	protected field cachedHash I
	protected final field cachedValues Lorg/graalvm/collections/EconomicMap;
	protected final field members Lorg/graalvm/collections/UnmodifiableEconomicMap;
	protected field parent Lorg/pkl/core/runtime/VmObject;
	public fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;Lorg/pkl/core/runtime/VmObject;Lorg/graalvm/collections/UnmodifiableEconomicMap;)V
	public fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;Lorg/pkl/core/runtime/VmObject;Lorg/graalvm/collections/UnmodifiableEconomicMap;Lorg/graalvm/collections/EconomicMap;)V
	protected final fun exportMembers ()Ljava/util/Map;
	public final fun force (Z)V
	public final fun force (ZZ)V
	public final fun forceAndIterateMemberValues (Lorg/pkl/core/runtime/VmObjectLike$ForcedMemberValueConsumer;)Z
	public fun getCachedValue (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun getMember (Ljava/lang/Object;)Lorg/pkl/core/ast/member/ObjectMember;
	public final fun getMembers ()Lorg/graalvm/collections/UnmodifiableEconomicMap;
	public fun getParent ()Lorg/pkl/core/runtime/VmObject;
	public synthetic fun getParent ()Lorg/pkl/core/runtime/VmObjectLike;
	public final fun hasCachedValue (Ljava/lang/Object;)Z
	public final fun hasMember (Ljava/lang/Object;)Z
	public final fun iterateAlreadyForcedMemberValues (Lorg/pkl/core/runtime/VmObjectLike$ForcedMemberValueConsumer;)Z
	public final fun iterateMemberValues (Lorg/pkl/core/runtime/VmObjectLike$MemberValueConsumer;)Z
	public final fun iterateMembers (Ljava/util/function/BiFunction;)Z
	public final fun lateInitParent (Lorg/pkl/core/runtime/VmObject;)V
	public final fun setCachedValue (Ljava/lang/Object;Ljava/lang/Object;)V
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/runtime/VmObjectBuilder {
	public fun <init> ()V
	public fun <init> (I)V
	public fun addElement (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmObjectBuilder;
	public fun addEntry (Ljava/lang/Object;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmObjectBuilder;
	public fun addEntry (Ljava/lang/Object;Lorg/pkl/core/ast/member/SharedMemberNode;)Lorg/pkl/core/runtime/VmObjectBuilder;
	public fun addProperty (Lorg/pkl/core/runtime/Identifier;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmObjectBuilder;
	public fun toDynamic ()Lorg/pkl/core/runtime/VmDynamic;
	public fun toListing ()Lorg/pkl/core/runtime/VmListing;
	public fun toMapping ()Lorg/pkl/core/runtime/VmMapping;
	public fun toMapping (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmMapping;
}

public abstract class org/pkl/core/runtime/VmObjectLike : org/pkl/core/runtime/VmValue {
	protected final field enclosingFrame Lcom/oracle/truffle/api/frame/MaterializedFrame;
	protected field extraStorage Ljava/lang/Object;
	protected fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;)V
	public abstract fun export ()Ljava/lang/Object;
	public abstract fun force (ZZ)V
	public abstract fun forceAndIterateMemberValues (Lorg/pkl/core/runtime/VmObjectLike$ForcedMemberValueConsumer;)Z
	public abstract fun getCachedValue (Ljava/lang/Object;)Ljava/lang/Object;
	public final fun getEnclosingFrame ()Lcom/oracle/truffle/api/frame/MaterializedFrame;
	public final fun getEnclosingOwner ()Lorg/pkl/core/runtime/VmObjectLike;
	public final fun getEnclosingReceiver ()Ljava/lang/Object;
	public fun getExtraStorage ()Ljava/lang/Object;
	public abstract fun getMember (Ljava/lang/Object;)Lorg/pkl/core/ast/member/ObjectMember;
	public abstract fun getMembers ()Lorg/graalvm/collections/UnmodifiableEconomicMap;
	public abstract fun getParent ()Lorg/pkl/core/runtime/VmObjectLike;
	public abstract fun hasCachedValue (Ljava/lang/Object;)Z
	public final fun hasExtraStorage ()Z
	public abstract fun hasMember (Ljava/lang/Object;)Z
	public fun isModuleObject ()Z
	public abstract fun iterateAlreadyForcedMemberValues (Lorg/pkl/core/runtime/VmObjectLike$ForcedMemberValueConsumer;)Z
	public abstract fun iterateMemberValues (Lorg/pkl/core/runtime/VmObjectLike$MemberValueConsumer;)Z
	public abstract fun iterateMembers (Ljava/util/function/BiFunction;)Z
	public abstract fun setCachedValue (Ljava/lang/Object;Ljava/lang/Object;)V
	public final fun setExtraStorage (Ljava/lang/Object;)V
}

public abstract interface class org/pkl/core/runtime/VmObjectLike$ForcedMemberValueConsumer {
	public abstract fun accept (Ljava/lang/Object;Lorg/pkl/core/ast/member/ObjectMember;Ljava/lang/Object;)Z
}

public abstract interface class org/pkl/core/runtime/VmObjectLike$MemberValueConsumer {
	public abstract fun accept (Ljava/lang/Object;Lorg/pkl/core/ast/member/ObjectMember;Ljava/lang/Object;)Z
}

public final class org/pkl/core/runtime/VmPair : org/pkl/core/runtime/VmValue, java/lang/Iterable {
	public fun <init> (Ljava/lang/Object;Ljava/lang/Object;)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun export ()Ljava/lang/Object;
	public fun force (Z)V
	public fun getFirst ()Ljava/lang/Object;
	public fun getSecond ()Ljava/lang/Object;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public fun iterator ()Ljava/util/Iterator;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/runtime/VmRegex : org/pkl/core/runtime/VmValue {
	public fun <init> (Ljava/util/regex/Pattern;)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Ljava/util/regex/Pattern;
	public fun force (Z)V
	public fun getPattern ()Ljava/util/regex/Pattern;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public fun matcher (Ljava/lang/String;)Ljava/util/regex/Matcher;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/runtime/VmSafeMath {
	public static fun abs (J)J
	public static fun add (DD)D
	public static fun add (JJ)J
	public static fun decrement (J)J
	public static fun increment (J)J
	public static fun multiply (DD)D
	public static fun multiply (JJ)J
	public static fun negate (D)D
	public static fun negate (J)J
	public static fun pow (JJ)J
	public static fun remainder (DD)D
	public static fun remainder (JJ)J
	public static fun toInt (DLcom/oracle/truffle/api/nodes/Node;)J
	public static fun toInt32 (J)I
	public static fun truncate (D)D
	public static fun truncatingDivide (JJ)J
}

public final class org/pkl/core/runtime/VmSet : org/pkl/core/runtime/VmCollection {
	public static final field EMPTY Lorg/pkl/core/runtime/VmSet;
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public synthetic fun add (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmCollection;
	public fun add (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmSet;
	public fun builder ()Lorg/pkl/core/runtime/VmCollection$Builder;
	public static fun builder (Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmCollection$Builder;
	public synthetic fun concatenate (Lorg/pkl/core/runtime/VmCollection;)Lorg/pkl/core/runtime/VmCollection;
	public fun concatenate (Lorg/pkl/core/runtime/VmCollection;)Lorg/pkl/core/runtime/VmSet;
	public fun contains (Ljava/lang/Object;)Z
	public static fun create (Ljava/lang/Iterable;)Lorg/pkl/core/runtime/VmSet;
	public static fun createFromConstantNodes ([Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/runtime/VmSet;
	public fun drop (J)Lorg/pkl/core/runtime/VmSet;
	public fun dropLast (J)Lorg/pkl/core/runtime/VmSet;
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Ljava/util/Set;
	public fun force (Z)V
	public fun getFirst ()Ljava/lang/Object;
	public fun getFirstOrNull ()Ljava/lang/Object;
	public fun getLast ()Ljava/lang/Object;
	public fun getLastOrNull ()Ljava/lang/Object;
	public fun getLength ()I
	public fun getRest ()Lorg/pkl/core/runtime/VmSet;
	public fun getRestOrNull ()Ljava/lang/Object;
	public fun getSingle ()Ljava/lang/Object;
	public fun getSingleOrNull ()Ljava/lang/Object;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public fun isEmpty ()Z
	public fun isLengthOne ()Z
	public fun iterator ()Ljava/util/Iterator;
	public static fun of (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmSet;
	public fun repeat (J)Lorg/pkl/core/runtime/VmList;
	public fun reverse ()Lorg/pkl/core/runtime/VmList;
	public fun reverseIterator ()Ljava/util/Iterator;
	public fun split (J)Lorg/pkl/core/runtime/VmPair;
	public fun splitOrNull (J)Ljava/lang/Object;
	public fun take (J)Lorg/pkl/core/runtime/VmSet;
	public fun takeLast (J)Lorg/pkl/core/runtime/VmSet;
	public fun toArray ()[Ljava/lang/Object;
	public fun toDynamic ()Lorg/pkl/core/runtime/VmDynamic;
	public fun toList ()Lorg/pkl/core/runtime/VmList;
	public fun toListing ()Lorg/pkl/core/runtime/VmListing;
	public fun toSet ()Lorg/pkl/core/runtime/VmSet;
}

public final class org/pkl/core/runtime/VmStackOverflowException : org/pkl/core/runtime/VmException {
	public fun <init> (Ljava/lang/StackOverflowError;)V
}

public final class org/pkl/core/runtime/VmTypeAlias : org/pkl/core/runtime/VmValue {
	public fun <init> (Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;ILjava/util/List;Ljava/lang/String;Lorg/pkl/core/runtime/VmTyped;Ljava/lang/String;Ljava/util/List;Lcom/oracle/truffle/api/frame/MaterializedFrame;)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Lorg/pkl/core/TypeAlias;
	public fun force (Z)V
	public fun getAnnotations ()Ljava/util/List;
	public fun getBaseTypeSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getConstraintSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getDocComment ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getEnclosingFrame ()Lcom/oracle/truffle/api/frame/Frame;
	public fun getHeaderSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun getMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getModifierMirrors ()Lorg/pkl/core/runtime/VmSet;
	public fun getModuleMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getModuleName ()Ljava/lang/String;
	public fun getQualifiedName ()Ljava/lang/String;
	public fun getSimpleName ()Ljava/lang/String;
	public fun getTypeMirror ()Lorg/pkl/core/runtime/VmTyped;
	public fun getTypeNode ()Lorg/pkl/core/ast/type/TypeNode;
	public fun getTypeParameterCount ()I
	public fun getTypeParameterMirrors ()Lorg/pkl/core/runtime/VmList;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public fun initTypeCheckNode (Lorg/pkl/core/ast/type/TypeNode;)V
	public fun instantiate ([Lorg/pkl/core/ast/type/TypeNode;)Lorg/pkl/core/ast/type/TypeNode;
	public fun isInitialized ()Z
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/runtime/VmTyped : org/pkl/core/runtime/VmObject {
	public fun <init> (Lcom/oracle/truffle/api/frame/MaterializedFrame;Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmClass;Lorg/graalvm/collections/UnmodifiableEconomicMap;)V
	public fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public fun addProperties (Lorg/graalvm/collections/UnmodifiableEconomicMap;)V
	public fun addProperty (Lorg/pkl/core/ast/member/ObjectMember;)V
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun export ()Ljava/lang/Object;
	public fun export ()Lorg/pkl/core/Composite;
	public fun getClassMirrors ()Lorg/pkl/core/runtime/VmMap;
	public fun getImports ()Lorg/pkl/core/runtime/VmMap;
	public fun getModuleInfo ()Lorg/pkl/core/runtime/ModuleInfo;
	public fun getModuleMirror ()Lorg/pkl/core/runtime/VmTyped;
	public synthetic fun getParent ()Lorg/pkl/core/runtime/VmObject;
	public synthetic fun getParent ()Lorg/pkl/core/runtime/VmObjectLike;
	public fun getParent ()Lorg/pkl/core/runtime/VmTyped;
	public fun getSupermoduleMirror ()Lorg/pkl/core/runtime/VmValue;
	public fun getTypeAliasMirrors ()Lorg/pkl/core/runtime/VmMap;
	public fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun hashCode ()I
	public fun isModuleObject ()Z
	public fun isPrototype ()Z
	public fun lateInitVmClass (Lorg/pkl/core/runtime/VmClass;)V
}

public class org/pkl/core/runtime/VmTypes {
	public fun <init> ()V
}

public final class org/pkl/core/runtime/VmTypesGen : org/pkl/core/runtime/VmTypes {
	public static fun asBoolean (Ljava/lang/Object;)Z
	public static fun asDouble (Ljava/lang/Object;)D
	public static fun asLong (Ljava/lang/Object;)J
	public static fun asString (Ljava/lang/Object;)Ljava/lang/String;
	public static fun asVmClass (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmClass;
	public static fun asVmCollection (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmCollection;
	public static fun asVmDataSize (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmDataSize;
	public static fun asVmDuration (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmDuration;
	public static fun asVmDynamic (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmDynamic;
	public static fun asVmFunction (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmFunction;
	public static fun asVmIntSeq (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmIntSeq;
	public static fun asVmList (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmList;
	public static fun asVmListing (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmListing;
	public static fun asVmMap (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmMap;
	public static fun asVmMapping (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmMapping;
	public static fun asVmNull (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmNull;
	public static fun asVmObjectLike (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmObjectLike;
	public static fun asVmPair (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmPair;
	public static fun asVmRegex (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmRegex;
	public static fun asVmSet (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmSet;
	public static fun asVmTypeAlias (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmTypeAlias;
	public static fun asVmTyped (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmTyped;
	public static fun asVmValue (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmValue;
	public static fun expectBoolean (Ljava/lang/Object;)Z
	public static fun expectDouble (Ljava/lang/Object;)D
	public static fun expectLong (Ljava/lang/Object;)J
	public static fun expectString (Ljava/lang/Object;)Ljava/lang/String;
	public static fun expectVmClass (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmClass;
	public static fun expectVmCollection (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmCollection;
	public static fun expectVmDataSize (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmDataSize;
	public static fun expectVmDuration (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmDuration;
	public static fun expectVmDynamic (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmDynamic;
	public static fun expectVmFunction (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmFunction;
	public static fun expectVmIntSeq (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmIntSeq;
	public static fun expectVmList (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmList;
	public static fun expectVmListing (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmListing;
	public static fun expectVmMap (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmMap;
	public static fun expectVmMapping (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmMapping;
	public static fun expectVmNull (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmNull;
	public static fun expectVmObjectLike (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmObjectLike;
	public static fun expectVmPair (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmPair;
	public static fun expectVmRegex (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmRegex;
	public static fun expectVmSet (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmSet;
	public static fun expectVmTypeAlias (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmTypeAlias;
	public static fun expectVmTyped (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmTyped;
	public static fun expectVmValue (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmValue;
	public static fun isBoolean (Ljava/lang/Object;)Z
	public static fun isDouble (Ljava/lang/Object;)Z
	public static fun isLong (Ljava/lang/Object;)Z
	public static fun isString (Ljava/lang/Object;)Z
	public static fun isVmClass (Ljava/lang/Object;)Z
	public static fun isVmCollection (Ljava/lang/Object;)Z
	public static fun isVmDataSize (Ljava/lang/Object;)Z
	public static fun isVmDuration (Ljava/lang/Object;)Z
	public static fun isVmDynamic (Ljava/lang/Object;)Z
	public static fun isVmFunction (Ljava/lang/Object;)Z
	public static fun isVmIntSeq (Ljava/lang/Object;)Z
	public static fun isVmList (Ljava/lang/Object;)Z
	public static fun isVmListing (Ljava/lang/Object;)Z
	public static fun isVmMap (Ljava/lang/Object;)Z
	public static fun isVmMapping (Ljava/lang/Object;)Z
	public static fun isVmNull (Ljava/lang/Object;)Z
	public static fun isVmObjectLike (Ljava/lang/Object;)Z
	public static fun isVmPair (Ljava/lang/Object;)Z
	public static fun isVmRegex (Ljava/lang/Object;)Z
	public static fun isVmSet (Ljava/lang/Object;)Z
	public static fun isVmTypeAlias (Ljava/lang/Object;)Z
	public static fun isVmTyped (Ljava/lang/Object;)Z
	public static fun isVmValue (Ljava/lang/Object;)Z
}

public final class org/pkl/core/runtime/VmUndefinedValueException : org/pkl/core/runtime/VmEvalException {
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;Z[Ljava/lang/Object;Ljava/util/List;Lcom/oracle/truffle/api/nodes/Node;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map;)V
	public fun fillInHint (Ljava/util/Deque;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmUndefinedValueException;
	public fun getReceiver ()Ljava/lang/Object;
}

public final class org/pkl/core/runtime/VmUtils {
	public static final field REPL_TEXT Ljava/lang/String;
	public static final field REPL_TEXT_URI Ljava/net/URI;
	public static final field SKIP_TYPECHECK_MARKER Ljava/lang/Object;
	public static fun appendToBuilder (Ljava/lang/StringBuilder;Ljava/lang/String;)V
	public static fun builderToString (Ljava/lang/StringBuilder;)Ljava/lang/String;
	public static fun checkIsInstantiable (Lorg/pkl/core/runtime/VmClass;Lcom/oracle/truffle/api/nodes/Node;)V
	public static fun checkPositive (J)V
	public static fun codePointOffsetFromEndToCharOffset (Ljava/lang/String;J)I
	public static fun codePointOffsetToCharOffset (Ljava/lang/String;J)I
	public static fun codePointOffsetToCharOffset (Ljava/lang/String;JI)I
	public static fun compilePattern (Ljava/lang/String;Lcom/oracle/truffle/api/nodes/Node;)Ljava/util/regex/Pattern;
	public static fun copyLocals (Lcom/oracle/truffle/api/frame/VirtualFrame;ILcom/oracle/truffle/api/frame/VirtualFrame;II)V
	public static fun countLeadingWhitespace (Ljava/lang/String;)I
	public static fun createBuilder ()Ljava/lang/StringBuilder;
	public static fun createContext (Ljava/lang/Runnable;)Lorg/graalvm/polyglot/Context;
	public static fun createDecimalFormat (I)Ljava/text/DecimalFormat;
	public static fun createEmptyMaterializedFrame ()Lcom/oracle/truffle/api/frame/MaterializedFrame;
	public static fun createLocalObjectProperty (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;Ljava/lang/String;Lcom/oracle/truffle/api/frame/FrameDescriptor;ILorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/type/UnresolvedTypeNode;)Lorg/pkl/core/ast/member/ObjectMember;
	public static fun createObjectProperty (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/source/SourceSection;Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/runtime/Identifier;Ljava/lang/String;Lcom/oracle/truffle/api/frame/FrameDescriptor;ILorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/member/PropertyTypeNode;)Lorg/pkl/core/ast/member/ObjectMember;
	public static fun createSource (Lorg/pkl/core/module/ModuleKey;Ljava/lang/String;)Lcom/oracle/truffle/api/source/Source;
	public static fun createStackFrame (Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;)Lorg/pkl/core/StackFrame;
	public static fun createSyntheticObjectElement (Ljava/lang/String;Ljava/lang/Object;)Lorg/pkl/core/ast/member/ObjectMember;
	public static fun createSyntheticObjectEntry (Ljava/lang/String;Ljava/lang/Object;)Lorg/pkl/core/ast/member/ObjectMember;
	public static fun createSyntheticObjectProperty (Lorg/pkl/core/runtime/Identifier;Ljava/lang/String;Ljava/lang/Object;)Lorg/pkl/core/ast/member/ObjectMember;
	public static fun createThisNode (Lcom/oracle/truffle/api/source/SourceSection;Z)Lorg/pkl/core/ast/ExpressionNode;
	public static fun doReadMember (Lorg/pkl/core/runtime/VmObjectLike;Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/Object;Lorg/pkl/core/ast/member/ObjectMember;)Ljava/lang/Object;
	public static fun doReadMember (Lorg/pkl/core/runtime/VmObjectLike;Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/Object;Lorg/pkl/core/ast/member/ObjectMember;ZLcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	public static fun evaluateAnnotations (Lcom/oracle/truffle/api/frame/VirtualFrame;[Lorg/pkl/core/ast/ExpressionNode;)Ljava/util/List;
	public static fun evaluateAnnotations (Lcom/oracle/truffle/api/frame/VirtualFrame;[Lorg/pkl/core/ast/ExpressionNode;Ljava/util/List;)V
	public static fun evaluateExpression (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/String;Lorg/pkl/core/SecurityManager;Lorg/pkl/core/runtime/ModuleResolver;)Ljava/lang/Object;
	public static fun exportAnnotations (Ljava/util/List;)Ljava/util/List;
	public static fun exportAnnotations (Ljava/util/List;Ljava/util/List;)V
	public static fun exportDocComment (Lcom/oracle/truffle/api/source/SourceSection;)Ljava/lang/String;
	public static fun findCustomThisSlot (Lcom/oracle/truffle/api/frame/VirtualFrame;)I
	public static fun findMember (Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/Object;)Lorg/pkl/core/ast/member/ObjectMember;
	public static fun getClass (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmClass;
	public static fun getConfigValue (Lcom/oracle/truffle/api/TruffleLanguage$Env;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	public static fun getDisplayUri (Lcom/oracle/truffle/api/source/SourceSection;Lorg/pkl/core/StackFrameTransformer;)Ljava/lang/String;
	public static fun getDisplayUri (Ljava/net/URI;Lorg/pkl/core/StackFrameTransformer;)Ljava/lang/String;
	public static fun getKey (Ljava/util/Map$Entry;)Ljava/lang/Object;
	public static fun getMapValue (Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
	public static fun getMemberKey (Lcom/oracle/truffle/api/frame/Frame;)Ljava/lang/Object;
	public static fun getModuleInfo (Lorg/pkl/core/runtime/VmObjectLike;)Lorg/pkl/core/runtime/ModuleInfo;
	public static fun getNodeInfo (Lcom/oracle/truffle/api/nodes/Node;)Lcom/oracle/truffle/api/nodes/NodeInfo;
	public static fun getObjectReceiver (Lcom/oracle/truffle/api/frame/Frame;)Lorg/pkl/core/runtime/VmObjectLike;
	public static fun getOwner (Lcom/oracle/truffle/api/frame/Frame;)Lorg/pkl/core/runtime/VmObjectLike;
	public static fun getOwnerOrNull (Lcom/oracle/truffle/api/frame/Frame;)Lorg/pkl/core/runtime/VmObjectLike;
	public static fun getReceiver (Lcom/oracle/truffle/api/frame/Frame;)Ljava/lang/Object;
	public static fun getReceiverOrNull (Lcom/oracle/truffle/api/frame/Frame;)Ljava/lang/Object;
	public static fun getTypedObjectReceiver (Lcom/oracle/truffle/api/frame/Frame;)Lorg/pkl/core/runtime/VmTyped;
	public static fun getValue (Ljava/util/Map$Entry;)Ljava/lang/Object;
	public static fun indent (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	public static fun insertStackFrame (Lorg/pkl/core/ast/member/ObjectMember;Lcom/oracle/truffle/api/CallTarget;Lorg/pkl/core/runtime/VmException;)V
	public static fun isPcfRenderDirective (Ljava/lang/Object;)Z
	public static fun isRenderDirective (Ljava/lang/Object;)Z
	public static fun isRenderDirective (Lorg/pkl/core/runtime/VmValue;)Z
	public static fun loadSource (Lorg/pkl/core/module/ResolvedModuleKey;)Lcom/oracle/truffle/api/source/Source;
	public static fun put (Lorg/organicdesign/fp/collections/ImMap;Ljava/lang/String;Ljava/lang/Object;)Lorg/organicdesign/fp/collections/ImMap;
	public static fun readMember (Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/Object;)Ljava/lang/Object;
	public static fun readMember (Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/Object;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	public static fun readMemberOrNull (Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/Object;)Ljava/lang/Object;
	public static fun readMemberOrNull (Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/Object;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	public static fun readMemberOrNull (Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/Object;Z)Ljava/lang/Object;
	public static fun readMemberOrNull (Lorg/pkl/core/runtime/VmObjectLike;Ljava/lang/Object;ZLcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
	public static fun readTextProperty (Ljava/lang/Object;)Ljava/lang/String;
	public static fun readTextProperty (Lorg/pkl/core/runtime/VmObjectLike;)Ljava/lang/String;
	public static fun resolveParameterTypes (Lcom/oracle/truffle/api/frame/VirtualFrame;Lcom/oracle/truffle/api/frame/FrameDescriptor;[Lorg/pkl/core/ast/type/UnresolvedTypeNode;)[Lorg/pkl/core/ast/type/TypeNode;
	public static fun shouldRunTypeCheck (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public static fun toVmException (Lorg/pkl/core/parser/LexParseException;Lcom/oracle/truffle/api/source/Source;Ljava/lang/String;)Lorg/pkl/core/runtime/VmException;
	public static fun toVmException (Lorg/pkl/core/parser/LexParseException;Ljava/lang/String;Ljava/net/URI;Ljava/lang/String;)Lorg/pkl/core/runtime/VmException;
	public static fun unavailableSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
}

public abstract class org/pkl/core/runtime/VmValue {
	public fun <init> ()V
	public abstract fun accept (Lorg/pkl/core/runtime/VmValueConverter;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun accept (Lorg/pkl/core/runtime/VmValueVisitor;)V
	public abstract fun equals (Ljava/lang/Object;)Z
	public abstract fun export ()Ljava/lang/Object;
	public static fun export (Ljava/lang/Object;)Ljava/lang/Object;
	public static fun exportNullable (Ljava/lang/Object;)Ljava/lang/Object;
	public static fun force (Ljava/lang/Object;Z)V
	public abstract fun force (Z)V
	public fun getPrototype ()Lorg/pkl/core/runtime/VmTyped;
	public abstract fun getVmClass ()Lorg/pkl/core/runtime/VmClass;
	public fun isDynamic ()Z
	public fun isListing ()Z
	public fun isMapping ()Z
	public fun isPrototype ()Z
	public fun isSequence ()Z
	public fun isTyped ()Z
}

public abstract interface class org/pkl/core/runtime/VmValueConverter {
	public static final field TOP_LEVEL_VALUE Ljava/lang/Object;
	public static final field WILDCARD_ELEMENT Ljava/lang/Object;
	public static final field WILDCARD_PROPERTY Ljava/lang/Object;
	public fun convert (Ljava/lang/Object;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertBoolean (Ljava/lang/Boolean;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertClass (Lorg/pkl/core/runtime/VmClass;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertDataSize (Lorg/pkl/core/runtime/VmDataSize;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertDuration (Lorg/pkl/core/runtime/VmDuration;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertDynamic (Lorg/pkl/core/runtime/VmDynamic;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertFloat (Ljava/lang/Double;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertFunction (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertInt (Ljava/lang/Long;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertIntSeq (Lorg/pkl/core/runtime/VmIntSeq;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertList (Lorg/pkl/core/runtime/VmList;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertListing (Lorg/pkl/core/runtime/VmListing;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertMap (Lorg/pkl/core/runtime/VmMap;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertMapping (Lorg/pkl/core/runtime/VmMapping;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertNull (Lorg/pkl/core/runtime/VmNull;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertPair (Lorg/pkl/core/runtime/VmPair;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertRegex (Lorg/pkl/core/runtime/VmRegex;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertSet (Lorg/pkl/core/runtime/VmSet;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertString (Ljava/lang/String;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertTypeAlias (Lorg/pkl/core/runtime/VmTypeAlias;Ljava/lang/Iterable;)Ljava/lang/Object;
	public abstract fun convertTyped (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Iterable;)Ljava/lang/Object;
}

public final class org/pkl/core/runtime/VmValueRenderer {
	public static fun multiLine (I)Lorg/pkl/core/runtime/VmValueRenderer;
	public fun render (Ljava/lang/Object;)Ljava/lang/String;
	public static fun singleLine (I)Lorg/pkl/core/runtime/VmValueRenderer;
}

public abstract interface class org/pkl/core/runtime/VmValueVisitor {
	public fun visit (Ljava/lang/Object;)V
	public abstract fun visitBoolean (Ljava/lang/Boolean;)V
	public abstract fun visitClass (Lorg/pkl/core/runtime/VmClass;)V
	public abstract fun visitDataSize (Lorg/pkl/core/runtime/VmDataSize;)V
	public abstract fun visitDuration (Lorg/pkl/core/runtime/VmDuration;)V
	public abstract fun visitDynamic (Lorg/pkl/core/runtime/VmDynamic;)V
	public abstract fun visitFloat (Ljava/lang/Double;)V
	public abstract fun visitFunction (Lorg/pkl/core/runtime/VmFunction;)V
	public abstract fun visitInt (Ljava/lang/Long;)V
	public abstract fun visitIntSeq (Lorg/pkl/core/runtime/VmIntSeq;)V
	public abstract fun visitList (Lorg/pkl/core/runtime/VmList;)V
	public abstract fun visitListing (Lorg/pkl/core/runtime/VmListing;)V
	public abstract fun visitMap (Lorg/pkl/core/runtime/VmMap;)V
	public abstract fun visitMapping (Lorg/pkl/core/runtime/VmMapping;)V
	public abstract fun visitNull (Lorg/pkl/core/runtime/VmNull;)V
	public abstract fun visitPair (Lorg/pkl/core/runtime/VmPair;)V
	public abstract fun visitRegex (Lorg/pkl/core/runtime/VmRegex;)V
	public abstract fun visitSet (Lorg/pkl/core/runtime/VmSet;)V
	public abstract fun visitString (Ljava/lang/String;)V
	public abstract fun visitTypeAlias (Lorg/pkl/core/runtime/VmTypeAlias;)V
	public abstract fun visitTyped (Lorg/pkl/core/runtime/VmTyped;)V
}

public class org/pkl/core/runtime/VmWrappedEvalException : org/pkl/core/runtime/VmEvalException {
	public fun <init> (Ljava/lang/String;Ljava/lang/Throwable;Z[Ljava/lang/Object;Ljava/util/List;Lcom/oracle/truffle/api/nodes/Node;Lcom/oracle/truffle/api/source/SourceSection;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;Lorg/pkl/core/runtime/VmException;)V
	public fun getWrappedException ()Lorg/pkl/core/runtime/VmException;
}

public final class org/pkl/core/runtime/XmlModule : org/pkl/core/runtime/StdLibModule {
	public fun <init> ()V
	public static fun getCDataClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getCommentClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getInlineClass ()Lorg/pkl/core/runtime/VmClass;
	public static fun getModule ()Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/service/ExecutorSpiImpl : org/pkl/executor/spi/v1/ExecutorSpi {
	public fun <init> ()V
	public fun evaluatePath (Ljava/nio/file/Path;Lorg/pkl/executor/spi/v1/ExecutorSpiOptions;)Ljava/lang/String;
	public fun getPklVersion ()Ljava/lang/String;
}

public final class org/pkl/core/settings/PklSettings : java/lang/Record {
	public fun <init> (Lorg/pkl/core/settings/PklSettings$Editor;Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$Http;)V
	public fun editor ()Lorg/pkl/core/settings/PklSettings$Editor;
	public final fun equals (Ljava/lang/Object;)Z
	public fun getEditor ()Lorg/pkl/core/settings/PklSettings$Editor;
	public final fun hashCode ()I
	public fun http ()Lorg/pkl/core/evaluatorSettings/PklEvaluatorSettings$Http;
	public static fun load (Lorg/pkl/core/ModuleSource;)Lorg/pkl/core/settings/PklSettings;
	public static fun loadFromPklHomeDir ()Lorg/pkl/core/settings/PklSettings;
	public final fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/settings/PklSettings$Editor : java/lang/Record {
	public static final field ATOM Lorg/pkl/core/settings/PklSettings$Editor;
	public static final field IDEA Lorg/pkl/core/settings/PklSettings$Editor;
	public static final field SUBLIME Lorg/pkl/core/settings/PklSettings$Editor;
	public static final field SYSTEM Lorg/pkl/core/settings/PklSettings$Editor;
	public static final field TEXT_MATE Lorg/pkl/core/settings/PklSettings$Editor;
	public static final field VS_CODE Lorg/pkl/core/settings/PklSettings$Editor;
	public fun <init> (Ljava/lang/String;)V
	public final fun equals (Ljava/lang/Object;)Z
	public fun getUrlScheme ()Ljava/lang/String;
	public final fun hashCode ()I
	public final fun toString ()Ljava/lang/String;
	public fun urlScheme ()Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/AbstractRenderer : org/pkl/core/runtime/VmValueVisitor {
	protected static final field LINE_BREAK C
	protected final field builder Ljava/lang/StringBuilder;
	protected final field converter Lorg/pkl/core/stdlib/PklConverter;
	protected final field currIndent Ljava/lang/StringBuilder;
	protected field currPath Ljava/util/Deque;
	protected field currSourceSection Lcom/oracle/truffle/api/source/SourceSection;
	protected field enclosingValue Lorg/pkl/core/runtime/VmValue;
	protected final field indent Ljava/lang/String;
	protected final field name Ljava/lang/String;
	public fun <init> (Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/lang/String;Lorg/pkl/core/stdlib/PklConverter;ZZ)V
	protected fun canRenderPropertyOrEntryOf (Lorg/pkl/core/runtime/VmDynamic;)Z
	protected fun cannotRenderNonScalarKey (Ljava/lang/Object;)V
	protected fun cannotRenderNonStringKey (Ljava/lang/Object;)V
	protected fun cannotRenderTypeAddConverter (Lorg/pkl/core/runtime/VmValue;)V
	protected fun decreaseIndent ()V
	protected abstract fun endDynamic (Lorg/pkl/core/runtime/VmDynamic;Z)V
	protected abstract fun endList (Lorg/pkl/core/runtime/VmList;)V
	protected abstract fun endListing (Lorg/pkl/core/runtime/VmListing;Z)V
	protected abstract fun endMap (Lorg/pkl/core/runtime/VmMap;)V
	protected abstract fun endMapping (Lorg/pkl/core/runtime/VmMapping;Z)V
	protected abstract fun endSet (Lorg/pkl/core/runtime/VmSet;)V
	protected abstract fun endTyped (Lorg/pkl/core/runtime/VmTyped;Z)V
	protected fun increaseIndent ()V
	public final fun renderDocument (Ljava/lang/Object;)V
	public final fun renderValue (Ljava/lang/Object;)V
	protected abstract fun startDynamic (Lorg/pkl/core/runtime/VmDynamic;)V
	protected abstract fun startList (Lorg/pkl/core/runtime/VmList;)V
	protected abstract fun startListing (Lorg/pkl/core/runtime/VmListing;)V
	protected abstract fun startMap (Lorg/pkl/core/runtime/VmMap;)V
	protected abstract fun startMapping (Lorg/pkl/core/runtime/VmMapping;)V
	protected abstract fun startSet (Lorg/pkl/core/runtime/VmSet;)V
	protected abstract fun startTyped (Lorg/pkl/core/runtime/VmTyped;)V
	public fun visit (Ljava/lang/Object;)V
	public final fun visitClass (Lorg/pkl/core/runtime/VmClass;)V
	protected abstract fun visitDocument (Ljava/lang/Object;)V
	public final fun visitDynamic (Lorg/pkl/core/runtime/VmDynamic;)V
	protected abstract fun visitElement (JLjava/lang/Object;Z)V
	protected abstract fun visitEntryKey (Ljava/lang/Object;Z)V
	protected abstract fun visitEntryValue (Ljava/lang/Object;)V
	public final fun visitFunction (Lorg/pkl/core/runtime/VmFunction;)V
	public final fun visitList (Lorg/pkl/core/runtime/VmList;)V
	public final fun visitListing (Lorg/pkl/core/runtime/VmListing;)V
	public final fun visitMap (Lorg/pkl/core/runtime/VmMap;)V
	public final fun visitMapping (Lorg/pkl/core/runtime/VmMapping;)V
	protected abstract fun visitProperty (Lorg/pkl/core/runtime/Identifier;Ljava/lang/Object;Z)V
	protected abstract fun visitRenderDirective (Lorg/pkl/core/runtime/VmTyped;)V
	public final fun visitSet (Lorg/pkl/core/runtime/VmSet;)V
	protected abstract fun visitTopLevelValue (Ljava/lang/Object;)V
	public final fun visitTypeAlias (Lorg/pkl/core/runtime/VmTypeAlias;)V
	public fun visitTyped (Lorg/pkl/core/runtime/VmTyped;)V
}

public abstract class org/pkl/core/stdlib/ExternalMemberNode : org/pkl/core/ast/ExpressionNode {
	protected fun <init> ()V
	protected final fun getQualifiedMemberName ()Ljava/lang/String;
	protected abstract fun getReceiverNode ()Lorg/pkl/core/ast/ExpressionNode;
}

public abstract class org/pkl/core/stdlib/ExternalMethod0Node : org/pkl/core/stdlib/ExternalMethodNode {
	public fun <init> ()V
}

public abstract interface class org/pkl/core/stdlib/ExternalMethod0Node$Factory {
	public abstract fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/ExternalMethod0Node;
}

public abstract class org/pkl/core/stdlib/ExternalMethod1Node : org/pkl/core/stdlib/ExternalMethodNode {
	public fun <init> ()V
	protected fun fallback (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public abstract fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public abstract interface class org/pkl/core/stdlib/ExternalMethod1Node$Factory {
	public abstract fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/ExternalMethod1Node;
}

public abstract class org/pkl/core/stdlib/ExternalMethod2Node : org/pkl/core/stdlib/ExternalMethodNode {
	public fun <init> ()V
	protected fun fallback (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	protected abstract fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
	protected abstract fun getArg2Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public abstract interface class org/pkl/core/stdlib/ExternalMethod2Node$Factory {
	public abstract fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/ExternalMethod2Node;
}

public abstract class org/pkl/core/stdlib/ExternalMethod3Node : org/pkl/core/stdlib/ExternalMethodNode {
	public fun <init> ()V
	protected fun fallback (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	protected abstract fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
	protected abstract fun getArg2Node ()Lorg/pkl/core/ast/ExpressionNode;
	protected abstract fun getArg3Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public abstract interface class org/pkl/core/stdlib/ExternalMethod3Node$Factory {
	public abstract fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/ExternalMethod3Node;
}

public abstract class org/pkl/core/stdlib/ExternalMethod4Node : org/pkl/core/stdlib/ExternalMethodNode {
	public fun <init> ()V
	protected fun fallback (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	protected abstract fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
	protected abstract fun getArg2Node ()Lorg/pkl/core/ast/ExpressionNode;
	protected abstract fun getArg3Node ()Lorg/pkl/core/ast/ExpressionNode;
	protected abstract fun getArg4Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public abstract interface class org/pkl/core/stdlib/ExternalMethod4Node$Factory {
	public abstract fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/ExternalMethod4Node;
}

public abstract class org/pkl/core/stdlib/ExternalMethod5Node : org/pkl/core/stdlib/ExternalMethodNode {
	public fun <init> ()V
	protected fun fallback (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	protected abstract fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
	protected abstract fun getArg2Node ()Lorg/pkl/core/ast/ExpressionNode;
	protected abstract fun getArg3Node ()Lorg/pkl/core/ast/ExpressionNode;
	protected abstract fun getArg4Node ()Lorg/pkl/core/ast/ExpressionNode;
	protected abstract fun getArg5Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public abstract interface class org/pkl/core/stdlib/ExternalMethod5Node$Factory {
	public abstract fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/ExternalMethod5Node;
}

public abstract class org/pkl/core/stdlib/ExternalMethodNode : org/pkl/core/stdlib/ExternalMemberNode {
	public fun <init> ()V
}

public abstract class org/pkl/core/stdlib/ExternalPropertyNode : org/pkl/core/stdlib/ExternalMemberNode {
	public fun <init> ()V
}

public abstract interface class org/pkl/core/stdlib/ExternalPropertyNode$Factory {
	public abstract fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/ExternalPropertyNode;
}

public abstract interface class org/pkl/core/stdlib/LanguageAwareNode {
	public abstract fun initLanguage (Lorg/pkl/core/runtime/VmLanguage;)V
}

public final class org/pkl/core/stdlib/PklConverter : org/pkl/core/runtime/VmValueConverter {
	public fun <init> (Lorg/pkl/core/runtime/VmMapping;)V
	public fun convertBoolean (Ljava/lang/Boolean;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertClass (Lorg/pkl/core/runtime/VmClass;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertDataSize (Lorg/pkl/core/runtime/VmDataSize;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertDuration (Lorg/pkl/core/runtime/VmDuration;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertDynamic (Lorg/pkl/core/runtime/VmDynamic;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertFloat (Ljava/lang/Double;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertFunction (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertInt (Ljava/lang/Long;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertIntSeq (Lorg/pkl/core/runtime/VmIntSeq;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertList (Lorg/pkl/core/runtime/VmList;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertListing (Lorg/pkl/core/runtime/VmListing;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertMap (Lorg/pkl/core/runtime/VmMap;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertMapping (Lorg/pkl/core/runtime/VmMapping;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertNull (Lorg/pkl/core/runtime/VmNull;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertPair (Lorg/pkl/core/runtime/VmPair;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertRegex (Lorg/pkl/core/runtime/VmRegex;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertSet (Lorg/pkl/core/runtime/VmSet;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertString (Ljava/lang/String;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertTypeAlias (Lorg/pkl/core/runtime/VmTypeAlias;Ljava/lang/Iterable;)Ljava/lang/Object;
	public fun convertTyped (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Iterable;)Ljava/lang/Object;
}

public abstract interface annotation class org/pkl/core/stdlib/PklName : java/lang/annotation/Annotation {
	public abstract fun value ()Ljava/lang/String;
}

public final class org/pkl/core/stdlib/VmObjectFactories {
	public static final field versionFactory Lorg/pkl/core/stdlib/VmObjectFactory;
}

public final class org/pkl/core/stdlib/VmObjectFactory {
	public fun <init> (Ljava/util/function/Supplier;)V
	public fun addBooleanProperty (Ljava/lang/String;Lorg/pkl/core/stdlib/VmObjectFactory$BooleanProperty;)Lorg/pkl/core/stdlib/VmObjectFactory;
	public fun addClassProperty (Ljava/lang/String;Lorg/pkl/core/stdlib/VmObjectFactory$Property;)Lorg/pkl/core/stdlib/VmObjectFactory;
	public fun addDurationProperty (Ljava/lang/String;Lorg/pkl/core/stdlib/VmObjectFactory$Property;)Lorg/pkl/core/stdlib/VmObjectFactory;
	public fun addIntProperty (Ljava/lang/String;Lorg/pkl/core/stdlib/VmObjectFactory$IntProperty;)Lorg/pkl/core/stdlib/VmObjectFactory;
	public fun addListProperty (Ljava/lang/String;Lorg/pkl/core/stdlib/VmObjectFactory$Property;)Lorg/pkl/core/stdlib/VmObjectFactory;
	public fun addMapProperty (Ljava/lang/String;Lorg/pkl/core/stdlib/VmObjectFactory$Property;)Lorg/pkl/core/stdlib/VmObjectFactory;
	public fun addProperty (Ljava/lang/String;Lorg/pkl/core/stdlib/VmObjectFactory$Property;)Lorg/pkl/core/stdlib/VmObjectFactory;
	public fun addSetProperty (Ljava/lang/String;Lorg/pkl/core/stdlib/VmObjectFactory$Property;)Lorg/pkl/core/stdlib/VmObjectFactory;
	public fun addStringProperty (Ljava/lang/String;Lorg/pkl/core/stdlib/VmObjectFactory$Property;)Lorg/pkl/core/stdlib/VmObjectFactory;
	public fun addTypedProperty (Ljava/lang/String;Lorg/pkl/core/stdlib/VmObjectFactory$Property;)Lorg/pkl/core/stdlib/VmObjectFactory;
	public fun addValueProperty (Ljava/lang/String;Lorg/pkl/core/stdlib/VmObjectFactory$Property;)Lorg/pkl/core/stdlib/VmObjectFactory;
	public fun create (Ljava/lang/Object;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract interface class org/pkl/core/stdlib/VmObjectFactory$BooleanProperty {
	public abstract fun evaluate (Ljava/lang/Object;)Z
}

public abstract interface class org/pkl/core/stdlib/VmObjectFactory$IntProperty {
	public abstract fun evaluate (Ljava/lang/Object;)J
}

public abstract interface class org/pkl/core/stdlib/VmObjectFactory$Property {
	public abstract fun evaluate (Ljava/lang/Object;)Ljava/lang/Object;
	public static fun identity ()Lorg/pkl/core/stdlib/VmObjectFactory$Property;
}

public final class org/pkl/core/stdlib/analyze/AnalyzeNodes {
}

public abstract class org/pkl/core/stdlib/analyze/AnalyzeNodes$importGraph : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/analyze/AnalyzeNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/analyze/AnalyzeNodesFactory$importGraphNodeGen : org/pkl/core/stdlib/analyze/AnalyzeNodes$importGraph {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/analyze/AnalyzeNodes$importGraph;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/AnyNodes {
}

public abstract class org/pkl/core/stdlib/base/AnyNodes$getClass : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmClass;
}

public abstract class org/pkl/core/stdlib/base/AnyNodes$ifNonNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmNull;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmNull;
	protected static fun isNonNull (Ljava/lang/Object;)Z
}

public abstract class org/pkl/core/stdlib/base/AnyNodes$toString : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun evalString (Ljava/lang/Object;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/base/AnyNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/AnyNodesFactory$getClassNodeGen : org/pkl/core/stdlib/base/AnyNodes$getClass {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/AnyNodes$getClass;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/AnyNodesFactory$ifNonNullNodeGen : org/pkl/core/stdlib/base/AnyNodes$ifNonNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/AnyNodes$ifNonNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/AnyNodesFactory$toStringNodeGen : org/pkl/core/stdlib/base/AnyNodes$toString {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/AnyNodes$toString;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/BaseNodes {
}

public abstract class org/pkl/core/stdlib/base/BaseNodes$Infinity : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)D
}

public abstract class org/pkl/core/stdlib/base/BaseNodes$IntSeq : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;JJ)Lorg/pkl/core/runtime/VmIntSeq;
}

public abstract class org/pkl/core/stdlib/base/BaseNodes$List : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/BaseNodes$Map : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/BaseNodes$NaN : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)D
}

public abstract class org/pkl/core/stdlib/base/BaseNodes$Null : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmNull;
}

public abstract class org/pkl/core/stdlib/base/BaseNodes$Pair : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmPair;
}

public abstract class org/pkl/core/stdlib/base/BaseNodes$Regex : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun createRegex (Lcom/oracle/truffle/api/frame/VirtualFrame;Ljava/lang/String;)Lorg/pkl/core/runtime/VmRegex;
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;Ljava/lang/String;)Lorg/pkl/core/runtime/VmRegex;
	protected fun evalCached (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;Ljava/lang/String;Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;)Lorg/pkl/core/runtime/VmRegex;
}

public abstract class org/pkl/core/stdlib/base/BaseNodes$Set : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lcom/oracle/truffle/api/frame/VirtualFrame;Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/BaseNodes$Undefined : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/BaseNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/BaseNodesFactory$InfinityNodeGen : org/pkl/core/stdlib/base/BaseNodes$Infinity {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BaseNodes$Infinity;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/BaseNodesFactory$IntSeqNodeGen : org/pkl/core/stdlib/base/BaseNodes$IntSeq {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BaseNodes$IntSeq;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/BaseNodesFactory$ListNodeGen : org/pkl/core/stdlib/base/BaseNodes$List {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BaseNodes$List;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/BaseNodesFactory$MapNodeGen : org/pkl/core/stdlib/base/BaseNodes$Map {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BaseNodes$Map;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/BaseNodesFactory$NaNNodeGen : org/pkl/core/stdlib/base/BaseNodes$NaN {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BaseNodes$NaN;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/BaseNodesFactory$NullNodeGen : org/pkl/core/stdlib/base/BaseNodes$Null {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BaseNodes$Null;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/BaseNodesFactory$PairNodeGen : org/pkl/core/stdlib/base/BaseNodes$Pair {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BaseNodes$Pair;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/BaseNodesFactory$RegexNodeGen : org/pkl/core/stdlib/base/BaseNodes$Regex {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BaseNodes$Regex;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/BaseNodesFactory$SetNodeGen : org/pkl/core/stdlib/base/BaseNodes$Set {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BaseNodes$Set;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/BaseNodesFactory$UndefinedNodeGen : org/pkl/core/stdlib/base/BaseNodes$Undefined {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BaseNodes$Undefined;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/BooleanNodes {
}

public abstract class org/pkl/core/stdlib/base/BooleanNodes$implies : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (ZZ)Z
}

public abstract class org/pkl/core/stdlib/base/BooleanNodes$xor : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (ZZ)Z
}

public final class org/pkl/core/stdlib/base/BooleanNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/BooleanNodesFactory$impliesNodeGen : org/pkl/core/stdlib/base/BooleanNodes$implies {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BooleanNodes$implies;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/BooleanNodesFactory$xorNodeGen : org/pkl/core/stdlib/base/BooleanNodes$xor {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/BooleanNodes$xor;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ClassNodes {
}

public abstract class org/pkl/core/stdlib/base/ClassNodes$simpleName : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmClass;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/base/ClassNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/ClassNodesFactory$simpleNameNodeGen : org/pkl/core/stdlib/base/ClassNodes$simpleName {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ClassNodes$simpleName;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/CollectionNodes {
}

public final class org/pkl/core/stdlib/base/CollectionNodes$CompareByNode : org/pkl/core/stdlib/base/CollectionNodes$SortComparatorNode {
	public fun <init> ()V
	public fun executeWith (Ljava/lang/Object;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Z
}

public final class org/pkl/core/stdlib/base/CollectionNodes$CompareNode : org/pkl/core/stdlib/base/CollectionNodes$SortComparatorNode {
	public fun <init> ()V
	public fun executeWith (Ljava/lang/Object;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Z
}

public final class org/pkl/core/stdlib/base/CollectionNodes$CompareWithNode : org/pkl/core/stdlib/base/CollectionNodes$SortComparatorNode {
	public fun <init> ()V
	public fun executeWith (Ljava/lang/Object;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/CollectionNodes$SortComparatorNode : org/pkl/core/ast/PklNode {
	public fun <init> ()V
	public abstract fun executeWith (Ljava/lang/Object;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Z
}

public final class org/pkl/core/stdlib/base/DataSizeNodes {
}

public abstract class org/pkl/core/stdlib/base/DataSizeNodes$isBetween : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;Lorg/pkl/core/runtime/VmDataSize;Lorg/pkl/core/runtime/VmDataSize;)Z
}

public abstract class org/pkl/core/stdlib/base/DataSizeNodes$isBinaryUnit : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;)Z
}

public abstract class org/pkl/core/stdlib/base/DataSizeNodes$isDecimalUnit : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;)Z
}

public abstract class org/pkl/core/stdlib/base/DataSizeNodes$isPositive : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;)Z
}

public abstract class org/pkl/core/stdlib/base/DataSizeNodes$toBinaryUnit : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/DataSizeNodes$toDecimalUnit : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/DataSizeNodes$toUnit : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;Ljava/lang/String;)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/DataSizeNodes$unit : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDataSize;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/DataSizeNodes$value : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun evalFloat (Lorg/pkl/core/runtime/VmDataSize;)D
	protected fun evalInt (Lorg/pkl/core/runtime/VmDataSize;)J
}

public final class org/pkl/core/stdlib/base/DataSizeNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/DataSizeNodesFactory$isBetweenNodeGen : org/pkl/core/stdlib/base/DataSizeNodes$isBetween {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DataSizeNodes$isBetween;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DataSizeNodesFactory$isBinaryUnitNodeGen : org/pkl/core/stdlib/base/DataSizeNodes$isBinaryUnit {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DataSizeNodes$isBinaryUnit;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DataSizeNodesFactory$isDecimalUnitNodeGen : org/pkl/core/stdlib/base/DataSizeNodes$isDecimalUnit {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DataSizeNodes$isDecimalUnit;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DataSizeNodesFactory$isPositiveNodeGen : org/pkl/core/stdlib/base/DataSizeNodes$isPositive {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DataSizeNodes$isPositive;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DataSizeNodesFactory$toBinaryUnitNodeGen : org/pkl/core/stdlib/base/DataSizeNodes$toBinaryUnit {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DataSizeNodes$toBinaryUnit;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DataSizeNodesFactory$toDecimalUnitNodeGen : org/pkl/core/stdlib/base/DataSizeNodes$toDecimalUnit {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DataSizeNodes$toDecimalUnit;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DataSizeNodesFactory$toUnitNodeGen : org/pkl/core/stdlib/base/DataSizeNodes$toUnit {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DataSizeNodes$toUnit;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/DataSizeNodesFactory$unitNodeGen : org/pkl/core/stdlib/base/DataSizeNodes$unit {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DataSizeNodes$unit;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DataSizeNodesFactory$valueNodeGen : org/pkl/core/stdlib/base/DataSizeNodes$value {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DataSizeNodes$value;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/DurationNodes {
}

public abstract class org/pkl/core/stdlib/base/DurationNodes$isBetween : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;Lorg/pkl/core/runtime/VmDuration;Lorg/pkl/core/runtime/VmDuration;)Z
}

public abstract class org/pkl/core/stdlib/base/DurationNodes$isPositive : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;)Z
}

public abstract class org/pkl/core/stdlib/base/DurationNodes$isoString : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/DurationNodes$toUnit : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;Ljava/lang/String;)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/DurationNodes$unit : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDuration;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/DurationNodes$value : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun evalFloat (Lorg/pkl/core/runtime/VmDuration;)D
	protected fun evalInt (Lorg/pkl/core/runtime/VmDuration;)J
}

public final class org/pkl/core/stdlib/base/DurationNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/DurationNodesFactory$isBetweenNodeGen : org/pkl/core/stdlib/base/DurationNodes$isBetween {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DurationNodes$isBetween;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DurationNodesFactory$isPositiveNodeGen : org/pkl/core/stdlib/base/DurationNodes$isPositive {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DurationNodes$isPositive;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DurationNodesFactory$isoStringNodeGen : org/pkl/core/stdlib/base/DurationNodes$isoString {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DurationNodes$isoString;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DurationNodesFactory$toUnitNodeGen : org/pkl/core/stdlib/base/DurationNodes$toUnit {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DurationNodes$toUnit;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/DurationNodesFactory$unitNodeGen : org/pkl/core/stdlib/base/DurationNodes$unit {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DurationNodes$unit;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DurationNodesFactory$valueNodeGen : org/pkl/core/stdlib/base/DurationNodes$value {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DurationNodes$value;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/DynamicNodes {
}

public abstract class org/pkl/core/stdlib/base/DynamicNodes$getProperty : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDynamic;Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/DynamicNodes$getPropertyOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDynamic;Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/DynamicNodes$hasProperty : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDynamic;Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/DynamicNodes$length : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDynamic;)J
}

public abstract class org/pkl/core/stdlib/base/DynamicNodes$toList : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDynamic;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/DynamicNodes$toMap : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDynamic;)Lorg/pkl/core/runtime/VmMap;
}

public abstract class org/pkl/core/stdlib/base/DynamicNodes$toTyped : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmDynamic;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmObjectLike;
}

public final class org/pkl/core/stdlib/base/DynamicNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/DynamicNodesFactory$getPropertyNodeGen : org/pkl/core/stdlib/base/DynamicNodes$getProperty {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DynamicNodes$getProperty;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/DynamicNodesFactory$getPropertyOrNullNodeGen : org/pkl/core/stdlib/base/DynamicNodes$getPropertyOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DynamicNodes$getPropertyOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/DynamicNodesFactory$hasPropertyNodeGen : org/pkl/core/stdlib/base/DynamicNodes$hasProperty {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DynamicNodes$hasProperty;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/DynamicNodesFactory$lengthNodeGen : org/pkl/core/stdlib/base/DynamicNodes$length {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DynamicNodes$length;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/DynamicNodesFactory$toListNodeGen : org/pkl/core/stdlib/base/DynamicNodes$toList {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DynamicNodes$toList;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DynamicNodesFactory$toMapNodeGen : org/pkl/core/stdlib/base/DynamicNodes$toMap {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DynamicNodes$toMap;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/DynamicNodesFactory$toTypedNodeGen : org/pkl/core/stdlib/base/DynamicNodes$toTyped {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/DynamicNodes$toTyped;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/FloatNodes {
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$abs : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)D
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$b : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$ceil : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)D
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$d : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$floor : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)D
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$gb : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$gib : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$h : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$isBetween : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun evalFloatFloat (DDD)Z
	protected fun evalFloatInt (DDJ)Z
	protected fun evalIntFloat (DJD)Z
	protected fun evalIntInt (DJJ)Z
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$isFinite : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Z
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$isInfinite : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Z
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$isNaN : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Z
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$isNonZero : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Z
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$isPositive : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Z
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$kb : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$kib : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$mb : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$mib : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$min : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$ms : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$ns : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$pb : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$pib : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$round : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (D)D
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$s : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$sign : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)D
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$tb : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$tib : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$toDataSize : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (DLjava/lang/String;)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$toDuration : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (DLjava/lang/String;)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$toFixed : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (DJ)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$toFloat : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (D)D
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$toInt : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (D)J
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$toString : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (D)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$truncate : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (D)D
}

public abstract class org/pkl/core/stdlib/base/FloatNodes$us : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (D)Lorg/pkl/core/runtime/VmDuration;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$absNodeGen : org/pkl/core/stdlib/base/FloatNodes$abs {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$abs;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$bNodeGen : org/pkl/core/stdlib/base/FloatNodes$b {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$b;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$ceilNodeGen : org/pkl/core/stdlib/base/FloatNodes$ceil {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$ceil;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$dNodeGen : org/pkl/core/stdlib/base/FloatNodes$d {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$d;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$floorNodeGen : org/pkl/core/stdlib/base/FloatNodes$floor {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$floor;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$gbNodeGen : org/pkl/core/stdlib/base/FloatNodes$gb {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$gb;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$gibNodeGen : org/pkl/core/stdlib/base/FloatNodes$gib {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$gib;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$hNodeGen : org/pkl/core/stdlib/base/FloatNodes$h {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$h;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$isBetweenNodeGen : org/pkl/core/stdlib/base/FloatNodes$isBetween {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$isBetween;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$isFiniteNodeGen : org/pkl/core/stdlib/base/FloatNodes$isFinite {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$isFinite;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$isInfiniteNodeGen : org/pkl/core/stdlib/base/FloatNodes$isInfinite {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$isInfinite;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$isNaNNodeGen : org/pkl/core/stdlib/base/FloatNodes$isNaN {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$isNaN;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$isNonZeroNodeGen : org/pkl/core/stdlib/base/FloatNodes$isNonZero {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$isNonZero;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$isPositiveNodeGen : org/pkl/core/stdlib/base/FloatNodes$isPositive {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$isPositive;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$kbNodeGen : org/pkl/core/stdlib/base/FloatNodes$kb {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$kb;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$kibNodeGen : org/pkl/core/stdlib/base/FloatNodes$kib {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$kib;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$mbNodeGen : org/pkl/core/stdlib/base/FloatNodes$mb {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$mb;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$mibNodeGen : org/pkl/core/stdlib/base/FloatNodes$mib {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$mib;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$minNodeGen : org/pkl/core/stdlib/base/FloatNodes$min {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$min;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$msNodeGen : org/pkl/core/stdlib/base/FloatNodes$ms {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$ms;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$nsNodeGen : org/pkl/core/stdlib/base/FloatNodes$ns {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$ns;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$pbNodeGen : org/pkl/core/stdlib/base/FloatNodes$pb {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$pb;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$pibNodeGen : org/pkl/core/stdlib/base/FloatNodes$pib {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$pib;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$roundNodeGen : org/pkl/core/stdlib/base/FloatNodes$round {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$round;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$sNodeGen : org/pkl/core/stdlib/base/FloatNodes$s {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$s;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$signNodeGen : org/pkl/core/stdlib/base/FloatNodes$sign {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$sign;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$tbNodeGen : org/pkl/core/stdlib/base/FloatNodes$tb {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$tb;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$tibNodeGen : org/pkl/core/stdlib/base/FloatNodes$tib {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$tib;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$toDataSizeNodeGen : org/pkl/core/stdlib/base/FloatNodes$toDataSize {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$toDataSize;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$toDurationNodeGen : org/pkl/core/stdlib/base/FloatNodes$toDuration {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$toDuration;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$toFixedNodeGen : org/pkl/core/stdlib/base/FloatNodes$toFixed {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$toFixed;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$toFloatNodeGen : org/pkl/core/stdlib/base/FloatNodes$toFloat {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$toFloat;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$toIntNodeGen : org/pkl/core/stdlib/base/FloatNodes$toInt {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$toInt;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$toStringNodeGen : org/pkl/core/stdlib/base/FloatNodes$toString {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$toString;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$truncateNodeGen : org/pkl/core/stdlib/base/FloatNodes$truncate {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$truncate;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FloatNodesFactory$usNodeGen : org/pkl/core/stdlib/base/FloatNodes$us {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FloatNodes$us;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/Function0Nodes {
}

public abstract class org/pkl/core/stdlib/base/Function0Nodes$apply : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/Function0NodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/Function0NodesFactory$applyNodeGen : org/pkl/core/stdlib/base/Function0Nodes$apply {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/Function0Nodes$apply;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/Function1Nodes {
}

public abstract class org/pkl/core/stdlib/base/Function1Nodes$apply : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/Function1NodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/Function1NodesFactory$applyNodeGen : org/pkl/core/stdlib/base/Function1Nodes$apply {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/Function1Nodes$apply;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/Function2Nodes {
}

public abstract class org/pkl/core/stdlib/base/Function2Nodes$apply : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/Function2NodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/Function2NodesFactory$applyNodeGen : org/pkl/core/stdlib/base/Function2Nodes$apply {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/Function2Nodes$apply;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/Function3Nodes {
}

public abstract class org/pkl/core/stdlib/base/Function3Nodes$apply : org/pkl/core/stdlib/ExternalMethod3Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/Function3NodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/Function3NodesFactory$applyNodeGen : org/pkl/core/stdlib/base/Function3Nodes$apply {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/Function3Nodes$apply;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/Function4Nodes {
}

public abstract class org/pkl/core/stdlib/base/Function4Nodes$apply : org/pkl/core/stdlib/ExternalMethod4Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/Function4NodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/Function4NodesFactory$applyNodeGen : org/pkl/core/stdlib/base/Function4Nodes$apply {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/Function4Nodes$apply;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/Function5Nodes {
}

public abstract class org/pkl/core/stdlib/base/Function5Nodes$apply : org/pkl/core/stdlib/ExternalMethod5Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/Function5NodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/Function5NodesFactory$applyNodeGen : org/pkl/core/stdlib/base/Function5Nodes$apply {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/Function5Nodes$apply;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FunctionNodes {
}

public abstract class org/pkl/core/stdlib/base/FunctionNodes$applyToList : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/FunctionNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/FunctionNodesFactory$applyToListNodeGen : org/pkl/core/stdlib/base/FunctionNodes$applyToList {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/FunctionNodes$applyToList;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntNodes {
}

public abstract class org/pkl/core/stdlib/base/IntNodes$abs : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$and : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (JJ)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$b : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$ceil : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$d : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$floor : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$gb : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$gib : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$h : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$inv : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$isBetween : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun evalFloatFloat (JDD)Z
	protected fun evalFloatInt (JDJ)Z
	protected fun evalIntFloat (JJD)Z
	protected fun evalIntInt (JJJ)Z
}

public abstract class org/pkl/core/stdlib/base/IntNodes$isEven : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Z
}

public abstract class org/pkl/core/stdlib/base/IntNodes$isFinite : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Z
}

public abstract class org/pkl/core/stdlib/base/IntNodes$isInfinite : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Z
}

public abstract class org/pkl/core/stdlib/base/IntNodes$isNaN : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Z
}

public abstract class org/pkl/core/stdlib/base/IntNodes$isNonZero : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Z
}

public abstract class org/pkl/core/stdlib/base/IntNodes$isOdd : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Z
}

public abstract class org/pkl/core/stdlib/base/IntNodes$isPositive : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Z
}

public abstract class org/pkl/core/stdlib/base/IntNodes$kb : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$kib : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$mb : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$mib : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$min : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$ms : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$ns : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$or : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (JJ)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$pb : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$pib : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$round : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (J)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$s : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$shl : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (JJ)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$shr : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (JJ)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$sign : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$tb : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$tib : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$toChar : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (J)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$toDataSize : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (JLjava/lang/String;)Lorg/pkl/core/runtime/VmDataSize;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$toDuration : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (JLjava/lang/String;)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$toFixed : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (JJ)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$toFloat : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (J)D
}

public abstract class org/pkl/core/stdlib/base/IntNodes$toInt : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (J)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$toRadixString : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (JJ)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$toString : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (J)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$truncate : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (J)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$us : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (J)Lorg/pkl/core/runtime/VmDuration;
}

public abstract class org/pkl/core/stdlib/base/IntNodes$ushr : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (JJ)J
}

public abstract class org/pkl/core/stdlib/base/IntNodes$xor : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (JJ)J
}

public final class org/pkl/core/stdlib/base/IntNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$absNodeGen : org/pkl/core/stdlib/base/IntNodes$abs {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$abs;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$andNodeGen : org/pkl/core/stdlib/base/IntNodes$and {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$and;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$bNodeGen : org/pkl/core/stdlib/base/IntNodes$b {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$b;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$ceilNodeGen : org/pkl/core/stdlib/base/IntNodes$ceil {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$ceil;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$dNodeGen : org/pkl/core/stdlib/base/IntNodes$d {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$d;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$floorNodeGen : org/pkl/core/stdlib/base/IntNodes$floor {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$floor;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$gbNodeGen : org/pkl/core/stdlib/base/IntNodes$gb {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$gb;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$gibNodeGen : org/pkl/core/stdlib/base/IntNodes$gib {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$gib;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$hNodeGen : org/pkl/core/stdlib/base/IntNodes$h {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$h;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$invNodeGen : org/pkl/core/stdlib/base/IntNodes$inv {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$inv;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$isBetweenNodeGen : org/pkl/core/stdlib/base/IntNodes$isBetween {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$isBetween;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$isEvenNodeGen : org/pkl/core/stdlib/base/IntNodes$isEven {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$isEven;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$isFiniteNodeGen : org/pkl/core/stdlib/base/IntNodes$isFinite {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$isFinite;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$isInfiniteNodeGen : org/pkl/core/stdlib/base/IntNodes$isInfinite {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$isInfinite;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$isNaNNodeGen : org/pkl/core/stdlib/base/IntNodes$isNaN {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$isNaN;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$isNonZeroNodeGen : org/pkl/core/stdlib/base/IntNodes$isNonZero {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$isNonZero;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$isOddNodeGen : org/pkl/core/stdlib/base/IntNodes$isOdd {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$isOdd;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$isPositiveNodeGen : org/pkl/core/stdlib/base/IntNodes$isPositive {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$isPositive;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$kbNodeGen : org/pkl/core/stdlib/base/IntNodes$kb {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$kb;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$kibNodeGen : org/pkl/core/stdlib/base/IntNodes$kib {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$kib;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$mbNodeGen : org/pkl/core/stdlib/base/IntNodes$mb {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$mb;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$mibNodeGen : org/pkl/core/stdlib/base/IntNodes$mib {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$mib;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$minNodeGen : org/pkl/core/stdlib/base/IntNodes$min {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$min;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$msNodeGen : org/pkl/core/stdlib/base/IntNodes$ms {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$ms;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$nsNodeGen : org/pkl/core/stdlib/base/IntNodes$ns {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$ns;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$orNodeGen : org/pkl/core/stdlib/base/IntNodes$or {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$or;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$pbNodeGen : org/pkl/core/stdlib/base/IntNodes$pb {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$pb;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$pibNodeGen : org/pkl/core/stdlib/base/IntNodes$pib {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$pib;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$roundNodeGen : org/pkl/core/stdlib/base/IntNodes$round {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$round;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$sNodeGen : org/pkl/core/stdlib/base/IntNodes$s {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$s;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$shlNodeGen : org/pkl/core/stdlib/base/IntNodes$shl {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$shl;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$shrNodeGen : org/pkl/core/stdlib/base/IntNodes$shr {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$shr;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$signNodeGen : org/pkl/core/stdlib/base/IntNodes$sign {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$sign;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$tbNodeGen : org/pkl/core/stdlib/base/IntNodes$tb {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$tb;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$tibNodeGen : org/pkl/core/stdlib/base/IntNodes$tib {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$tib;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$toCharNodeGen : org/pkl/core/stdlib/base/IntNodes$toChar {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$toChar;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$toDataSizeNodeGen : org/pkl/core/stdlib/base/IntNodes$toDataSize {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$toDataSize;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$toDurationNodeGen : org/pkl/core/stdlib/base/IntNodes$toDuration {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$toDuration;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$toFixedNodeGen : org/pkl/core/stdlib/base/IntNodes$toFixed {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$toFixed;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$toFloatNodeGen : org/pkl/core/stdlib/base/IntNodes$toFloat {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$toFloat;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$toIntNodeGen : org/pkl/core/stdlib/base/IntNodes$toInt {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$toInt;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$toRadixStringNodeGen : org/pkl/core/stdlib/base/IntNodes$toRadixString {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$toRadixString;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$toStringNodeGen : org/pkl/core/stdlib/base/IntNodes$toString {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$toString;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$truncateNodeGen : org/pkl/core/stdlib/base/IntNodes$truncate {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$truncate;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$usNodeGen : org/pkl/core/stdlib/base/IntNodes$us {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$us;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$ushrNodeGen : org/pkl/core/stdlib/base/IntNodes$ushr {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$ushr;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntNodesFactory$xorNodeGen : org/pkl/core/stdlib/base/IntNodes$xor {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntNodes$xor;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntSeqNodes {
}

public abstract class org/pkl/core/stdlib/base/IntSeqNodes$end : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmIntSeq;)J
}

public abstract class org/pkl/core/stdlib/base/IntSeqNodes$fold : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmIntSeq;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/IntSeqNodes$map : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmIntSeq;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/IntSeqNodes$start : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmIntSeq;)J
}

public abstract class org/pkl/core/stdlib/base/IntSeqNodes$step : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmIntSeq;)J
}

public abstract class org/pkl/core/stdlib/base/IntSeqNodes$stepMethod : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmIntSeq;J)Lorg/pkl/core/runtime/VmIntSeq;
}

public abstract class org/pkl/core/stdlib/base/IntSeqNodes$toList : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmIntSeq;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/IntSeqNodes$toListing : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmIntSeq;)Lorg/pkl/core/runtime/VmListing;
}

public final class org/pkl/core/stdlib/base/IntSeqNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/IntSeqNodesFactory$endNodeGen : org/pkl/core/stdlib/base/IntSeqNodes$end {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntSeqNodes$end;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/IntSeqNodesFactory$foldNodeGen : org/pkl/core/stdlib/base/IntSeqNodes$fold {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntSeqNodes$fold;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntSeqNodesFactory$mapNodeGen : org/pkl/core/stdlib/base/IntSeqNodes$map {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntSeqNodes$map;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntSeqNodesFactory$startNodeGen : org/pkl/core/stdlib/base/IntSeqNodes$start {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntSeqNodes$start;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/IntSeqNodesFactory$stepMethodNodeGen : org/pkl/core/stdlib/base/IntSeqNodes$stepMethod {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntSeqNodes$stepMethod;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/IntSeqNodesFactory$stepNodeGen : org/pkl/core/stdlib/base/IntSeqNodes$step {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntSeqNodes$step;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/IntSeqNodesFactory$toListNodeGen : org/pkl/core/stdlib/base/IntSeqNodes$toList {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntSeqNodes$toList;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/IntSeqNodesFactory$toListingNodeGen : org/pkl/core/stdlib/base/IntSeqNodes$toListing {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/IntSeqNodes$toListing;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/JsonRendererNodes {
}

public abstract class org/pkl/core/stdlib/base/JsonRendererNodes$renderDocument : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/JsonRendererNodes$renderValue : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/base/JsonRendererNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/JsonRendererNodesFactory$renderDocumentNodeGen : org/pkl/core/stdlib/base/JsonRendererNodes$renderDocument {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/JsonRendererNodes$renderDocument;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/JsonRendererNodesFactory$renderValueNodeGen : org/pkl/core/stdlib/base/JsonRendererNodes$renderValue {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/JsonRendererNodes$renderValue;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodes {
}

public abstract class org/pkl/core/stdlib/base/ListNodes$add : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$any : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/ListNodes$contains : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Ljava/lang/Object;)Z
}

public abstract class org/pkl/core/stdlib/base/ListNodes$count : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)J
}

public abstract class org/pkl/core/stdlib/base/ListNodes$distinct : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$distinctBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$drop : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;J)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$dropLast : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;J)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$dropLastWhile : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$dropWhile : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$endsWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmCollection;)Z
}

public abstract class org/pkl/core/stdlib/base/ListNodes$every : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/ListNodes$filter : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$filterIndexed : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$filterIsInstance : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$filterNonNull : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$find : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$findIndex : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)J
}

public abstract class org/pkl/core/stdlib/base/ListNodes$findIndexOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$findLast : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$findLastIndex : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)J
}

public abstract class org/pkl/core/stdlib/base/ListNodes$findLastIndexOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$findLastOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$findOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$first : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$firstOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$flatMap : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$flatMapIndexed : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$flatten : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$fold : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$foldBack : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$foldIndexed : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$getOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;J)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$groupBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$indexOf : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Ljava/lang/Object;)J
}

public abstract class org/pkl/core/stdlib/base/ListNodes$indexOfOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$isDistinct : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Z
}

public abstract class org/pkl/core/stdlib/base/ListNodes$isDistinctBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/ListNodes$isEmpty : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Z
}

public abstract class org/pkl/core/stdlib/base/ListNodes$join : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$last : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$lastIndex : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)J
}

public abstract class org/pkl/core/stdlib/base/ListNodes$lastIndexOf : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Ljava/lang/Object;)J
}

public abstract class org/pkl/core/stdlib/base/ListNodes$lastIndexOfOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$lastOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$length : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)J
}

public abstract class org/pkl/core/stdlib/base/ListNodes$map : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$mapIndexed : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$mapNonNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$max : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$maxBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$maxByOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$maxOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$maxWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$maxWithOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$min : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$minBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$minByOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$minOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$minWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$minWithOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$partition : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmPair;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$reduce : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$reduceOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$repeat : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;J)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$replace : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;JLjava/lang/Object;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$replaceOrNull : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;JLjava/lang/Object;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$replaceRange : org/pkl/core/stdlib/ExternalMethod3Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;JJLorg/pkl/core/runtime/VmCollection;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$replaceRangeOrNull : org/pkl/core/stdlib/ExternalMethod3Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;JJLorg/pkl/core/runtime/VmCollection;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$rest : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$restOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$reverse : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$single : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$singleOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$sort : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$sortBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$sortWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$split : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;J)Lorg/pkl/core/runtime/VmPair;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$splitOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;J)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$startsWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmCollection;)Z
}

public abstract class org/pkl/core/stdlib/base/ListNodes$sublist : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;JJ)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$sublistOrNull : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;JJ)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$take : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;J)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$takeLast : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;J)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$takeLastWhile : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$takeWhile : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$toDynamic : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmDynamic;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$toList : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$toListing : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmListing;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$toMap : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmMap;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$toSet : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/ListNodes$zip : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmCollection;)Lorg/pkl/core/runtime/VmCollection;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$addNodeGen : org/pkl/core/stdlib/base/ListNodes$add {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$add;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$anyNodeGen : org/pkl/core/stdlib/base/ListNodes$any {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$any;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$containsNodeGen : org/pkl/core/stdlib/base/ListNodes$contains {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$contains;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$countNodeGen : org/pkl/core/stdlib/base/ListNodes$count {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$count;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$distinctByNodeGen : org/pkl/core/stdlib/base/ListNodes$distinctBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$distinctBy;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$distinctNodeGen : org/pkl/core/stdlib/base/ListNodes$distinct {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$distinct;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$dropLastNodeGen : org/pkl/core/stdlib/base/ListNodes$dropLast {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$dropLast;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$dropLastWhileNodeGen : org/pkl/core/stdlib/base/ListNodes$dropLastWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$dropLastWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$dropNodeGen : org/pkl/core/stdlib/base/ListNodes$drop {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$drop;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$dropWhileNodeGen : org/pkl/core/stdlib/base/ListNodes$dropWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$dropWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$endsWithNodeGen : org/pkl/core/stdlib/base/ListNodes$endsWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$endsWith;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$everyNodeGen : org/pkl/core/stdlib/base/ListNodes$every {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$every;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$filterIndexedNodeGen : org/pkl/core/stdlib/base/ListNodes$filterIndexed {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$filterIndexed;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$filterIsInstanceNodeGen : org/pkl/core/stdlib/base/ListNodes$filterIsInstance {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$filterIsInstance;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$filterNodeGen : org/pkl/core/stdlib/base/ListNodes$filter {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$filter;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$filterNonNullNodeGen : org/pkl/core/stdlib/base/ListNodes$filterNonNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$filterNonNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$findIndexNodeGen : org/pkl/core/stdlib/base/ListNodes$findIndex {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$findIndex;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$findIndexOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$findIndexOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$findIndexOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$findLastIndexNodeGen : org/pkl/core/stdlib/base/ListNodes$findLastIndex {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$findLastIndex;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$findLastIndexOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$findLastIndexOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$findLastIndexOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$findLastNodeGen : org/pkl/core/stdlib/base/ListNodes$findLast {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$findLast;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$findLastOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$findLastOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$findLastOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$findNodeGen : org/pkl/core/stdlib/base/ListNodes$find {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$find;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$findOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$findOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$findOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$firstNodeGen : org/pkl/core/stdlib/base/ListNodes$first {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$first;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$firstOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$firstOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$firstOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$flatMapIndexedNodeGen : org/pkl/core/stdlib/base/ListNodes$flatMapIndexed {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$flatMapIndexed;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$flatMapNodeGen : org/pkl/core/stdlib/base/ListNodes$flatMap {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$flatMap;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$flattenNodeGen : org/pkl/core/stdlib/base/ListNodes$flatten {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$flatten;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$foldBackNodeGen : org/pkl/core/stdlib/base/ListNodes$foldBack {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$foldBack;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$foldIndexedNodeGen : org/pkl/core/stdlib/base/ListNodes$foldIndexed {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$foldIndexed;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$foldNodeGen : org/pkl/core/stdlib/base/ListNodes$fold {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$fold;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$getOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$getOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$getOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$groupByNodeGen : org/pkl/core/stdlib/base/ListNodes$groupBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$groupBy;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$indexOfNodeGen : org/pkl/core/stdlib/base/ListNodes$indexOf {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$indexOf;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$indexOfOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$indexOfOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$indexOfOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$isDistinctByNodeGen : org/pkl/core/stdlib/base/ListNodes$isDistinctBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$isDistinctBy;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$isDistinctNodeGen : org/pkl/core/stdlib/base/ListNodes$isDistinct {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$isDistinct;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$isEmptyNodeGen : org/pkl/core/stdlib/base/ListNodes$isEmpty {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$isEmpty;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$joinNodeGen : org/pkl/core/stdlib/base/ListNodes$join {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$join;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$lastIndexNodeGen : org/pkl/core/stdlib/base/ListNodes$lastIndex {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$lastIndex;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$lastIndexOfNodeGen : org/pkl/core/stdlib/base/ListNodes$lastIndexOf {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$lastIndexOf;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$lastIndexOfOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$lastIndexOfOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$lastIndexOfOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$lastNodeGen : org/pkl/core/stdlib/base/ListNodes$last {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$last;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$lastOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$lastOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$lastOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$lengthNodeGen : org/pkl/core/stdlib/base/ListNodes$length {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$length;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$mapIndexedNodeGen : org/pkl/core/stdlib/base/ListNodes$mapIndexed {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$mapIndexed;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$mapNodeGen : org/pkl/core/stdlib/base/ListNodes$map {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$map;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$mapNonNullNodeGen : org/pkl/core/stdlib/base/ListNodes$mapNonNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$mapNonNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$maxByNodeGen : org/pkl/core/stdlib/base/ListNodes$maxBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$maxBy;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$maxByOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$maxByOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$maxByOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$maxNodeGen : org/pkl/core/stdlib/base/ListNodes$max {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$max;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$maxOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$maxOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$maxOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$maxWithNodeGen : org/pkl/core/stdlib/base/ListNodes$maxWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$maxWith;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$maxWithOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$maxWithOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$maxWithOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$minByNodeGen : org/pkl/core/stdlib/base/ListNodes$minBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$minBy;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$minByOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$minByOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$minByOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$minNodeGen : org/pkl/core/stdlib/base/ListNodes$min {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$min;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$minOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$minOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$minOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$minWithNodeGen : org/pkl/core/stdlib/base/ListNodes$minWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$minWith;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$minWithOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$minWithOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$minWithOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$partitionNodeGen : org/pkl/core/stdlib/base/ListNodes$partition {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$partition;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$reduceNodeGen : org/pkl/core/stdlib/base/ListNodes$reduce {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$reduce;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$reduceOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$reduceOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$reduceOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$repeatNodeGen : org/pkl/core/stdlib/base/ListNodes$repeat {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$repeat;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$replaceNodeGen : org/pkl/core/stdlib/base/ListNodes$replace {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$replace;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$replaceOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$replaceOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$replaceOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$replaceRangeNodeGen : org/pkl/core/stdlib/base/ListNodes$replaceRange {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$replaceRange;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$replaceRangeOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$replaceRangeOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$replaceRangeOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$restNodeGen : org/pkl/core/stdlib/base/ListNodes$rest {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$rest;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$restOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$restOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$restOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$reverseNodeGen : org/pkl/core/stdlib/base/ListNodes$reverse {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$reverse;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$singleNodeGen : org/pkl/core/stdlib/base/ListNodes$single {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$single;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$singleOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$singleOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$singleOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$sortByNodeGen : org/pkl/core/stdlib/base/ListNodes$sortBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$sortBy;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$sortNodeGen : org/pkl/core/stdlib/base/ListNodes$sort {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$sort;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$sortWithNodeGen : org/pkl/core/stdlib/base/ListNodes$sortWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$sortWith;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$splitNodeGen : org/pkl/core/stdlib/base/ListNodes$split {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$split;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$splitOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$splitOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$splitOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$startsWithNodeGen : org/pkl/core/stdlib/base/ListNodes$startsWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$startsWith;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$sublistNodeGen : org/pkl/core/stdlib/base/ListNodes$sublist {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$sublist;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$sublistOrNullNodeGen : org/pkl/core/stdlib/base/ListNodes$sublistOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$sublistOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$takeLastNodeGen : org/pkl/core/stdlib/base/ListNodes$takeLast {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$takeLast;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$takeLastWhileNodeGen : org/pkl/core/stdlib/base/ListNodes$takeLastWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$takeLastWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$takeNodeGen : org/pkl/core/stdlib/base/ListNodes$take {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$take;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$takeWhileNodeGen : org/pkl/core/stdlib/base/ListNodes$takeWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$takeWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$toDynamicNodeGen : org/pkl/core/stdlib/base/ListNodes$toDynamic {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$toDynamic;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$toListNodeGen : org/pkl/core/stdlib/base/ListNodes$toList {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$toList;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$toListingNodeGen : org/pkl/core/stdlib/base/ListNodes$toListing {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$toListing;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$toMapNodeGen : org/pkl/core/stdlib/base/ListNodes$toMap {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$toMap;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$toSetNodeGen : org/pkl/core/stdlib/base/ListNodes$toSet {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$toSet;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListNodesFactory$zipNodeGen : org/pkl/core/stdlib/base/ListNodes$zip {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListNodes$zip;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListingNodes {
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$any : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$contains : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;Ljava/lang/Object;)Z
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$distinct : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Lorg/pkl/core/runtime/VmListing;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$distinctBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmListing;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$every : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$first : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$firstOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$fold : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$foldIndexed : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$getOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;J)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$isDistinct : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Z
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$isDistinctBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$isEmpty : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Z
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$join : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$last : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$lastIndex : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)J
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$lastOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$length : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)J
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$single : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$singleOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$toList : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/ListingNodes$toSet : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmListing;)Lorg/pkl/core/runtime/VmSet;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$anyNodeGen : org/pkl/core/stdlib/base/ListingNodes$any {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$any;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$containsNodeGen : org/pkl/core/stdlib/base/ListingNodes$contains {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$contains;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$distinctByNodeGen : org/pkl/core/stdlib/base/ListingNodes$distinctBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$distinctBy;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$distinctNodeGen : org/pkl/core/stdlib/base/ListingNodes$distinct {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$distinct;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$everyNodeGen : org/pkl/core/stdlib/base/ListingNodes$every {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$every;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$firstNodeGen : org/pkl/core/stdlib/base/ListingNodes$first {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$first;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$firstOrNullNodeGen : org/pkl/core/stdlib/base/ListingNodes$firstOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$firstOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$foldIndexedNodeGen : org/pkl/core/stdlib/base/ListingNodes$foldIndexed {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$foldIndexed;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$foldNodeGen : org/pkl/core/stdlib/base/ListingNodes$fold {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$fold;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$getOrNullNodeGen : org/pkl/core/stdlib/base/ListingNodes$getOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$getOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$isDistinctByNodeGen : org/pkl/core/stdlib/base/ListingNodes$isDistinctBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$isDistinctBy;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$isDistinctNodeGen : org/pkl/core/stdlib/base/ListingNodes$isDistinct {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$isDistinct;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$isEmptyNodeGen : org/pkl/core/stdlib/base/ListingNodes$isEmpty {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$isEmpty;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$joinNodeGen : org/pkl/core/stdlib/base/ListingNodes$join {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$join;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$lastIndexNodeGen : org/pkl/core/stdlib/base/ListingNodes$lastIndex {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$lastIndex;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$lastNodeGen : org/pkl/core/stdlib/base/ListingNodes$last {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$last;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$lastOrNullNodeGen : org/pkl/core/stdlib/base/ListingNodes$lastOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$lastOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$lengthNodeGen : org/pkl/core/stdlib/base/ListingNodes$length {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$length;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$singleNodeGen : org/pkl/core/stdlib/base/ListingNodes$single {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$single;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$singleOrNullNodeGen : org/pkl/core/stdlib/base/ListingNodes$singleOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$singleOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$toListNodeGen : org/pkl/core/stdlib/base/ListingNodes$toList {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$toList;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ListingNodesFactory$toSetNodeGen : org/pkl/core/stdlib/base/ListingNodes$toSet {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ListingNodes$toSet;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MapNodes {
}

public abstract class org/pkl/core/stdlib/base/MapNodes$any : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/MapNodes$containsKey : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Ljava/lang/Object;)Z
}

public abstract class org/pkl/core/stdlib/base/MapNodes$containsValue : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Ljava/lang/Object;)Z
}

public abstract class org/pkl/core/stdlib/base/MapNodes$entries : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$every : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/MapNodes$filter : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmMap;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$flatMap : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmMap;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$fold : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$getOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$isEmpty : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;)Z
}

public abstract class org/pkl/core/stdlib/base/MapNodes$keys : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$length : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;)J
}

public abstract class org/pkl/core/stdlib/base/MapNodes$map : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmMap;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$mapKeys : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/ast/lambda/ApplyVmFunction2Node;)Lorg/pkl/core/runtime/VmMap;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$mapValues : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/ast/lambda/ApplyVmFunction2Node;)Lorg/pkl/core/runtime/VmMap;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$put : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Ljava/lang/Object;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmMap;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$remove : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmMap;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$toDynamic : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;)Lorg/pkl/core/runtime/VmDynamic;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$toMap : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;)Lorg/pkl/core/runtime/VmMap;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$toMapping : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;)Lorg/pkl/core/runtime/VmMapping;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$toTyped : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/base/MapNodes$values : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMap;)Lorg/pkl/core/runtime/VmList;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$anyNodeGen : org/pkl/core/stdlib/base/MapNodes$any {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$any;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$containsKeyNodeGen : org/pkl/core/stdlib/base/MapNodes$containsKey {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$containsKey;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$containsValueNodeGen : org/pkl/core/stdlib/base/MapNodes$containsValue {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$containsValue;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$entriesNodeGen : org/pkl/core/stdlib/base/MapNodes$entries {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$entries;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$everyNodeGen : org/pkl/core/stdlib/base/MapNodes$every {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$every;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$filterNodeGen : org/pkl/core/stdlib/base/MapNodes$filter {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$filter;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$flatMapNodeGen : org/pkl/core/stdlib/base/MapNodes$flatMap {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$flatMap;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$foldNodeGen : org/pkl/core/stdlib/base/MapNodes$fold {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$fold;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$getOrNullNodeGen : org/pkl/core/stdlib/base/MapNodes$getOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$getOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$isEmptyNodeGen : org/pkl/core/stdlib/base/MapNodes$isEmpty {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$isEmpty;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$keysNodeGen : org/pkl/core/stdlib/base/MapNodes$keys {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$keys;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$lengthNodeGen : org/pkl/core/stdlib/base/MapNodes$length {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$length;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$mapKeysNodeGen : org/pkl/core/stdlib/base/MapNodes$mapKeys {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$mapKeys;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$mapNodeGen : org/pkl/core/stdlib/base/MapNodes$map {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$map;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$mapValuesNodeGen : org/pkl/core/stdlib/base/MapNodes$mapValues {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$mapValues;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$putNodeGen : org/pkl/core/stdlib/base/MapNodes$put {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$put;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$removeNodeGen : org/pkl/core/stdlib/base/MapNodes$remove {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$remove;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$toDynamicNodeGen : org/pkl/core/stdlib/base/MapNodes$toDynamic {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$toDynamic;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$toMapNodeGen : org/pkl/core/stdlib/base/MapNodes$toMap {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$toMap;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$toMappingNodeGen : org/pkl/core/stdlib/base/MapNodes$toMapping {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$toMapping;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$toTypedNodeGen : org/pkl/core/stdlib/base/MapNodes$toTyped {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$toTyped;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MapNodesFactory$valuesNodeGen : org/pkl/core/stdlib/base/MapNodes$values {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MapNodes$values;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MappingNodes {
}

public abstract class org/pkl/core/stdlib/base/MappingNodes$any : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/MappingNodes$containsKey : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;Ljava/lang/Object;)Z
}

public abstract class org/pkl/core/stdlib/base/MappingNodes$containsValue : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;Ljava/lang/Object;)Z
}

public abstract class org/pkl/core/stdlib/base/MappingNodes$every : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/MappingNodes$fold : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/MappingNodes$getOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;Ljava/lang/Object;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/MappingNodes$isEmpty : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;)Z
}

public abstract class org/pkl/core/stdlib/base/MappingNodes$keys : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/MappingNodes$length : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;)J
}

public abstract class org/pkl/core/stdlib/base/MappingNodes$toMap : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmMapping;)Lorg/pkl/core/runtime/VmMap;
}

public final class org/pkl/core/stdlib/base/MappingNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/MappingNodesFactory$anyNodeGen : org/pkl/core/stdlib/base/MappingNodes$any {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MappingNodes$any;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MappingNodesFactory$containsKeyNodeGen : org/pkl/core/stdlib/base/MappingNodes$containsKey {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MappingNodes$containsKey;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MappingNodesFactory$containsValueNodeGen : org/pkl/core/stdlib/base/MappingNodes$containsValue {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MappingNodes$containsValue;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MappingNodesFactory$everyNodeGen : org/pkl/core/stdlib/base/MappingNodes$every {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MappingNodes$every;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MappingNodesFactory$foldNodeGen : org/pkl/core/stdlib/base/MappingNodes$fold {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MappingNodes$fold;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MappingNodesFactory$getOrNullNodeGen : org/pkl/core/stdlib/base/MappingNodes$getOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MappingNodes$getOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/MappingNodesFactory$isEmptyNodeGen : org/pkl/core/stdlib/base/MappingNodes$isEmpty {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MappingNodes$isEmpty;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MappingNodesFactory$keysNodeGen : org/pkl/core/stdlib/base/MappingNodes$keys {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MappingNodes$keys;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/MappingNodesFactory$lengthNodeGen : org/pkl/core/stdlib/base/MappingNodes$length {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MappingNodes$length;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/MappingNodesFactory$toMapNodeGen : org/pkl/core/stdlib/base/MappingNodes$toMap {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/MappingNodes$toMap;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ModuleClassNodes {
}

public abstract class org/pkl/core/stdlib/base/ModuleClassNodes$relativePathTo : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmObjectLike;Lorg/pkl/core/runtime/VmObjectLike;)Lorg/pkl/core/runtime/VmList;
}

public final class org/pkl/core/stdlib/base/ModuleClassNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/ModuleClassNodesFactory$relativePathToNodeGen : org/pkl/core/stdlib/base/ModuleClassNodes$relativePathTo {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ModuleClassNodes$relativePathTo;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/PListRendererNodes {
}

public abstract class org/pkl/core/stdlib/base/PListRendererNodes$renderDocument : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/PListRendererNodes$renderValue : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/base/PListRendererNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/PListRendererNodesFactory$renderDocumentNodeGen : org/pkl/core/stdlib/base/PListRendererNodes$renderDocument {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/PListRendererNodes$renderDocument;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/PListRendererNodesFactory$renderValueNodeGen : org/pkl/core/stdlib/base/PListRendererNodes$renderValue {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/PListRendererNodes$renderValue;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/PairNodes {
}

public abstract class org/pkl/core/stdlib/base/PairNodes$first : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmPair;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/PairNodes$key : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmPair;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/PairNodes$second : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmPair;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/PairNodes$value : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmPair;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/PairNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/PairNodesFactory$firstNodeGen : org/pkl/core/stdlib/base/PairNodes$first {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/PairNodes$first;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/PairNodesFactory$keyNodeGen : org/pkl/core/stdlib/base/PairNodes$key {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/PairNodes$key;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/PairNodesFactory$secondNodeGen : org/pkl/core/stdlib/base/PairNodes$second {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/PairNodes$second;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/PairNodesFactory$valueNodeGen : org/pkl/core/stdlib/base/PairNodes$value {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/PairNodes$value;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/PcfRenderer : org/pkl/core/stdlib/AbstractRenderer {
	public fun <init> (Ljava/lang/StringBuilder;Ljava/lang/String;Lorg/pkl/core/stdlib/PklConverter;ZZ)V
	public fun visitBoolean (Ljava/lang/Boolean;)V
	public fun visitDataSize (Lorg/pkl/core/runtime/VmDataSize;)V
	public fun visitDuration (Lorg/pkl/core/runtime/VmDuration;)V
	public fun visitFloat (Ljava/lang/Double;)V
	public fun visitInt (Ljava/lang/Long;)V
	public fun visitIntSeq (Lorg/pkl/core/runtime/VmIntSeq;)V
	public fun visitNull (Lorg/pkl/core/runtime/VmNull;)V
	public fun visitPair (Lorg/pkl/core/runtime/VmPair;)V
	public fun visitRegex (Lorg/pkl/core/runtime/VmRegex;)V
	public fun visitString (Ljava/lang/String;)V
	public fun visitTyped (Lorg/pkl/core/runtime/VmTyped;)V
}

public final class org/pkl/core/stdlib/base/PcfRendererNodes {
}

public abstract class org/pkl/core/stdlib/base/PcfRendererNodes$renderDocument : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/PcfRendererNodes$renderValue : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/base/PcfRendererNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/PcfRendererNodesFactory$renderDocumentNodeGen : org/pkl/core/stdlib/base/PcfRendererNodes$renderDocument {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/PcfRendererNodes$renderDocument;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/PcfRendererNodesFactory$renderValueNodeGen : org/pkl/core/stdlib/base/PcfRendererNodes$renderValue {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/PcfRendererNodes$renderValue;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/PropertiesRendererNodes {
}

public abstract class org/pkl/core/stdlib/base/PropertiesRendererNodes$renderDocument : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/PropertiesRendererNodes$renderValue : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/base/PropertiesRendererNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/PropertiesRendererNodesFactory$renderDocumentNodeGen : org/pkl/core/stdlib/base/PropertiesRendererNodes$renderDocument {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/PropertiesRendererNodes$renderDocument;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/PropertiesRendererNodesFactory$renderValueNodeGen : org/pkl/core/stdlib/base/PropertiesRendererNodes$renderValue {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/PropertiesRendererNodes$renderValue;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/RegexNodes {
}

public abstract class org/pkl/core/stdlib/base/RegexNodes$findMatchesIn : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmRegex;Ljava/lang/String;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/RegexNodes$groupCount : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmRegex;)J
}

public abstract class org/pkl/core/stdlib/base/RegexNodes$matchEntire : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmRegex;Ljava/lang/String;)Lorg/pkl/core/runtime/VmValue;
}

public abstract class org/pkl/core/stdlib/base/RegexNodes$pattern : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmRegex;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/base/RegexNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/RegexNodesFactory$findMatchesInNodeGen : org/pkl/core/stdlib/base/RegexNodes$findMatchesIn {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/RegexNodes$findMatchesIn;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/RegexNodesFactory$groupCountNodeGen : org/pkl/core/stdlib/base/RegexNodes$groupCount {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/RegexNodes$groupCount;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/RegexNodesFactory$matchEntireNodeGen : org/pkl/core/stdlib/base/RegexNodes$matchEntire {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/RegexNodes$matchEntire;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/RegexNodesFactory$patternNodeGen : org/pkl/core/stdlib/base/RegexNodes$pattern {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/RegexNodes$pattern;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ResourceNodes {
}

public abstract class org/pkl/core/stdlib/base/ResourceNodes$md5 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun evalWithExtraStorage (Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/String;
	protected fun evalWithoutExtraStorage (Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/ResourceNodes$sha1 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun evalWithExtraStorage (Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/String;
	protected fun evalWithoutExtraStorage (Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/ResourceNodes$sha256 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun evalWithExtraStorage (Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/String;
	protected fun evalWithoutExtraStorage (Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/ResourceNodes$sha256Int : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun evalWithExtraStorage (Lorg/pkl/core/runtime/VmTyped;)J
	protected fun evalWithoutExtraStorage (Lorg/pkl/core/runtime/VmTyped;)J
}

public final class org/pkl/core/stdlib/base/ResourceNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/ResourceNodesFactory$md5NodeGen : org/pkl/core/stdlib/base/ResourceNodes$md5 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ResourceNodes$md5;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ResourceNodesFactory$sha1NodeGen : org/pkl/core/stdlib/base/ResourceNodes$sha1 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ResourceNodes$sha1;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/ResourceNodesFactory$sha256IntNodeGen : org/pkl/core/stdlib/base/ResourceNodes$sha256Int {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ResourceNodes$sha256Int;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/ResourceNodesFactory$sha256NodeGen : org/pkl/core/stdlib/base/ResourceNodes$sha256 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/ResourceNodes$sha256;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodes {
}

public abstract class org/pkl/core/stdlib/base/SetNodes$add : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Ljava/lang/Object;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$any : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/SetNodes$contains : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Ljava/lang/Object;)Z
}

public abstract class org/pkl/core/stdlib/base/SetNodes$count : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)J
}

public abstract class org/pkl/core/stdlib/base/SetNodes$difference : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$drop : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;J)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$dropLast : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;J)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$dropLastWhile : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$dropWhile : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$endsWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmCollection;)Z
}

public abstract class org/pkl/core/stdlib/base/SetNodes$every : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Z
}

public abstract class org/pkl/core/stdlib/base/SetNodes$filter : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$filterIndexed : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$filterIsInstance : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$filterNonNull : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$find : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$findLast : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$findLastOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$findOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$first : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$firstOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$flatMap : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$flatMapIndexed : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$flatten : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$fold : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$foldBack : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$foldIndexed : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Ljava/lang/Object;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$groupBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$intersect : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$isEmpty : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Z
}

public abstract class org/pkl/core/stdlib/base/SetNodes$join : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$last : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$lastOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$length : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)J
}

public abstract class org/pkl/core/stdlib/base/SetNodes$map : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$mapIndexed : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$mapNonNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$max : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$maxBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$maxByOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$maxOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$maxWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$maxWithOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$min : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$minBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$minByOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$minOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$minWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$minWithOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$partition : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmPair;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$reduce : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$reduceOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$repeat : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;J)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$rest : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$restOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$reverse : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$single : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$singleOrNull : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$sort : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$sortBy : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$sortWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$split : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;J)Lorg/pkl/core/runtime/VmPair;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$splitOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;J)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$startsWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmCollection;)Z
}

public abstract class org/pkl/core/stdlib/base/SetNodes$take : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;J)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$takeLast : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;J)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$takeLastWhile : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$takeWhile : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$toDynamic : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmDynamic;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$toList : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$toListing : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmListing;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$toMap : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmFunction;Lorg/pkl/core/runtime/VmFunction;)Lorg/pkl/core/runtime/VmMap;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$toSet : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;)Lorg/pkl/core/runtime/VmSet;
}

public abstract class org/pkl/core/stdlib/base/SetNodes$zip : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmSet;Lorg/pkl/core/runtime/VmCollection;)Lorg/pkl/core/runtime/VmCollection;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$addNodeGen : org/pkl/core/stdlib/base/SetNodes$add {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$add;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$anyNodeGen : org/pkl/core/stdlib/base/SetNodes$any {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$any;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$containsNodeGen : org/pkl/core/stdlib/base/SetNodes$contains {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$contains;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$countNodeGen : org/pkl/core/stdlib/base/SetNodes$count {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$count;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$differenceNodeGen : org/pkl/core/stdlib/base/SetNodes$difference {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$difference;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$dropLastNodeGen : org/pkl/core/stdlib/base/SetNodes$dropLast {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$dropLast;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$dropLastWhileNodeGen : org/pkl/core/stdlib/base/SetNodes$dropLastWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$dropLastWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$dropNodeGen : org/pkl/core/stdlib/base/SetNodes$drop {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$drop;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$dropWhileNodeGen : org/pkl/core/stdlib/base/SetNodes$dropWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$dropWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$endsWithNodeGen : org/pkl/core/stdlib/base/SetNodes$endsWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$endsWith;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$everyNodeGen : org/pkl/core/stdlib/base/SetNodes$every {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$every;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$filterIndexedNodeGen : org/pkl/core/stdlib/base/SetNodes$filterIndexed {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$filterIndexed;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$filterIsInstanceNodeGen : org/pkl/core/stdlib/base/SetNodes$filterIsInstance {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$filterIsInstance;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$filterNodeGen : org/pkl/core/stdlib/base/SetNodes$filter {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$filter;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$filterNonNullNodeGen : org/pkl/core/stdlib/base/SetNodes$filterNonNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$filterNonNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$findLastNodeGen : org/pkl/core/stdlib/base/SetNodes$findLast {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$findLast;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$findLastOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$findLastOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$findLastOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$findNodeGen : org/pkl/core/stdlib/base/SetNodes$find {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$find;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$findOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$findOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$findOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$firstNodeGen : org/pkl/core/stdlib/base/SetNodes$first {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$first;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$firstOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$firstOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$firstOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$flatMapIndexedNodeGen : org/pkl/core/stdlib/base/SetNodes$flatMapIndexed {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$flatMapIndexed;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$flatMapNodeGen : org/pkl/core/stdlib/base/SetNodes$flatMap {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$flatMap;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$flattenNodeGen : org/pkl/core/stdlib/base/SetNodes$flatten {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$flatten;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$foldBackNodeGen : org/pkl/core/stdlib/base/SetNodes$foldBack {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$foldBack;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$foldIndexedNodeGen : org/pkl/core/stdlib/base/SetNodes$foldIndexed {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$foldIndexed;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$foldNodeGen : org/pkl/core/stdlib/base/SetNodes$fold {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$fold;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$groupByNodeGen : org/pkl/core/stdlib/base/SetNodes$groupBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$groupBy;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$intersectNodeGen : org/pkl/core/stdlib/base/SetNodes$intersect {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$intersect;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$isEmptyNodeGen : org/pkl/core/stdlib/base/SetNodes$isEmpty {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$isEmpty;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$joinNodeGen : org/pkl/core/stdlib/base/SetNodes$join {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$join;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$lastNodeGen : org/pkl/core/stdlib/base/SetNodes$last {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$last;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$lastOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$lastOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$lastOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$lengthNodeGen : org/pkl/core/stdlib/base/SetNodes$length {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$length;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$mapIndexedNodeGen : org/pkl/core/stdlib/base/SetNodes$mapIndexed {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$mapIndexed;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$mapNodeGen : org/pkl/core/stdlib/base/SetNodes$map {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$map;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$mapNonNullNodeGen : org/pkl/core/stdlib/base/SetNodes$mapNonNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$mapNonNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$maxByNodeGen : org/pkl/core/stdlib/base/SetNodes$maxBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$maxBy;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$maxByOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$maxByOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$maxByOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$maxNodeGen : org/pkl/core/stdlib/base/SetNodes$max {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$max;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$maxOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$maxOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$maxOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$maxWithNodeGen : org/pkl/core/stdlib/base/SetNodes$maxWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$maxWith;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$maxWithOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$maxWithOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$maxWithOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$minByNodeGen : org/pkl/core/stdlib/base/SetNodes$minBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$minBy;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$minByOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$minByOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$minByOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$minNodeGen : org/pkl/core/stdlib/base/SetNodes$min {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$min;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$minOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$minOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$minOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$minWithNodeGen : org/pkl/core/stdlib/base/SetNodes$minWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$minWith;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$minWithOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$minWithOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$minWithOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$partitionNodeGen : org/pkl/core/stdlib/base/SetNodes$partition {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$partition;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$reduceNodeGen : org/pkl/core/stdlib/base/SetNodes$reduce {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$reduce;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$reduceOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$reduceOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$reduceOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$repeatNodeGen : org/pkl/core/stdlib/base/SetNodes$repeat {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$repeat;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$restNodeGen : org/pkl/core/stdlib/base/SetNodes$rest {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$rest;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$restOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$restOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$restOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$reverseNodeGen : org/pkl/core/stdlib/base/SetNodes$reverse {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$reverse;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$singleNodeGen : org/pkl/core/stdlib/base/SetNodes$single {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$single;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$singleOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$singleOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$singleOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$sortByNodeGen : org/pkl/core/stdlib/base/SetNodes$sortBy {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$sortBy;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$sortNodeGen : org/pkl/core/stdlib/base/SetNodes$sort {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$sort;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$sortWithNodeGen : org/pkl/core/stdlib/base/SetNodes$sortWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$sortWith;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$splitNodeGen : org/pkl/core/stdlib/base/SetNodes$split {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$split;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$splitOrNullNodeGen : org/pkl/core/stdlib/base/SetNodes$splitOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$splitOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$startsWithNodeGen : org/pkl/core/stdlib/base/SetNodes$startsWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$startsWith;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$takeLastNodeGen : org/pkl/core/stdlib/base/SetNodes$takeLast {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$takeLast;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$takeLastWhileNodeGen : org/pkl/core/stdlib/base/SetNodes$takeLastWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$takeLastWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$takeNodeGen : org/pkl/core/stdlib/base/SetNodes$take {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$take;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$takeWhileNodeGen : org/pkl/core/stdlib/base/SetNodes$takeWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$takeWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$toDynamicNodeGen : org/pkl/core/stdlib/base/SetNodes$toDynamic {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$toDynamic;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$toListNodeGen : org/pkl/core/stdlib/base/SetNodes$toList {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$toList;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$toListingNodeGen : org/pkl/core/stdlib/base/SetNodes$toListing {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$toListing;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$toMapNodeGen : org/pkl/core/stdlib/base/SetNodes$toMap {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$toMap;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$toSetNodeGen : org/pkl/core/stdlib/base/SetNodes$toSet {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$toSet;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/SetNodesFactory$zipNodeGen : org/pkl/core/stdlib/base/SetNodes$zip {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/SetNodes$zip;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodes {
}

public abstract class org/pkl/core/stdlib/base/StringNodes$TakeDropLastWhile : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun findOffset (Ljava/lang/String;Lorg/pkl/core/runtime/VmFunction;)I
}

public abstract class org/pkl/core/stdlib/base/StringNodes$TakeDropWhile : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun findOffset (Ljava/lang/String;Lorg/pkl/core/runtime/VmFunction;)I
}

public abstract class org/pkl/core/stdlib/base/StringNodes$base64 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$base64Decoded : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$capitalize : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$chars : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$codePoints : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$contains : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Z
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;)Z
}

public abstract class org/pkl/core/stdlib/base/StringNodes$decapitalize : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$drop : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;J)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$dropLast : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;J)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$dropLastWhile : org/pkl/core/stdlib/base/StringNodes$TakeDropLastWhile {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$dropWhile : org/pkl/core/stdlib/base/StringNodes$TakeDropWhile {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$endsWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Z
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;)Z
}

public abstract class org/pkl/core/stdlib/base/StringNodes$getOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;J)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$indexOf : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)J
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;)J
}

public abstract class org/pkl/core/stdlib/base/StringNodes$indexOfOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$isBlank : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Z
}

public abstract class org/pkl/core/stdlib/base/StringNodes$isEmpty : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Z
}

public abstract class org/pkl/core/stdlib/base/StringNodes$isRegex : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Z
}

public abstract class org/pkl/core/stdlib/base/StringNodes$lastIndex : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)J
}

public abstract class org/pkl/core/stdlib/base/StringNodes$lastIndexOf : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)J
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;)J
}

public abstract class org/pkl/core/stdlib/base/StringNodes$lastIndexOfOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$length : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)J
}

public abstract class org/pkl/core/stdlib/base/StringNodes$matches : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;)Z
}

public abstract class org/pkl/core/stdlib/base/StringNodes$md5 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$padEnd : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;JLjava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$padStart : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;JLjava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$repeat : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;J)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$replaceAll : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$replaceAllMapped : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/String;
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$replaceFirst : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$replaceFirstMapped : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/String;
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$replaceLast : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$replaceLastMapped : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/String;
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$replaceRange : org/pkl/core/stdlib/ExternalMethod3Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;JJLjava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$reverse : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$sha1 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$sha256 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$sha256Int : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)J
}

public abstract class org/pkl/core/stdlib/base/StringNodes$split : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Lorg/pkl/core/runtime/VmList;
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$splitLimit : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;J)Lorg/pkl/core/runtime/VmList;
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;J)Lorg/pkl/core/runtime/VmList;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$startsWith : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Ljava/lang/String;)Z
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmRegex;)Z
}

public abstract class org/pkl/core/stdlib/base/StringNodes$substring : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;JJ)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$substringOrNull : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;JJ)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$take : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;J)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$takeLast : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;J)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$takeLastWhile : org/pkl/core/stdlib/base/StringNodes$TakeDropLastWhile {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$takeWhile : org/pkl/core/stdlib/base/StringNodes$TakeDropWhile {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$toBoolean : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Z
}

public abstract class org/pkl/core/stdlib/base/StringNodes$toBooleanOrNull : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$toFloat : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)D
}

public abstract class org/pkl/core/stdlib/base/StringNodes$toFloatOrNull : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$toInt : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)J
}

public abstract class org/pkl/core/stdlib/base/StringNodes$toIntOrNull : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$toLowerCase : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$toUpperCase : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$trim : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$trimEnd : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/StringNodes$trimStart : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Ljava/lang/String;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$base64DecodedNodeGen : org/pkl/core/stdlib/base/StringNodes$base64Decoded {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$base64Decoded;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$base64NodeGen : org/pkl/core/stdlib/base/StringNodes$base64 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$base64;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$capitalizeNodeGen : org/pkl/core/stdlib/base/StringNodes$capitalize {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$capitalize;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$charsNodeGen : org/pkl/core/stdlib/base/StringNodes$chars {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$chars;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$codePointsNodeGen : org/pkl/core/stdlib/base/StringNodes$codePoints {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$codePoints;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$containsNodeGen : org/pkl/core/stdlib/base/StringNodes$contains {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$contains;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$decapitalizeNodeGen : org/pkl/core/stdlib/base/StringNodes$decapitalize {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$decapitalize;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$dropLastNodeGen : org/pkl/core/stdlib/base/StringNodes$dropLast {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$dropLast;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$dropLastWhileNodeGen : org/pkl/core/stdlib/base/StringNodes$dropLastWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$dropLastWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$dropNodeGen : org/pkl/core/stdlib/base/StringNodes$drop {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$drop;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$dropWhileNodeGen : org/pkl/core/stdlib/base/StringNodes$dropWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$dropWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$endsWithNodeGen : org/pkl/core/stdlib/base/StringNodes$endsWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$endsWith;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$getOrNullNodeGen : org/pkl/core/stdlib/base/StringNodes$getOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$getOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$indexOfNodeGen : org/pkl/core/stdlib/base/StringNodes$indexOf {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$indexOf;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$indexOfOrNullNodeGen : org/pkl/core/stdlib/base/StringNodes$indexOfOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$indexOfOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$isBlankNodeGen : org/pkl/core/stdlib/base/StringNodes$isBlank {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$isBlank;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$isEmptyNodeGen : org/pkl/core/stdlib/base/StringNodes$isEmpty {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$isEmpty;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$isRegexNodeGen : org/pkl/core/stdlib/base/StringNodes$isRegex {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$isRegex;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$lastIndexNodeGen : org/pkl/core/stdlib/base/StringNodes$lastIndex {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$lastIndex;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$lastIndexOfNodeGen : org/pkl/core/stdlib/base/StringNodes$lastIndexOf {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$lastIndexOf;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$lastIndexOfOrNullNodeGen : org/pkl/core/stdlib/base/StringNodes$lastIndexOfOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$lastIndexOfOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$lengthNodeGen : org/pkl/core/stdlib/base/StringNodes$length {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$length;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$matchesNodeGen : org/pkl/core/stdlib/base/StringNodes$matches {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$matches;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$md5NodeGen : org/pkl/core/stdlib/base/StringNodes$md5 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$md5;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$padEndNodeGen : org/pkl/core/stdlib/base/StringNodes$padEnd {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$padEnd;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$padStartNodeGen : org/pkl/core/stdlib/base/StringNodes$padStart {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$padStart;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$repeatNodeGen : org/pkl/core/stdlib/base/StringNodes$repeat {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$repeat;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$replaceAllMappedNodeGen : org/pkl/core/stdlib/base/StringNodes$replaceAllMapped {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$replaceAllMapped;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$replaceAllNodeGen : org/pkl/core/stdlib/base/StringNodes$replaceAll {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$replaceAll;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$replaceFirstMappedNodeGen : org/pkl/core/stdlib/base/StringNodes$replaceFirstMapped {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$replaceFirstMapped;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$replaceFirstNodeGen : org/pkl/core/stdlib/base/StringNodes$replaceFirst {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$replaceFirst;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$replaceLastMappedNodeGen : org/pkl/core/stdlib/base/StringNodes$replaceLastMapped {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$replaceLastMapped;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$replaceLastNodeGen : org/pkl/core/stdlib/base/StringNodes$replaceLast {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$replaceLast;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$replaceRangeNodeGen : org/pkl/core/stdlib/base/StringNodes$replaceRange {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$replaceRange;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$reverseNodeGen : org/pkl/core/stdlib/base/StringNodes$reverse {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$reverse;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$sha1NodeGen : org/pkl/core/stdlib/base/StringNodes$sha1 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$sha1;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$sha256IntNodeGen : org/pkl/core/stdlib/base/StringNodes$sha256Int {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$sha256Int;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$sha256NodeGen : org/pkl/core/stdlib/base/StringNodes$sha256 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$sha256;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$splitLimitNodeGen : org/pkl/core/stdlib/base/StringNodes$splitLimit {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$splitLimit;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$splitNodeGen : org/pkl/core/stdlib/base/StringNodes$split {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$split;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$startsWithNodeGen : org/pkl/core/stdlib/base/StringNodes$startsWith {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$startsWith;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$substringNodeGen : org/pkl/core/stdlib/base/StringNodes$substring {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$substring;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$substringOrNullNodeGen : org/pkl/core/stdlib/base/StringNodes$substringOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$substringOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$takeLastNodeGen : org/pkl/core/stdlib/base/StringNodes$takeLast {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$takeLast;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$takeLastWhileNodeGen : org/pkl/core/stdlib/base/StringNodes$takeLastWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$takeLastWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$takeNodeGen : org/pkl/core/stdlib/base/StringNodes$take {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$take;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$takeWhileNodeGen : org/pkl/core/stdlib/base/StringNodes$takeWhile {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$takeWhile;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$toBooleanNodeGen : org/pkl/core/stdlib/base/StringNodes$toBoolean {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$toBoolean;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$toBooleanOrNullNodeGen : org/pkl/core/stdlib/base/StringNodes$toBooleanOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$toBooleanOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$toFloatNodeGen : org/pkl/core/stdlib/base/StringNodes$toFloat {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$toFloat;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$toFloatOrNullNodeGen : org/pkl/core/stdlib/base/StringNodes$toFloatOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$toFloatOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$toIntNodeGen : org/pkl/core/stdlib/base/StringNodes$toInt {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$toInt;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$toIntOrNullNodeGen : org/pkl/core/stdlib/base/StringNodes$toIntOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$toIntOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$toLowerCaseNodeGen : org/pkl/core/stdlib/base/StringNodes$toLowerCase {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$toLowerCase;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$toUpperCaseNodeGen : org/pkl/core/stdlib/base/StringNodes$toUpperCase {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$toUpperCase;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$trimEndNodeGen : org/pkl/core/stdlib/base/StringNodes$trimEnd {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$trimEnd;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$trimNodeGen : org/pkl/core/stdlib/base/StringNodes$trim {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$trim;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/StringNodesFactory$trimStartNodeGen : org/pkl/core/stdlib/base/StringNodes$trimStart {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/StringNodes$trimStart;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/TypedNodes {
}

public abstract class org/pkl/core/stdlib/base/TypedNodes$getProperty : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/TypedNodes$getPropertyOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/TypedNodes$hasProperty : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/String;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/base/TypedNodes$toDynamic : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmObjectLike;
}

public abstract class org/pkl/core/stdlib/base/TypedNodes$toMap : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmMap;
}

public final class org/pkl/core/stdlib/base/TypedNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/TypedNodesFactory$getPropertyNodeGen : org/pkl/core/stdlib/base/TypedNodes$getProperty {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/TypedNodes$getProperty;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/TypedNodesFactory$getPropertyOrNullNodeGen : org/pkl/core/stdlib/base/TypedNodes$getPropertyOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/TypedNodes$getPropertyOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/TypedNodesFactory$hasPropertyNodeGen : org/pkl/core/stdlib/base/TypedNodes$hasProperty {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/TypedNodes$hasProperty;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/TypedNodesFactory$toDynamicNodeGen : org/pkl/core/stdlib/base/TypedNodes$toDynamic {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/TypedNodes$toDynamic;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/TypedNodesFactory$toMapNodeGen : org/pkl/core/stdlib/base/TypedNodes$toMap {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/TypedNodes$toMap;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/base/YamlRendererNodes {
}

public abstract class org/pkl/core/stdlib/base/YamlRendererNodes$renderDocument : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/base/YamlRendererNodes$renderValue : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/base/YamlRendererNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/base/YamlRendererNodesFactory$renderDocumentNodeGen : org/pkl/core/stdlib/base/YamlRendererNodes$renderDocument {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/YamlRendererNodes$renderDocument;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/base/YamlRendererNodesFactory$renderValueNodeGen : org/pkl/core/stdlib/base/YamlRendererNodes$renderValue {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/base/YamlRendererNodes$renderValue;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/benchmark/MicrobenchmarkNodes {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/benchmark/MicrobenchmarkNodes$RunIterationsNode : org/pkl/core/ast/PklRootNode {
	public fun <init> (Lorg/pkl/core/runtime/VmLanguage;Lcom/oracle/truffle/api/frame/FrameDescriptor;Lorg/pkl/core/ast/ExpressionNode;)V
	public fun getName ()Ljava/lang/String;
	public fun getSourceSection ()Lcom/oracle/truffle/api/source/SourceSection;
	public fun isInternal ()Z
}

public abstract class org/pkl/core/stdlib/benchmark/MicrobenchmarkNodes$run : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/stdlib/benchmark/MicrobenchmarkNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/benchmark/MicrobenchmarkNodesFactory$runNodeGen : org/pkl/core/stdlib/benchmark/MicrobenchmarkNodes$run {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/benchmark/MicrobenchmarkNodes$run;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/benchmark/OutputBenchmarkNodes {
	public fun <init> ()V
}

public abstract class org/pkl/core/stdlib/benchmark/OutputBenchmarkNodes$run : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/stdlib/benchmark/OutputBenchmarkNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/benchmark/OutputBenchmarkNodesFactory$runNodeGen : org/pkl/core/stdlib/benchmark/OutputBenchmarkNodes$run {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/benchmark/OutputBenchmarkNodes$run;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/benchmark/ParserBenchmarkNodes {
	public fun <init> ()V
}

public abstract class org/pkl/core/stdlib/benchmark/ParserBenchmarkNodes$run : org/pkl/core/stdlib/ExternalMethod0Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/stdlib/benchmark/ParserBenchmarkNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/benchmark/ParserBenchmarkNodesFactory$runNodeGen : org/pkl/core/stdlib/benchmark/ParserBenchmarkNodes$run {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/benchmark/ParserBenchmarkNodes$run;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/json/ParserNodes {
}

public abstract class org/pkl/core/stdlib/json/ParserNodes$parse : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/String;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmTyped;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/json/ParserNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/json/ParserNodesFactory$parseNodeGen : org/pkl/core/stdlib/json/ParserNodes$parse {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/json/ParserNodes$parse;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/jsonnet/RendererNodes {
	public fun <init> ()V
}

public abstract class org/pkl/core/stdlib/jsonnet/RendererNodes$renderDocument : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/jsonnet/RendererNodes$renderValue : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/jsonnet/RendererNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/jsonnet/RendererNodesFactory$renderDocumentNodeGen : org/pkl/core/stdlib/jsonnet/RendererNodes$renderDocument {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/jsonnet/RendererNodes$renderDocument;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/jsonnet/RendererNodesFactory$renderValueNodeGen : org/pkl/core/stdlib/jsonnet/RendererNodes$renderValue {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/jsonnet/RendererNodes$renderValue;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodes {
}

public abstract class org/pkl/core/stdlib/math/MathNodes$acos : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$asin : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$atan : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$atan2 : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;DD)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;DJ)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;JD)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;JJ)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$cbrt : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$cos : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$e : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$exp : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$gcd : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;JJ)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$isPowerOfTwo : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)Z
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)Z
}

public abstract class org/pkl/core/stdlib/math/MathNodes$lcm : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;JJ)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$log : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$log10 : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$log2 : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$max : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;DD)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;DJ)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;JD)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;JJ)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$maxFiniteFloat : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$maxInt : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$maxInt16 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$maxInt32 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$maxInt8 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$maxUInt : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$maxUInt16 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$maxUInt32 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$maxUInt8 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$min : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;DD)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;DJ)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;JD)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;JJ)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$minFiniteFloat : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$minInt : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$minInt16 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$minInt32 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$minInt8 : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)J
}

public abstract class org/pkl/core/stdlib/math/MathNodes$minPositiveFloat : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$pi : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$sin : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$sqrt : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public abstract class org/pkl/core/stdlib/math/MathNodes$tan : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;D)D
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;J)D
}

public final class org/pkl/core/stdlib/math/MathNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$acosNodeGen : org/pkl/core/stdlib/math/MathNodes$acos {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$acos;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$asinNodeGen : org/pkl/core/stdlib/math/MathNodes$asin {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$asin;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$atan2NodeGen : org/pkl/core/stdlib/math/MathNodes$atan2 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$atan2;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$atanNodeGen : org/pkl/core/stdlib/math/MathNodes$atan {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$atan;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$cbrtNodeGen : org/pkl/core/stdlib/math/MathNodes$cbrt {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$cbrt;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$cosNodeGen : org/pkl/core/stdlib/math/MathNodes$cos {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$cos;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$eNodeGen : org/pkl/core/stdlib/math/MathNodes$e {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$e;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$expNodeGen : org/pkl/core/stdlib/math/MathNodes$exp {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$exp;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$gcdNodeGen : org/pkl/core/stdlib/math/MathNodes$gcd {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$gcd;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$isPowerOfTwoNodeGen : org/pkl/core/stdlib/math/MathNodes$isPowerOfTwo {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$isPowerOfTwo;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$lcmNodeGen : org/pkl/core/stdlib/math/MathNodes$lcm {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$lcm;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$log10NodeGen : org/pkl/core/stdlib/math/MathNodes$log10 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$log10;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$log2NodeGen : org/pkl/core/stdlib/math/MathNodes$log2 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$log2;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$logNodeGen : org/pkl/core/stdlib/math/MathNodes$log {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$log;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$maxFiniteFloatNodeGen : org/pkl/core/stdlib/math/MathNodes$maxFiniteFloat {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$maxFiniteFloat;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$maxInt16NodeGen : org/pkl/core/stdlib/math/MathNodes$maxInt16 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$maxInt16;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$maxInt32NodeGen : org/pkl/core/stdlib/math/MathNodes$maxInt32 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$maxInt32;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$maxInt8NodeGen : org/pkl/core/stdlib/math/MathNodes$maxInt8 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$maxInt8;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$maxIntNodeGen : org/pkl/core/stdlib/math/MathNodes$maxInt {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$maxInt;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$maxNodeGen : org/pkl/core/stdlib/math/MathNodes$max {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$max;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$maxUInt16NodeGen : org/pkl/core/stdlib/math/MathNodes$maxUInt16 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$maxUInt16;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$maxUInt32NodeGen : org/pkl/core/stdlib/math/MathNodes$maxUInt32 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$maxUInt32;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$maxUInt8NodeGen : org/pkl/core/stdlib/math/MathNodes$maxUInt8 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$maxUInt8;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$maxUIntNodeGen : org/pkl/core/stdlib/math/MathNodes$maxUInt {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$maxUInt;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$minFiniteFloatNodeGen : org/pkl/core/stdlib/math/MathNodes$minFiniteFloat {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$minFiniteFloat;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$minInt16NodeGen : org/pkl/core/stdlib/math/MathNodes$minInt16 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$minInt16;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$minInt32NodeGen : org/pkl/core/stdlib/math/MathNodes$minInt32 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$minInt32;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$minInt8NodeGen : org/pkl/core/stdlib/math/MathNodes$minInt8 {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$minInt8;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$minIntNodeGen : org/pkl/core/stdlib/math/MathNodes$minInt {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$minInt;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$minNodeGen : org/pkl/core/stdlib/math/MathNodes$min {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$min;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun executeInt (Lcom/oracle/truffle/api/frame/VirtualFrame;)J
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$minPositiveFloatNodeGen : org/pkl/core/stdlib/math/MathNodes$minPositiveFloat {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$minPositiveFloat;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$piNodeGen : org/pkl/core/stdlib/math/MathNodes$pi {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$pi;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$sinNodeGen : org/pkl/core/stdlib/math/MathNodes$sin {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$sin;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$sqrtNodeGen : org/pkl/core/stdlib/math/MathNodes$sqrt {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$sqrt;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/math/MathNodesFactory$tanNodeGen : org/pkl/core/stdlib/math/MathNodes$tan {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/math/MathNodes$tan;
	public fun executeFloat (Lcom/oracle/truffle/api/frame/VirtualFrame;)D
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/platform/PlatformNodes {
}

public abstract class org/pkl/core/stdlib/platform/PlatformNodes$current : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/platform/PlatformNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/platform/PlatformNodesFactory$currentNodeGen : org/pkl/core/stdlib/platform/PlatformNodes$current {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/platform/PlatformNodes$current;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/protobuf/RendererNodes {
}

public abstract class org/pkl/core/stdlib/protobuf/RendererNodes$renderDocument : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/protobuf/RendererNodes$renderType : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/protobuf/RendererNodes$renderValue : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/protobuf/RendererNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/protobuf/RendererNodesFactory$renderDocumentNodeGen : org/pkl/core/stdlib/protobuf/RendererNodes$renderDocument {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/protobuf/RendererNodes$renderDocument;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/protobuf/RendererNodesFactory$renderTypeNodeGen : org/pkl/core/stdlib/protobuf/RendererNodes$renderType {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/protobuf/RendererNodes$renderType;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/protobuf/RendererNodesFactory$renderValueNodeGen : org/pkl/core/stdlib/protobuf/RendererNodes$renderValue {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/protobuf/RendererNodes$renderValue;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/ClassNodes {
}

public abstract class org/pkl/core/stdlib/reflect/ClassNodes$isSubclassOf : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmTyped;)Z
}

public final class org/pkl/core/stdlib/reflect/ClassNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/reflect/ClassNodesFactory$isSubclassOfNodeGen : org/pkl/core/stdlib/reflect/ClassNodes$isSubclassOf {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ClassNodes$isSubclassOf;
	public fun executeBoolean (Lcom/oracle/truffle/api/frame/VirtualFrame;)Z
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/DeclaredTypeNodes {
}

public abstract class org/pkl/core/stdlib/reflect/DeclaredTypeNodes$withTypeArgument : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/DeclaredTypeNodes$withTypeArguments : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/stdlib/reflect/DeclaredTypeNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/reflect/DeclaredTypeNodesFactory$withTypeArgumentNodeGen : org/pkl/core/stdlib/reflect/DeclaredTypeNodes$withTypeArgument {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/DeclaredTypeNodes$withTypeArgument;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/DeclaredTypeNodesFactory$withTypeArgumentsNodeGen : org/pkl/core/stdlib/reflect/DeclaredTypeNodes$withTypeArguments {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/DeclaredTypeNodes$withTypeArguments;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodes {
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$Class : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmClass;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$DeclaredType : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$FunctionType : org/pkl/core/stdlib/ExternalMethod2Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmList;Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$Module : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$StringLiteralType : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/String;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$TypeAlias : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmTypeAlias;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$TypeVariable : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$UnionType : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmList;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$moduleOf : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$moduleType : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$nothingType : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public abstract class org/pkl/core/stdlib/reflect/ReflectNodes$unknownType : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$ClassNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$Class {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$Class;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$DeclaredTypeNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$DeclaredType {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$DeclaredType;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$FunctionTypeNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$FunctionType {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$FunctionType;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$ModuleNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$Module {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$Module;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$StringLiteralTypeNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$StringLiteralType {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$StringLiteralType;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$TypeAliasNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$TypeAlias {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$TypeAlias;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$TypeVariableNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$TypeVariable {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$TypeVariable;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$UnionTypeNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$UnionType {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$UnionType;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$moduleOfNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$moduleOf {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$moduleOf;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$moduleTypeNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$moduleType {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$moduleType;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$nothingTypeNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$nothingType {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$nothingType;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/reflect/ReflectNodesFactory$unknownTypeNodeGen : org/pkl/core/stdlib/reflect/ReflectNodes$unknownType {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/ReflectNodes$unknownType;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/reflect/TypeNodes {
}

public abstract class org/pkl/core/stdlib/reflect/TypeNodes$nullable : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Lorg/pkl/core/runtime/VmTyped;
}

public final class org/pkl/core/stdlib/reflect/TypeNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/reflect/TypeNodesFactory$nullableNodeGen : org/pkl/core/stdlib/reflect/TypeNodes$nullable {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/reflect/TypeNodes$nullable;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/registry/ExternalMemberRegistry {
	public fun <init> ()V
	public final fun getFunctionBody (Ljava/lang/String;Lcom/oracle/truffle/api/source/SourceSection;I)Lorg/pkl/core/ast/ExpressionNode;
	public final fun getPropertyBody (Ljava/lang/String;Lcom/oracle/truffle/api/source/SourceSection;)Lorg/pkl/core/ast/ExpressionNode;
	protected fun register (Ljava/lang/String;Lorg/pkl/core/stdlib/ExternalMethod0Node$Factory;)V
	protected fun register (Ljava/lang/String;Lorg/pkl/core/stdlib/ExternalMethod1Node$Factory;)V
	protected fun register (Ljava/lang/String;Lorg/pkl/core/stdlib/ExternalMethod2Node$Factory;)V
	protected fun register (Ljava/lang/String;Lorg/pkl/core/stdlib/ExternalMethod3Node$Factory;)V
	protected fun register (Ljava/lang/String;Lorg/pkl/core/stdlib/ExternalMethod4Node$Factory;)V
	protected fun register (Ljava/lang/String;Lorg/pkl/core/stdlib/ExternalMethod5Node$Factory;)V
	protected fun register (Ljava/lang/String;Lorg/pkl/core/stdlib/ExternalPropertyNode$Factory;)V
}

public final class org/pkl/core/stdlib/registry/MemberRegistryFactory {
	public static fun get (Lorg/pkl/core/module/ModuleKey;)Lorg/pkl/core/stdlib/registry/ExternalMemberRegistry;
}

public final class org/pkl/core/stdlib/release/ReleaseNodes {
}

public abstract class org/pkl/core/stdlib/release/ReleaseNodes$current : org/pkl/core/stdlib/ExternalPropertyNode {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/release/ReleaseNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/release/ReleaseNodesFactory$currentNodeGen : org/pkl/core/stdlib/release/ReleaseNodes$current {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/release/ReleaseNodes$current;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/test/TestNodes {
}

public abstract class org/pkl/core/stdlib/test/TestNodes$catchMethod : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/test/TestNodes$catchOrNull : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmFunction;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/test/TestNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/test/TestNodesFactory$catchMethodNodeGen : org/pkl/core/stdlib/test/TestNodes$catchMethod {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/test/TestNodes$catchMethod;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/test/TestNodesFactory$catchOrNullNodeGen : org/pkl/core/stdlib/test/TestNodes$catchOrNull {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/test/TestNodes$catchOrNull;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/test/report/JUnitReport : org/pkl/core/stdlib/test/report/TestReport {
	public fun <init> ()V
	public fun report (Lorg/pkl/core/TestResults;Ljava/io/Writer;)V
}

public final class org/pkl/core/stdlib/test/report/SimpleReport : org/pkl/core/stdlib/test/report/TestReport {
	public fun <init> (Z)V
	public fun report (Lorg/pkl/core/TestResults;Ljava/io/Writer;)V
	public fun summarize (Ljava/util/List;Ljava/io/Writer;)V
}

public abstract interface class org/pkl/core/stdlib/test/report/TestReport {
	public fun report (Lorg/pkl/core/TestResults;)Ljava/lang/String;
	public abstract fun report (Lorg/pkl/core/TestResults;Ljava/io/Writer;)V
	public fun reportToPath (Lorg/pkl/core/TestResults;Ljava/nio/file/Path;)V
}

public final class org/pkl/core/stdlib/xml/RendererNodes {
}

public final class org/pkl/core/stdlib/xml/RendererNodes$Renderer : org/pkl/core/stdlib/AbstractRenderer {
	public fun <init> (Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/pkl/core/runtime/VmMapping;Lorg/pkl/core/stdlib/PklConverter;)V
	public fun startTyped (Lorg/pkl/core/runtime/VmTyped;)V
	public fun visitBoolean (Ljava/lang/Boolean;)V
	public fun visitDataSize (Lorg/pkl/core/runtime/VmDataSize;)V
	public fun visitDocument (Ljava/lang/Object;)V
	public fun visitDuration (Lorg/pkl/core/runtime/VmDuration;)V
	public fun visitFloat (Ljava/lang/Double;)V
	public fun visitInt (Ljava/lang/Long;)V
	public fun visitIntSeq (Lorg/pkl/core/runtime/VmIntSeq;)V
	public fun visitNull (Lorg/pkl/core/runtime/VmNull;)V
	public fun visitPair (Lorg/pkl/core/runtime/VmPair;)V
	public fun visitRegex (Lorg/pkl/core/runtime/VmRegex;)V
	public fun visitString (Ljava/lang/String;)V
	public fun visitTopLevelValue (Ljava/lang/Object;)V
	public fun visitTyped (Lorg/pkl/core/runtime/VmTyped;)V
}

public abstract class org/pkl/core/stdlib/xml/RendererNodes$renderDocument : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public abstract class org/pkl/core/stdlib/xml/RendererNodes$renderValue : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/Object;)Ljava/lang/String;
}

public final class org/pkl/core/stdlib/xml/RendererNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/xml/RendererNodesFactory$renderDocumentNodeGen : org/pkl/core/stdlib/xml/RendererNodes$renderDocument {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/xml/RendererNodes$renderDocument;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/xml/RendererNodesFactory$renderValueNodeGen : org/pkl/core/stdlib/xml/RendererNodes$renderValue {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/xml/RendererNodes$renderValue;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/yaml/ParserNodes {
}

public abstract class org/pkl/core/stdlib/yaml/ParserNodes$parse : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/String;)Ljava/lang/Object;
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmTyped;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
}

public abstract class org/pkl/core/stdlib/yaml/ParserNodes$parseAll : org/pkl/core/stdlib/ExternalMethod1Node {
	public fun <init> ()V
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Ljava/lang/String;)Lorg/pkl/core/runtime/VmList;
	protected fun eval (Lorg/pkl/core/runtime/VmTyped;Lorg/pkl/core/runtime/VmTyped;Lcom/oracle/truffle/api/nodes/IndirectCallNode;)Ljava/lang/Object;
}

public final class org/pkl/core/stdlib/yaml/ParserNodesFactory {
	public fun <init> ()V
}

public final class org/pkl/core/stdlib/yaml/ParserNodesFactory$parseAllNodeGen : org/pkl/core/stdlib/yaml/ParserNodes$parseAll {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/yaml/ParserNodes$parseAll;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public final class org/pkl/core/stdlib/yaml/ParserNodesFactory$parseNodeGen : org/pkl/core/stdlib/yaml/ParserNodes$parse {
	public static fun create (Lorg/pkl/core/ast/ExpressionNode;Lorg/pkl/core/ast/ExpressionNode;)Lorg/pkl/core/stdlib/yaml/ParserNodes$parse;
	public fun executeGeneric (Lcom/oracle/truffle/api/frame/VirtualFrame;)Ljava/lang/Object;
	public fun getArg1Node ()Lorg/pkl/core/ast/ExpressionNode;
}

public abstract class org/pkl/core/util/AbstractCharEscaper {
	public fun <init> ()V
	public fun escape (Ljava/lang/String;)Ljava/lang/String;
	public fun escape (Ljava/lang/String;Ljava/lang/StringBuilder;)V
	protected abstract fun findReplacement (C)Ljava/lang/String;
}

public final class org/pkl/core/util/AnsiStringBuilder {
	public fun <init> (Z)V
	public fun append (C)Lorg/pkl/core/util/AnsiStringBuilder;
	public fun append (I)Lorg/pkl/core/util/AnsiStringBuilder;
	public fun append (Ljava/lang/Object;)Lorg/pkl/core/util/AnsiStringBuilder;
	public fun append (Ljava/lang/String;)Lorg/pkl/core/util/AnsiStringBuilder;
	public fun append (Ljava/util/Set;Ljava/lang/String;)Lorg/pkl/core/util/AnsiStringBuilder;
	public fun append (Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;I)Lorg/pkl/core/util/AnsiStringBuilder;
	public fun append (Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;Ljava/lang/Runnable;)Lorg/pkl/core/util/AnsiStringBuilder;
	public fun append (Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;Ljava/lang/String;)Lorg/pkl/core/util/AnsiStringBuilder;
	public fun appendUntrusted (Ljava/lang/String;)Lorg/pkl/core/util/AnsiStringBuilder;
	public fun newInstance ()Lorg/pkl/core/util/AnsiStringBuilder;
	public fun toPrintWriter ()Ljava/io/PrintWriter;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/util/AnsiStringBuilder$AnsiCode : java/lang/Enum {
	public static final field BG_BLACK Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_BLUE Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_BRIGHT_BLACK Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_BRIGHT_BLUE Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_BRIGHT_CYAN Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_BRIGHT_GREEN Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_BRIGHT_MAGENTA Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_BRIGHT_RED Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_BRIGHT_WHITE Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_BRIGHT_YELLOW Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_CYAN Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_GREEN Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_MAGENTA Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_RED Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_WHITE Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BG_YELLOW Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BLACK Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BLUE Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BOLD Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BRIGHT_BLACK Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BRIGHT_BLUE Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BRIGHT_CYAN Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BRIGHT_GREEN Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BRIGHT_MAGENTA Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BRIGHT_RED Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BRIGHT_WHITE Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field BRIGHT_YELLOW Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field CYAN Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field FAINT Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field GREEN Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field MAGENTA Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field RED Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field RESET Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field WHITE Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field YELLOW Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static fun valueOf (Ljava/lang/String;)Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static fun values ()[Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
}

public final class org/pkl/core/util/AnsiTheme {
	public static final field ERROR_HEADER Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field ERROR_MESSAGE Ljava/util/Set;
	public static final field ERROR_MESSAGE_HINT Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field FAILING_TEST_MARK Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field PASSING_TEST_MARK Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field STACK_FRAME Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field STACK_TRACE_CARET Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field STACK_TRACE_LINE_NUMBER Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field STACK_TRACE_LOOP_COUNT Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field STACK_TRACE_MARGIN Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field TEST_EXAMPLE_OUTPUT Ljava/util/Set;
	public static final field TEST_FACT_SOURCE Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field TEST_FAILURE_MESSAGE Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
	public static final field TEST_NAME Lorg/pkl/core/util/AnsiStringBuilder$AnsiCode;
}

public final class org/pkl/core/util/ArrayCharEscaper : org/pkl/core/util/AbstractCharEscaper {
	public static fun builder ()Lorg/pkl/core/util/ArrayCharEscaper$Builder;
	public static fun builder (I)Lorg/pkl/core/util/ArrayCharEscaper$Builder;
}

public class org/pkl/core/util/ArrayCharEscaper$Builder {
	public fun build ()Lorg/pkl/core/util/ArrayCharEscaper;
	public fun withEscape (CLjava/lang/String;)Lorg/pkl/core/util/ArrayCharEscaper$Builder;
}

public final class org/pkl/core/util/ByteArrayUtils {
	public static fun md5 ([B)Ljava/lang/String;
	public static fun sha1 ([B)Ljava/lang/String;
	public static fun sha256 ([B)Ljava/lang/String;
	public static fun sha256Int ([B)J
	public static fun toHex ([B)Ljava/lang/String;
}

public final class org/pkl/core/util/CodeGeneratorUtils {
	public static fun isRepresentableAsEnum (Lorg/pkl/core/PType;Ljava/util/Set;)Z
	public static fun isRepresentableAsString (Lorg/pkl/core/PType;)Z
	public static fun toEnumConstantName (Ljava/lang/String;)Ljava/lang/String;
}

public final class org/pkl/core/util/CollectionUtils {
	public static fun newConcurrentHashMap (I)Ljava/util/concurrent/ConcurrentHashMap;
	public static fun newHashMap (I)Ljava/util/HashMap;
	public static fun newHashSet ()Ljava/util/HashSet;
	public static fun newHashSet (I)Ljava/util/HashSet;
	public static fun newLinkedHashMap (I)Ljava/util/LinkedHashMap;
	public static fun newLinkedHashSet (I)Ljava/util/LinkedHashSet;
}

public final class org/pkl/core/util/DurationUtils {
	public static fun toIsoString (DLorg/pkl/core/DurationUnit;)Ljava/lang/String;
	public static fun toPklString (DLorg/pkl/core/DurationUnit;)Ljava/lang/String;
}

public final class org/pkl/core/util/EconomicMaps {
	public static fun clear (Lorg/graalvm/collections/EconomicMap;)V
	public static fun containsKey (Lorg/graalvm/collections/UnmodifiableEconomicMap;Ljava/lang/Object;)Z
	public static fun create ()Lorg/graalvm/collections/EconomicMap;
	public static fun create (I)Lorg/graalvm/collections/EconomicMap;
	public static fun emptyMap ()Lorg/graalvm/collections/UnmodifiableEconomicMap;
	public static fun equals (Lorg/graalvm/collections/UnmodifiableEconomicMap;Lorg/graalvm/collections/UnmodifiableEconomicMap;)Z
	public static fun get (Lorg/graalvm/collections/UnmodifiableEconomicMap;Ljava/lang/Object;)Ljava/lang/Object;
	public static fun get (Lorg/graalvm/collections/UnmodifiableEconomicMap;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public static fun getEntries (Lorg/graalvm/collections/EconomicMap;)Lorg/graalvm/collections/MapCursor;
	public static fun getEntries (Lorg/graalvm/collections/UnmodifiableEconomicMap;)Lorg/graalvm/collections/UnmodifiableMapCursor;
	public static fun getKeys (Lorg/graalvm/collections/UnmodifiableEconomicMap;)Ljava/lang/Iterable;
	public static fun getValues (Lorg/graalvm/collections/UnmodifiableEconomicMap;)Ljava/lang/Iterable;
	public static fun hashCode (Lorg/graalvm/collections/UnmodifiableEconomicMap;)I
	public static fun isEmpty (Lorg/graalvm/collections/UnmodifiableEconomicMap;)Z
	public static fun of (Ljava/lang/Object;Ljava/lang/Object;)Lorg/graalvm/collections/EconomicMap;
	public static fun of (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lorg/graalvm/collections/EconomicMap;
	public static fun of (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lorg/graalvm/collections/EconomicMap;
	public static fun of (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lorg/graalvm/collections/EconomicMap;
	public static fun put (Lorg/graalvm/collections/EconomicMap;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public static fun putAll (Lorg/graalvm/collections/EconomicMap;Lorg/graalvm/collections/EconomicMap;)V
	public static fun putAll (Lorg/graalvm/collections/EconomicMap;Lorg/graalvm/collections/UnmodifiableEconomicMap;)V
	public static fun removeKey (Lorg/graalvm/collections/EconomicMap;Ljava/lang/Object;)Ljava/lang/Object;
	public static fun replaceAll (Lorg/graalvm/collections/EconomicMap;Ljava/util/function/BiFunction;)V
	public static fun size (Lorg/graalvm/collections/UnmodifiableEconomicMap;)I
}

public final class org/pkl/core/util/EconomicSets {
	public static fun add (Lorg/graalvm/collections/EconomicSet;Ljava/lang/Object;)Z
	public static fun contains (Lorg/graalvm/collections/EconomicSet;Ljava/lang/Object;)Z
	public static fun create ()Lorg/graalvm/collections/EconomicSet;
}

public final class org/pkl/core/util/ErrorMessages {
	public static fun create (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
	public static fun createIndented (Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
}

public final class org/pkl/core/util/Exceptions {
	public static fun getRootCause (Ljava/lang/Throwable;)Ljava/lang/Throwable;
	public static fun getRootReason (Ljava/lang/Throwable;)Ljava/lang/String;
}

public final class org/pkl/core/util/GlobResolver {
	public static fun resolveGlob (Lorg/pkl/core/SecurityManager;Lorg/pkl/core/runtime/ReaderBase;Lorg/pkl/core/module/ModuleKey;Ljava/net/URI;Ljava/lang/String;)Ljava/util/Map;
	public static fun toRegexPattern (Ljava/lang/String;)Ljava/util/regex/Pattern;
	public static fun toRegexString (Ljava/lang/String;)Ljava/lang/String;
}

public final class org/pkl/core/util/GlobResolver$InvalidGlobPatternException : java/lang/Exception {
	public fun <init> (Ljava/lang/String;)V
}

public final class org/pkl/core/util/GlobResolver$ResolvedGlobElement : java/lang/Record {
	public fun <init> (Ljava/lang/String;Ljava/net/URI;Z)V
	public final fun equals (Ljava/lang/Object;)Z
	public final fun hashCode ()I
	public fun isDirectory ()Z
	public fun path ()Ljava/lang/String;
	public final fun toString ()Ljava/lang/String;
	public fun uri ()Ljava/net/URI;
}

public final class org/pkl/core/util/HttpUtils {
	public static fun checkHasStatusCode200 (Ljava/net/http/HttpResponse;)V
	public static fun isHttpUrl (Ljava/net/URI;)Z
	public static fun isHttpUrl (Ljava/net/URL;)Z
	public static fun setPort (Ljava/net/URI;I)Ljava/net/URI;
}

public class org/pkl/core/util/ImportGraphUtils {
	public static fun findImportCycles (Lorg/pkl/core/ImportGraph;)Ljava/util/List;
}

public final class org/pkl/core/util/IoUtils {
	public static fun capitalize (Ljava/lang/String;)Ljava/lang/String;
	public static fun createServiceLoader (Ljava/lang/Class;)Ljava/util/ServiceLoader;
	public static fun createUri (Ljava/lang/String;)Ljava/net/URI;
	public static fun dropLastSegment (Ljava/lang/String;C)Ljava/lang/String;
	public static fun encodePath (Ljava/lang/String;)Ljava/lang/String;
	public static fun ensurePathEndsWithSlash (Ljava/net/URI;)Ljava/net/URI;
	public static fun fixTripleSlashUri (Ljava/net/URI;Ljava/net/URI;)Ljava/net/URI;
	public static fun getCurrentWorkingDir ()Ljava/nio/file/Path;
	public static fun getDefaultModuleCacheDir ()Ljava/nio/file/Path;
	public static fun getLineSeparator ()Ljava/lang/String;
	public static fun getMaxLineLength (Ljava/lang/String;)I
	public static fun getName (Ljava/lang/String;)Ljava/lang/String;
	public static fun getName (Ljava/nio/file/Path;)Ljava/lang/String;
	public static fun getNameWithoutExtension (Ljava/lang/String;)Ljava/lang/String;
	public static fun getPklHomeDir ()Ljava/nio/file/Path;
	public static fun inferModuleName (Lorg/pkl/core/module/ModuleKey;)Ljava/lang/String;
	public static fun isBinaryDigitOrUnderscore (C)Z
	public static fun isDecimalDigit (C)Z
	public static fun isDecimalDigitOrUnderscore (C)Z
	public static fun isHexDigit (C)Z
	public static fun isHexDigitOrUnderscore (C)Z
	public static fun isNonZeroDecimalDigit (C)Z
	public static fun isOctalDigit (C)Z
	public static fun isOctalDigitOrUnderscore (C)Z
	public static fun isReservedFilenameChar (C)Z
	public static fun isReservedWindowsFilenameChar (C)Z
	public static fun isTestMode ()Z
	public static fun isUriLike (Ljava/lang/String;)Z
	public static fun isWhitespace (Ljava/lang/String;)Z
	public static fun isWindows ()Ljava/lang/Boolean;
	public static fun isWindowsAbsolutePath (Ljava/lang/String;)Z
	public static fun parseDependencyNotation (Ljava/lang/String;)Lorg/pkl/core/util/Pair;
	public static fun parseTripleDotPath (Ljava/net/URI;)Ljava/lang/String;
	public static fun pathOf (Ljava/net/URI;)Ljava/nio/file/Path;
	public static fun readBytes (Ljava/net/URI;)[B
	public static fun readClassPathResourceAsString (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/String;
	public static fun readString (Ljava/io/InputStream;)Ljava/lang/String;
	public static fun readString (Ljava/io/Reader;)Ljava/lang/String;
	public static fun readString (Ljava/net/URL;)Ljava/lang/String;
	public static fun relativize (Ljava/net/URI;Ljava/net/URI;)Ljava/net/URI;
	public static fun relativize (Ljava/nio/file/Path;Ljava/nio/file/Path;)Ljava/nio/file/Path;
	public static fun resolve (Ljava/net/URI;Ljava/lang/String;)Ljava/net/URI;
	public static fun resolve (Ljava/net/URI;Ljava/net/URI;)Ljava/net/URI;
	public static fun resolve (Lorg/pkl/core/SecurityManager;Lorg/pkl/core/module/ModuleKey;Ljava/net/URI;)Ljava/net/URI;
	public static fun resolve (Lorg/pkl/core/runtime/ReaderBase;Ljava/net/URI;Ljava/lang/String;)Ljava/net/URI;
	public static fun resolve (Lorg/pkl/core/runtime/ReaderBase;Ljava/net/URI;Ljava/net/URI;)Ljava/net/URI;
	public static fun setSystemProxy (Ljava/net/URI;)V
	public static fun setTestMode ()V
	public static fun stripFragment (Ljava/net/URI;)Ljava/net/URI;
	public static fun takeLastSegment (Ljava/lang/String;C)Ljava/lang/String;
	public static fun toHexEscape (I)Ljava/lang/String;
	public static fun toNormalizedPathString (Ljava/nio/file/Path;)Ljava/lang/String;
	public static fun toPath (Ljava/net/URI;)Ljava/nio/file/Path;
	public static fun toUnicodeEscape (I)Ljava/lang/String;
	public static fun toUri (Ljava/lang/String;)Ljava/net/URI;
	public static fun toUrl (Ljava/net/URI;)Ljava/net/URL;
	public static fun zipDirectory (Ljava/nio/file/Path;Ljava/nio/file/Path;)V
}

public abstract interface annotation class org/pkl/core/util/LateInit : java/lang/annotation/Annotation {
}

public final class org/pkl/core/util/MathUtils {
	public static fun checkedMultiply (JJ)J
	public static fun checkedPow (JI)J
	public static fun gcd (JJ)J
	public static fun isMathematicalInteger (D)Z
	public static fun isPowerOfTwo (D)Z
	public static fun isPowerOfTwo (J)Z
	public static fun roundToLong (DLjava/math/RoundingMode;)J
}

public final class org/pkl/core/util/MutableBoolean {
	public fun <init> (Z)V
	public fun get ()Z
	public fun getAndSetFalse ()Z
	public fun set (Z)V
}

public final class org/pkl/core/util/MutableLong {
	public fun <init> (J)V
	public fun get ()J
	public fun getAndIncrement ()J
	public fun set (J)V
}

public final class org/pkl/core/util/MutableReference {
	public fun <init> (Ljava/lang/Object;)V
	public fun get ()Ljava/lang/Object;
	public fun getOrNull ()Ljava/lang/Object;
	public fun isNull ()Z
	public fun set (Ljava/lang/Object;)V
}

public abstract interface annotation class org/pkl/core/util/Nonnull : java/lang/annotation/Annotation {
}

public abstract interface annotation class org/pkl/core/util/NonnullByDefault : java/lang/annotation/Annotation {
}

public abstract interface annotation class org/pkl/core/util/Nullable : java/lang/annotation/Annotation {
}

public final class org/pkl/core/util/Pair {
	public final field first Ljava/lang/Object;
	public final field second Ljava/lang/Object;
	public fun equals (Ljava/lang/Object;)Z
	public fun getFirst ()Ljava/lang/Object;
	public fun getSecond ()Ljava/lang/Object;
	public fun hashCode ()I
	public static fun of (Ljava/lang/Object;Ljava/lang/Object;)Lorg/pkl/core/util/Pair;
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/util/StringBuilderWriter : java/io/Writer {
	public fun <init> (Ljava/lang/StringBuilder;)V
	public fun append (C)Ljava/io/Writer;
	public synthetic fun append (C)Ljava/lang/Appendable;
	public fun append (Ljava/lang/CharSequence;)Ljava/io/Writer;
	public synthetic fun append (Ljava/lang/CharSequence;)Ljava/lang/Appendable;
	public fun append (Ljava/lang/CharSequence;II)Ljava/io/Writer;
	public synthetic fun append (Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
	public fun close ()V
	public fun flush ()V
	public fun write (I)V
	public fun write (Ljava/lang/String;)V
	public fun write (Ljava/lang/String;II)V
	public fun write ([C)V
	public fun write ([CII)V
}

public final class org/pkl/core/util/StringSimilarity {
	public fun <init> ()V
	public fun <init> (D)V
	public final fun distance (Ljava/lang/String;Ljava/lang/String;)D
	public final fun getThreshold ()D
	public final fun similarity (Ljava/lang/String;Ljava/lang/String;)D
}

public final class org/pkl/core/util/StringUtils {
	public static fun isBlank (Ljava/lang/String;)Z
	public static fun isWhitespace (C)Z
	public static fun isWhitespace (I)Z
	public static fun joinToStringBuilder (Ljava/lang/StringBuilder;Ljava/lang/Iterable;Ljava/lang/String;)V
	public static fun joinToStringBuilder (Ljava/lang/StringBuilder;Ljava/lang/Iterable;Ljava/lang/String;Ljava/util/function/Consumer;)V
	public static fun joinToStringBuilder (Ljava/lang/StringBuilder;Ljava/lang/Iterable;Ljava/util/function/Consumer;)V
	public static fun joinToStringBuilder (Lorg/pkl/core/util/AnsiStringBuilder;Ljava/lang/Iterable;Ljava/lang/String;Ljava/util/function/Consumer;)V
	public static fun trim (Ljava/lang/String;)Ljava/lang/String;
	public static fun trimEnd (Ljava/lang/String;)Ljava/lang/String;
	public static fun trimStart (Ljava/lang/String;)Ljava/lang/String;
}

public final class org/pkl/core/util/json/Json {
	public fun <init> ()V
	public static fun parseObject (Ljava/lang/String;)Lorg/pkl/core/util/json/Json$JsObject;
}

public class org/pkl/core/util/json/Json$FormatException : org/pkl/core/util/json/Json$JsonParseException {
	public fun <init> (Ljava/lang/String;Ljava/lang/Class;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)V
	public fun getMessage ()Ljava/lang/String;
}

public class org/pkl/core/util/json/Json$JsArray : java/util/List {
	public fun <init> ()V
	public fun <init> (I)V
	public fun add (ILjava/lang/Object;)V
	public fun add (Ljava/lang/Object;)Z
	public fun addAll (ILjava/util/Collection;)Z
	public fun addAll (Ljava/util/Collection;)Z
	public fun clear ()V
	public fun contains (Ljava/lang/Object;)Z
	public fun containsAll (Ljava/util/Collection;)Z
	public fun get (I)Ljava/lang/Object;
	public fun indexOf (Ljava/lang/Object;)I
	public fun isEmpty ()Z
	public fun iterator ()Ljava/util/Iterator;
	public fun lastIndexOf (Ljava/lang/Object;)I
	public fun listIterator ()Ljava/util/ListIterator;
	public fun listIterator (I)Ljava/util/ListIterator;
	public fun remove (I)Ljava/lang/Object;
	public fun remove (Ljava/lang/Object;)Z
	public fun removeAll (Ljava/util/Collection;)Z
	public fun retainAll (Ljava/util/Collection;)Z
	public fun set (ILjava/lang/Object;)Ljava/lang/Object;
	public fun size ()I
	public fun subList (II)Ljava/util/List;
	public fun toArray ()[Ljava/lang/Object;
	public fun toArray ([Ljava/lang/Object;)[Ljava/lang/Object;
	public fun toString ()Ljava/lang/String;
}

public class org/pkl/core/util/json/Json$JsObject : java/util/Map {
	public fun <init> ()V
	public fun <init> (I)V
	public fun clear ()V
	public fun containsKey (Ljava/lang/Object;)Z
	public fun containsValue (Ljava/lang/Object;)Z
	public fun entrySet ()Ljava/util/Set;
	public fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public fun get (Ljava/lang/String;Lorg/pkl/core/util/json/Json$Mapper;)Ljava/lang/Object;
	public fun getArray (Ljava/lang/String;)Lorg/pkl/core/util/json/Json$JsArray;
	public fun getBoolean (Ljava/lang/String;)Z
	public fun getInt (Ljava/lang/String;)I
	public fun getNullable (Ljava/lang/String;Lorg/pkl/core/util/json/Json$Mapper;)Ljava/lang/Object;
	public fun getObject (Ljava/lang/String;)Lorg/pkl/core/util/json/Json$JsObject;
	public fun getString (Ljava/lang/String;)Ljava/lang/String;
	public fun getStringOrNull (Ljava/lang/String;)Ljava/lang/String;
	public fun getURI (Ljava/lang/String;)Ljava/net/URI;
	public fun getURIOrNull (Ljava/lang/String;)Ljava/net/URI;
	public fun getVersion (Ljava/lang/String;)Lorg/pkl/core/Version;
	public fun isEmpty ()Z
	public fun keySet ()Ljava/util/Set;
	public synthetic fun put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	public fun put (Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
	public fun putAll (Ljava/util/Map;)V
	public fun remove (Ljava/lang/Object;)Ljava/lang/Object;
	public fun size ()I
	public fun toString ()Ljava/lang/String;
	public fun values ()Ljava/util/Collection;
}

public abstract class org/pkl/core/util/json/Json$JsonParseException : java/lang/Exception {
	public fun <init> ()V
}

public class org/pkl/core/util/json/Json$MalformedJsonException : org/pkl/core/util/json/Json$JsonParseException {
	public fun <init> (Lorg/pkl/core/util/json/ParseException;Ljava/lang/String;)V
	public fun getMessage ()Ljava/lang/String;
}

public abstract interface class org/pkl/core/util/json/Json$Mapper {
	public abstract fun apply (Ljava/lang/Object;)Ljava/lang/Object;
}

public class org/pkl/core/util/json/Json$MappingException : org/pkl/core/util/json/Json$JsonParseException {
	public fun <init> (Ljava/lang/String;Ljava/lang/Exception;)V
	public fun getMessage ()Ljava/lang/String;
}

public class org/pkl/core/util/json/Json$MissingFieldException : org/pkl/core/util/json/Json$JsonParseException {
	public fun <init> (Ljava/lang/Object;Ljava/lang/String;)V
	public fun getMessage ()Ljava/lang/String;
}

public final class org/pkl/core/util/json/JsonEscaper : org/pkl/core/util/AbstractCharEscaper {
	public fun <init> (Z)V
}

public abstract class org/pkl/core/util/json/JsonHandler {
	public fun <init> ()V
	public fun endArray (Ljava/lang/Object;)V
	public fun endArrayValue (Ljava/lang/Object;)V
	public fun endBoolean (Z)V
	public fun endNull ()V
	public fun endNumber (Ljava/lang/String;)V
	public fun endObject (Ljava/lang/Object;)V
	public fun endObjectName (Ljava/lang/Object;Ljava/lang/String;)V
	public fun endObjectValue (Ljava/lang/Object;Ljava/lang/String;)V
	public fun endString (Ljava/lang/String;)V
	protected fun getLocation ()Lorg/pkl/core/util/json/Location;
	public fun startArray ()Ljava/lang/Object;
	public fun startArrayValue (Ljava/lang/Object;)V
	public fun startBoolean ()V
	public fun startNull ()V
	public fun startNumber ()V
	public fun startObject ()Ljava/lang/Object;
	public fun startObjectName (Ljava/lang/Object;)V
	public fun startObjectValue (Ljava/lang/Object;Ljava/lang/String;)V
	public fun startString ()V
}

public final class org/pkl/core/util/json/JsonParser {
	public fun <init> (Lorg/pkl/core/util/json/JsonHandler;)V
	public fun parse (Ljava/io/Reader;)V
	public fun parse (Ljava/io/Reader;I)V
	public fun parse (Ljava/lang/String;)V
}

public final class org/pkl/core/util/json/JsonWriter : java/io/Closeable, java/io/Flushable {
	public fun <init> (Ljava/io/Writer;)V
	public fun beginArray ()Lorg/pkl/core/util/json/JsonWriter;
	public fun beginObject ()Lorg/pkl/core/util/json/JsonWriter;
	public fun close ()V
	public fun endArray ()Lorg/pkl/core/util/json/JsonWriter;
	public fun endObject ()Lorg/pkl/core/util/json/JsonWriter;
	public fun flush ()V
	public fun getSerializeNulls ()Z
	public fun isHtmlSafe ()Z
	public fun isLenient ()Z
	public fun name (Ljava/lang/String;)Lorg/pkl/core/util/json/JsonWriter;
	public fun newline ()V
	public fun nullValue ()Lorg/pkl/core/util/json/JsonWriter;
	public fun rawText (Ljava/lang/String;)Lorg/pkl/core/util/json/JsonWriter;
	public fun setHtmlSafe (Z)V
	public fun setIndent (Ljava/lang/String;)V
	public fun setLenient (Z)V
	public fun setSerializeNulls (Z)V
	public fun value (D)Lorg/pkl/core/util/json/JsonWriter;
	public fun value (J)Lorg/pkl/core/util/json/JsonWriter;
	public fun value (Ljava/lang/Boolean;)Lorg/pkl/core/util/json/JsonWriter;
	public fun value (Ljava/lang/Number;)Lorg/pkl/core/util/json/JsonWriter;
	public fun value (Ljava/lang/String;)Lorg/pkl/core/util/json/JsonWriter;
	public fun value (Z)Lorg/pkl/core/util/json/JsonWriter;
}

public final class org/pkl/core/util/json/Location {
	public final field column I
	public final field line I
	public final field offset I
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class org/pkl/core/util/json/ParseException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;Lorg/pkl/core/util/json/Location;)V
	public fun getLocation ()Lorg/pkl/core/util/json/Location;
}

public final class org/pkl/core/util/properties/PropertiesUtils {
	public static fun renderPropertiesKeyOrValue (Ljava/lang/String;ZZ)Ljava/lang/String;
}

public abstract class org/pkl/core/util/xml/XmlValidator {
	public fun <init> ()V
	public static fun create (Ljava/lang/String;)Lorg/pkl/core/util/xml/XmlValidator;
	public abstract fun isValidName (Ljava/lang/String;)Z
}

public final class org/pkl/core/util/yaml/Yaml11Emitter : org/pkl/core/util/yaml/YamlEmitter {
	public fun <init> (Ljava/lang/StringBuilder;Ljava/lang/String;)V
}

public final class org/pkl/core/util/yaml/Yaml12Emitter : org/pkl/core/util/yaml/YamlEmitter {
	public fun <init> (Ljava/lang/StringBuilder;Ljava/lang/String;)V
}

public final class org/pkl/core/util/yaml/YamlCompatEmitter : org/pkl/core/util/yaml/YamlEmitter {
	public fun <init> (Ljava/lang/StringBuilder;Ljava/lang/String;)V
}

public abstract class org/pkl/core/util/yaml/YamlEmitter {
	protected final field builder Ljava/lang/StringBuilder;
	protected final field indent Ljava/lang/String;
	protected fun <init> (Ljava/lang/StringBuilder;Ljava/lang/String;)V
	public static fun create (Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)Lorg/pkl/core/util/yaml/YamlEmitter;
	public final fun emit (D)V
	public final fun emit (J)V
	public fun emit (Ljava/lang/String;Ljava/lang/StringBuilder;Z)V
	public final fun emit (Z)V
	public final fun emitNull ()V
	public final fun getResult ()Ljava/lang/String;
	protected abstract fun isNumber (Ljava/lang/String;I)Z
	protected static fun isReserved11Word (Ljava/lang/String;)Z
	protected abstract fun isReservedWord (Ljava/lang/String;)Z
}

public final class org/pkl/core/util/yaml/YamlEscaper : org/pkl/core/util/AbstractCharEscaper {
	public fun <init> ()V
}

public abstract class org/pkl/core/util/yaml/snake/YamlResolver : org/snakeyaml/engine/v2/resolver/ScalarResolver {
	public fun <init> ()V
	protected fun addImplicitResolver (Lorg/snakeyaml/engine/v2/nodes/Tag;Ljava/util/regex/Pattern;Ljava/lang/String;)V
	public fun resolve (Ljava/lang/String;Ljava/lang/Boolean;)Lorg/snakeyaml/engine/v2/nodes/Tag;
}

public final class org/pkl/core/util/yaml/snake/YamlUtils {
	public static fun getEmitterResolver (Ljava/lang/String;)Lorg/snakeyaml/engine/v2/resolver/ScalarResolver;
	public static fun getParserResolver (Ljava/lang/String;)Lorg/snakeyaml/engine/v2/resolver/ScalarResolver;
	public static fun plainScalar (Ljava/lang/String;Lorg/snakeyaml/engine/v2/nodes/Tag;)Lorg/snakeyaml/engine/v2/events/ScalarEvent;
	public static fun stringScalar (Ljava/lang/String;Lorg/snakeyaml/engine/v2/resolver/ScalarResolver;)Lorg/snakeyaml/engine/v2/events/ScalarEvent;
}

