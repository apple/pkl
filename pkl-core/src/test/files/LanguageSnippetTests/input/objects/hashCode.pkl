amends "../snippetTest.pkl"

local class Person { name: String }

local open class Person2 { name: String; hidden age: Int }

local class Teenager extends Person2 { age = 15 }

local class Myself {
  me: Any
}

facts {
  local set: Set<Int> = IntSeq(1, 100).fold(Set(), (res, n) -> res.add(n))
  
//   ["local members aren't included in hash code - Dynamic"] {
//     local obj1 = new Dynamic { name = "Pigeon" }
//     local obj2 = new Dynamic { name = x; local x = "Pigeon" }
//     local obj3 = new Dynamic { name = x; local x = "Pigeon" } { name = y; local y = "Pigeon" }
//   
//     set.add(obj1).contains(obj2)
//     set.add(obj2).contains(obj3)
//     set.add(obj3).contains(obj2)
//     set.add(obj1).add(obj2).add(obj3).length == 101
//   }
// 
//   ["local members aren't included in hash code - Typed"] {
//     local obj1 = new Person { name = "Pigeon" }
//     local obj2 = new Person { name = x; local x = "Pigeon" }
//     local obj3 = new Person { name = x; local x = "Pigeon" } { name = y; local y = "Pigeon" }
// 
//     set.add(obj1).contains(obj2)
//     set.add(obj2).contains(obj3)
//     set.add(obj3).contains(obj2)
//     set.add(obj1).add(obj2).add(obj3).length == 101
//   }
// 
//   ["hidden members aren't included in hash code - Dynamic"] {
//     local obj1 = new Dynamic { name = "Pigeon" }
//     local obj2 = new Dynamic { name = "Pigeon"; default = (_) -> 42 }
// 
//     set.add(obj1).contains(obj2)
//     set.add(obj2).contains(obj1)
//     set.add(obj1).add(obj2).length == 101
//   }
// 
//   ["hidden members aren't included in hash code - Typed"] {
//     local obj1 = new Person2 { name = "Pigeon" }
//     local obj2 = new Person2 { name = "Pigeon"; age = 42 }
// 
//     set.add(obj1).contains(obj2)
//     set.add(obj2).contains(obj1)
//     set.add(obj1).add(obj2).length == 101
//   }
// 
//   ["hidden members of superclass aren't included in hash code - Typed"] {
//     local obj = new Teenager { name = "Jojo" }
//     set.add(obj).length == 101
//   }

  ["can compute hash code of cyclical objects - Dynamic"] {
    local myself1: Dynamic = new { me = myself1 }
    local myself1Dup: Dynamic = new { me = myself1Dup }
    local myself2: Dynamic = new { me = List(myself2) }
    local myself2Dup: Dynamic = new { me = myself2Dup }
    local myself3: Dynamic = new { me = Pair(1, myself3) }
    local myself3Dup: Dynamic = new { me = Pair(1, myself3Dup) }
    local myself4: Dynamic = new { me = Map(1, myself4) }
    local myself4Dup: Dynamic = new { me = Pair(1, myself4Dup) }

//     set.add(myself1).contains(myself1)
    set.add(myself1).contains(myself1Dup)
//     set.add(myself2).contains(myself2)
//     set.add(myself3).contains(myself3)
//     set.add(myself4).contains(myself4)
  }

  ["can compute hash code of cyclical objects - Typed"] {
    local myself1: Myself = new { me = myself1 }
    local myself2: Myself = new { me = List(myself2) } 
    local myself4: Myself = new { me = Pair(1, myself4) }
    local myself5: Myself = new { me = Map(1, myself5) }

    set.add(myself1).contains(myself1)
    set.add(myself2).contains(myself2)
//     set.add(myself3).contains(myself3)
    set.add(myself4).contains(myself4)
    set.add(myself5).contains(myself5)
  }
}
