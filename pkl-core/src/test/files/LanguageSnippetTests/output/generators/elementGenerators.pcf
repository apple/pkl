res1 {
  2
  6
  10
}
res1b {
  2
  6
  10
}
res1c {
  0
  6
  20
}
res1d {
  0
  6
  20
}
res2 {
  2
  6
  10
}
res2b {
  2
  6
  10
}
res2c {
  0
  6
  20
}
res2d {
  0
  6
  20
}
res3 {
  2
  6
  10
}
res3b {
  2
  6
  10
}
res3c {
  0
  6
  20
}
res3d {
  0
  6
  20
}
res4 {
  1
}
res4b {
  1
}
res4c {
  Pair("one", 1)
}
res4d {
  Pair("one", 1)
}
res5 {
  2
  6
  10
}
res5b {
  2
  6
  10
}
res5c {
  0
  6
  20
}
res5d {
  0
  6
  20
}
res6 {
  1
}
res6b {
  1
}
res6c {
  Pair("one", 1)
}
res6d {
  Pair("one", 1)
}
res7 {
  1
}
res7b {
  1
}
res7c {
  Pair("one", 1)
}
res7d {
  Pair("one", 1)
}
res8 {
  "one"
  "two"
}
res8b {
  "one"
  "two"
}
res9 {
  "ae"
  "af"
  "be"
  "bf"
  "ce"
  "cf"
}
re9b {
  "ae"
  "af"
  "be"
  "bf"
  "ce"
  "cf"
}
res9c {
  Pair(0, "ae")
  Pair(1, "af")
  Pair(1, "be")
  Pair(2, "bf")
  Pair(2, "ce")
  Pair(3, "cf")
}
re9d {
  Pair(0, "ae")
  Pair(1, "af")
  Pair(1, "be")
  Pair(2, "bf")
  Pair(2, "ce")
  Pair(3, "cf")
}
res10 {
  "one"
  2
  6
  10
  "two"
  "ae"
  "af"
  "be"
  "bf"
  "ce"
  "cf"
  "three"
}
res10b {
  "one"
  2
  6
  10
  "two"
  "ae"
  "af"
  "be"
  "bf"
  "ce"
  "cf"
  "three"
}
res11 {
  1
  2
  3
  "a"
  "b"
  "c"
  1
  2
  3
}
res11b {
  1
  2
  3
  "a"
  "b"
  "c"
  1
  2
  3
}
res11c {
  Pair(0, 1)
  Pair(1, 2)
  Pair(2, 3)
  Pair(0, "a")
  Pair(1, "b")
  Pair(2, "c")
  Pair(0, 1)
  Pair(1, 2)
  Pair(2, 3)
}
res11d {
  Pair(0, 1)
  Pair(1, 2)
  Pair(2, 3)
  Pair(0, "a")
  Pair(1, "b")
  Pair(2, "c")
  Pair(0, 1)
  Pair(1, 2)
  Pair(2, 3)
}
res12a {
  1
  2
  3
  4
}
res12b {}
valueForOverProperties {
  ["Foo!"] = "Foo!"
  [42] = 42
  [Pair(1337, "zab")] = Pair(1337, "zab")
}
keyValueForOverProperties {
  ["foo"] = "Foo!"
  ["bar"] = 42
  ["baz"] = Pair(1337, "zab")
}
valueForOverAllMembers {
  "foo"
  1337
  42
  "corge"
  "elementBar"
  "elementQuux"
}
keyValueForOverAllMembers {
  "propFoo -> foo"
  "propBaz -> 1337"
  "entryKeyQux -> 42"
  "entryKeyCorge -> corge"
  "0 -> elementBar"
  "1 -> elementQuux"
}
valueForOverTyped {
  "Pigeon"
  42
}
keyValueForOverTyped {
  "name -> Pigeon"
  "age -> 42"
}
valueForOverConflictingPropertiesAndEntries {
  "property"
  "can only discern by iteration order (properties before entries)"
  "entry"
  "can only discern by iteration order (properties before entries)"
}
keyValueForOverConflictingPropertiesAndEntries {
  "foo -> property"
  "bar -> can only discern by iteration order (properties before entries)"
  "foo -> entry"
  "bar -> can only discern by iteration order (properties before entries)"
}
forWithMultipleMembers {
  "a"
  "ax"
  "ay"
  "b"
  "bx"
  "by"
  "c"
  "cx"
  "cy"
}
forWithMultipleMembersNested {
  "ax1"
  "1xa"
  "ay2"
  "2ya"
  "axx11"
  "11xxa"
  "ayy22"
  "22yya"
  "bx1"
  "1xb"
  "by2"
  "2yb"
  "bxx11"
  "11xxb"
  "byy22"
  "22yyb"
}
forGeneratorsWithOverlappingNamesAndWhenNestedWhen {
  6
}
whenWithMultipleMembers {
  0
  0
  6
  12
  20
  40
}
whenWithMultipleMembersNested {
  20
  40
}
whenWithElse {
  0
  0
  "2"
  "4"
  6
  12
  "12"
  "24"
  20
  40
}
