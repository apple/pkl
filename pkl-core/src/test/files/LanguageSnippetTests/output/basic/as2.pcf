examples {
  ["list"] {
    List(1, 2, 3)
    "Expected value of type `String`, but got type `Int`. Value: 1"
    "Expected value of type `List`, but got type `Set`. Value: Set(1, 2, 3)"
  }
  ["set"] {
    "Expected value of type `Set`, but got type `List`. Value: List(1, 2, 3)"
    Set(1, 2, 3)
    "Expected value of type `String`, but got type `Int`. Value: 1"
  }
  ["map"] {
    Map("Pigeon", 42, "Barn Owl", 21)
    "Expected value of type `Int`, but got type `String`. Value: \"Pigeon\""
  }
  ["listing"] {
    new {
      1
      2
      3
    }
    "Expected value of type `String`, but got type `Int`. Value: 1"
  }
  ["cast Listing<UInt32> to other integer types"] {
    9999999
    9999999
    9999999
    9999999
    "Type constraint `isBetween(-32768, 32767)` violated. Value: 9999999"
    "Type constraint `isBetween(0, 65535)` violated. Value: 9999999"
    "Type constraint `isBetween(-128, 127)` violated. Value: 9999999"
    "Type constraint `isBetween(0, 255)` violated. Value: 9999999"
  }
  ["mapping"] {
    "Expected value of type `Mapping`, but got type `Listing`. Value: new Listing { ?; ?; ? }"
    new {
      ["Pigeon"] = 42
      ["Barn Owl"] = 21
    }
    "Expected value of type `Int`, but got type `String`. Value: \"Pigeon\""
  }
  ["cast Mapping<, UInt> to other integer types"] {
    9999
    9999
    9999
    9999
    9999
    9999
    "Type constraint `isBetween(-128, 127)` violated. Value: 9999"
    "Type constraint `isBetween(0, 255)` violated. Value: 9999"
  }
  ["union type"] {
    42
    42
    42
    "Expected value of type `String|Duration`, but got type `Int`. Value: 42"
    List(1, 2, 3)
    List(1, 2, 3)
    "Expected value of type `List<String>|Set<Int>`, but got a different `List`. Value: List(1, 2, 3)"
  }
  ["nullable type"] {
    null
    null
    "Expected value of type `Map`, but got `null`."
  }
  ["function type"] {
    42
    42
    "Expected value of type `Function1`, but got type `Function2`. Value: new Function2 {}"
  }
  ["string literal type"] {
    "Pigeon"
    "Expected value of type `\"Piggy\"|\"Barn Owl\"`, but got `\"Pigeon\"`."
  }
  ["constrained type"] {
    "abc"
    "Type constraint `length == 4` violated. Value: \"abc\""
    List("a", "b", "c")
  }
}
