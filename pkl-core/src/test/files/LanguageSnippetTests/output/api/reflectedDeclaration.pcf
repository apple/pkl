alias {
  location {
    line = 3
    column = 1
    displayUri = "file:///$snippetsDir/input/api/reflectedDeclaration.pkl"
  }
  docComment = null
  annotations = List()
  modifiers = Set()
  name = "MyAlias"
  typeParameters = List()
  referent {
    members = List(new {
      referent {
        location {
          line = 1056
          column = 1
          displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1056"
        }
        docComment = """
          A boolean value, either [true] or [false].
          
          The following operators are supported for booleans:
          ```
          !bool          // logical negation
          bool1 && bool2 // logical conjunction
          bool1 || bool2 // logical disjunction
          ```
          """
        annotations = List()
        modifiers = Set("external")
        name = "Boolean"
        typeParameters = List()
        superclass {
          location {
            line = 41
            column = 1
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
          }
          docComment = """
            The top type of the type hierarchy.
            
            Every type is a subtype of [Any].
            
            The following operators are supported for all values:
            ```
            value1 == value2 // equality
            value1 != value2 // inequality
            value.member     // member access
            value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
            value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
            value is String  // type test
            value as String  // type cast; throws an error unless `value is String`
            ```
            """
          annotations = List()
          modifiers = Set("abstract", "external")
          name = "Any"
          typeParameters = List()
          superclass = null
          supertype = null
          properties = Map()
          methods = Map("getClass", new {
            location {
              line = 43
              column = 3
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
            }
            docComment = "Returns the class of [this]."
            annotations = List()
            modifiers = Set()
            name = "getClass"
            typeParameters = List()
            parameters = Map()
          }, "toString", new {
            location {
              line = 48
              column = 3
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
            }
            docComment = """
              Returns a string representation of [this].
              
              This method is used to convert the values of string interpolation expressions to strings.
              """
            annotations = List()
            modifiers = Set()
            name = "toString"
            typeParameters = List()
            parameters = Map()
          }, "ifNonNull", new {
            location {
              line = 53
              column = 3
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
            }
            docComment = """
              Returns `this |> transform` if [this] is non-null, and [null] otherwise.
              
              This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
              """
            annotations = List()
            modifiers = Set()
            name = "ifNonNull"
            typeParameters = List(new {
              name = "Result"
              variance = null
            })
            parameters = Map("transform", new {
              name = "transform"
            })
          })
        }
        supertype {
          referent {
            location {
              line = 41
              column = 1
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
            }
            docComment = """
              The top type of the type hierarchy.
              
              Every type is a subtype of [Any].
              
              The following operators are supported for all values:
              ```
              value1 == value2 // equality
              value1 != value2 // inequality
              value.member     // member access
              value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
              value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
              value is String  // type test
              value as String  // type cast; throws an error unless `value is String`
              ```
              """
            annotations = List()
            modifiers = Set("abstract", "external")
            name = "Any"
            typeParameters = List()
            superclass = null
            supertype = null
            properties = Map()
            methods = Map("getClass", new {
              location {
                line = 43
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
              }
              docComment = "Returns the class of [this]."
              annotations = List()
              modifiers = Set()
              name = "getClass"
              typeParameters = List()
              parameters = Map()
            }, "toString", new {
              location {
                line = 48
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
              }
              docComment = """
                Returns a string representation of [this].
                
                This method is used to convert the values of string interpolation expressions to strings.
                """
              annotations = List()
              modifiers = Set()
              name = "toString"
              typeParameters = List()
              parameters = Map()
            }, "ifNonNull", new {
              location {
                line = 53
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
              }
              docComment = """
                Returns `this |> transform` if [this] is non-null, and [null] otherwise.
                
                This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
                """
              annotations = List()
              modifiers = Set()
              name = "ifNonNull"
              typeParameters = List(new {
                name = "Result"
                variance = null
              })
              parameters = Map("transform", new {
                name = "transform"
              })
            })
          }
          typeArguments = List()
        }
        properties = Map()
        methods = Map("xor", new {
          location {
            line = 1066
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1066"
          }
          docComment = """
            Tells if exactly one of [this] and [other] is [true] (exclusive or).
            
            Facts:
            ```
            !true.xor(true)
            true.xor(false)
            false.xor(true)
            !false.xor(false)
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "xor"
          typeParameters = List()
          parameters = Map("other", new {
            name = "other"
          })
        }, "implies", new {
          location {
            line = 1079
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1079"
          }
          docComment = """
            Tells if [this] implies [other] (logical consequence).
            
            *Note*: This function does not short-circuit; [other] is always evaluated.
            
            Facts:
            ```
            true.implies(true)
            !true.implies(false)
            false.implies(true)
            false.implies(false)
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "implies"
          typeParameters = List()
          parameters = Map("other", new {
            name = "other"
          })
        })
      }
      typeArguments = List()
    }, new {
      referent {
        location {
          line = 1092
          column = 1
          displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1092"
        }
        docComment = """
          A sequence of Unicode characters (code points).
          
          The following operators are supported for strings:
          ```
          str[3]      // subscript
          str1 + str2 // concatenation
          ```
          """
        annotations = List()
        modifiers = Set("external")
        name = "String"
        typeParameters = List()
        superclass {
          location {
            line = 41
            column = 1
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
          }
          docComment = """
            The top type of the type hierarchy.
            
            Every type is a subtype of [Any].
            
            The following operators are supported for all values:
            ```
            value1 == value2 // equality
            value1 != value2 // inequality
            value.member     // member access
            value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
            value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
            value is String  // type test
            value as String  // type cast; throws an error unless `value is String`
            ```
            """
          annotations = List()
          modifiers = Set("abstract", "external")
          name = "Any"
          typeParameters = List()
          superclass = null
          supertype = null
          properties = Map()
          methods = Map("getClass", new {
            location {
              line = 43
              column = 3
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
            }
            docComment = "Returns the class of [this]."
            annotations = List()
            modifiers = Set()
            name = "getClass"
            typeParameters = List()
            parameters = Map()
          }, "toString", new {
            location {
              line = 48
              column = 3
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
            }
            docComment = """
              Returns a string representation of [this].
              
              This method is used to convert the values of string interpolation expressions to strings.
              """
            annotations = List()
            modifiers = Set()
            name = "toString"
            typeParameters = List()
            parameters = Map()
          }, "ifNonNull", new {
            location {
              line = 53
              column = 3
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
            }
            docComment = """
              Returns `this |> transform` if [this] is non-null, and [null] otherwise.
              
              This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
              """
            annotations = List()
            modifiers = Set()
            name = "ifNonNull"
            typeParameters = List(new {
              name = "Result"
              variance = null
            })
            parameters = Map("transform", new {
              name = "transform"
            })
          })
        }
        supertype {
          referent {
            location {
              line = 41
              column = 1
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
            }
            docComment = """
              The top type of the type hierarchy.
              
              Every type is a subtype of [Any].
              
              The following operators are supported for all values:
              ```
              value1 == value2 // equality
              value1 != value2 // inequality
              value.member     // member access
              value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
              value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
              value is String  // type test
              value as String  // type cast; throws an error unless `value is String`
              ```
              """
            annotations = List()
            modifiers = Set("abstract", "external")
            name = "Any"
            typeParameters = List()
            superclass = null
            supertype = null
            properties = Map()
            methods = Map("getClass", new {
              location {
                line = 43
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
              }
              docComment = "Returns the class of [this]."
              annotations = List()
              modifiers = Set()
              name = "getClass"
              typeParameters = List()
              parameters = Map()
            }, "toString", new {
              location {
                line = 48
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
              }
              docComment = """
                Returns a string representation of [this].
                
                This method is used to convert the values of string interpolation expressions to strings.
                """
              annotations = List()
              modifiers = Set()
              name = "toString"
              typeParameters = List()
              parameters = Map()
            }, "ifNonNull", new {
              location {
                line = 53
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
              }
              docComment = """
                Returns `this |> transform` if [this] is non-null, and [null] otherwise.
                
                This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
                """
              annotations = List()
              modifiers = Set()
              name = "ifNonNull"
              typeParameters = List(new {
                name = "Result"
                variance = null
              })
              parameters = Map("transform", new {
                name = "transform"
              })
            })
          }
          typeArguments = List()
        }
        properties = Map("length", new {
          location {
            line = 1103
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1103"
          }
          docComment = """
            The number of characters in this string.
            
            *Note*: The runtime complexity of this operation is `O(n)`.
            
            Facts:
            ```
            "".length == 0
            "abc".length == 3
            ```
            """
          annotations = List(new {
            names {
              "size"
              "count"
            }
          })
          modifiers = Set()
          name = "length"
        }, "lastIndex", new {
          location {
            line = 1116
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1116"
          }
          docComment = """
            The index of the last character in this string (same as `length - 1`).
            
            Returns `-1` for an empty string.
            
            *Note*: The runtime complexity of this operation is `O(n)`.
            
            Facts:
            ```
            "".lastIndex == -1
            "abc".lastIndex == 2
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "lastIndex"
        }, "isEmpty", new {
          location {
            line = 1126
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1126"
          }
          docComment = """
            Tells whether this string is empty.
            
            Facts:
            ```
            "".isEmpty
            !("   ".isEmpty)
            !("abc".isEmpty)
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "isEmpty"
        }, "isBlank", new {
          location {
            line = 1137
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1137"
          }
          docComment = """
            Tells if all characters in this string have Unicode property "White_Space".
            
            Facts:
            ```
            "".isBlank
            "   ".isBlank
            "\\t\\n\\r".isBlank
            !("abc".isBlank)
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "isBlank"
        }, "isRegex", new {
          location {
            line = 1140
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1140"
          }
          docComment = "Tells if this string is a valid regular expression according to [Regex]."
          annotations = List()
          modifiers = Set()
          name = "isRegex"
        }, "isBase64", new {
          location {
            line = 1150
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1150"
          }
          docComment = """
            Tells if this is a valid base64-encoded string.
            
            Facts:
            ```
            "AQIDBA==".isBase64
            !"hello there".isBase64
            ```
            """
          annotations = List(new {
            version = "0.29.0"
          })
          modifiers = Set()
          name = "isBase64"
        }, "md5", new {
          location {
            line = 1157
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1157"
          }
          docComment = """
            The [MD5](https://en.wikipedia.org/wiki/MD5)
            hash of this string's UTF-8 byte sequence
            as hexadecimal string.
            
            MD5 is cryptographically broken and should not be used for secure applications.
            """
          annotations = List()
          modifiers = Set()
          name = "md5"
        }, "sha1", new {
          location {
            line = 1163
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1163"
          }
          docComment = """
            The [SHA-1](https://en.wikipedia.org/wiki/SHA-1)
            hash of this string's UTF-8 byte sequence.
            
            SHA-1 is cryptographically broken and should not be used for secure applications.
            """
          annotations = List()
          modifiers = Set()
          name = "sha1"
        }, "sha256", new {
          location {
            line = 1168
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1168"
          }
          docComment = """
            The [SHA-256](https://en.wikipedia.org/wiki/SHA-2)
            cryptographic hash of this string's UTF-8 byte sequence
            as hexadecimal string.
            """
          annotations = List()
          modifiers = Set()
          name = "sha256"
        }, "sha256Int", new {
          location {
            line = 1172
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1172"
          }
          docComment = """
            The first 64 bits of the [SHA-256](https://en.wikipedia.org/wiki/SHA-2)
            cryptographic hash of this string's UTF-8 byte sequence.
            """
          annotations = List()
          modifiers = Set()
          name = "sha256Int"
        }, "base64", new {
          location {
            line = 1175
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1175"
          }
          docComment = "The Base64 encoding of this string's UTF-8 byte sequence."
          annotations = List()
          modifiers = Set()
          name = "base64"
        }, "base64Decoded", new {
          location {
            line = 1183
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1183"
          }
          docComment = """
            The inverse of [base64].
            
            Facts:
            ```
            "abc".base64.base64Decoded == "abc"
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "base64Decoded"
        }, "base64DecodedBytes", new {
          location {
            line = 1192
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1192"
          }
          docComment = """
            Converts this base64-format string into [Bytes].
            
            Facts:
            ```
            "AQIDBA==".base64DecodedBytes = Bytes(1, 2, 3, 4)
            ```
            """
          annotations = List(new {
            version = "0.29.0"
          })
          modifiers = Set()
          name = "base64DecodedBytes"
        }, "chars", new {
          location {
            line = 1200
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1200"
          }
          docComment = """
            The Unicode characters in this string.
            
            Facts:
            ```
            "abc".chars == List("a", "b", "c")
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "chars"
        }, "codePoints", new {
          location {
            line = 1208
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1208"
          }
          docComment = """
            The Unicode code points in this string.
            
            Facts:
            ```
            "abc".codePoints == List(0x61, 0x62, 0x63)
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "codePoints"
        })
        methods = Map("getOrNull", new {
          location {
            line = 1220
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1220"
          }
          docComment = """
            Returns the character at [index], or [null] if [index] is out of range.
            
            Facts:
            ```
            "abcde".getOrNull(-1) == null
            "abcde".getOrNull(0) == "a"
            "abcde".getOrNull(2) == "c"
            "abcde".getOrNull(4) == "e"
            "abcde".getOrNull(5) == null
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "getOrNull"
          typeParameters = List()
          parameters = Map("index", new {
            name = "index"
          })
        }, "substring", new {
          location {
            line = 1234
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1234"
          }
          docComment = """
            Returns the substring from [start] until [exclusiveEnd].
            
            Throws if [start] is outside range `0`..[length] or [exclusiveEnd] is outside range [start]..[length].
            
            Facts:
            ```
            "abcde".substring(0, 0) == ""
            "abcde".substring(0, 1) == "a"
            "abcde".substring(1, 4) == "bcd"
            "abcde".substring(4, 5) == "e"
            "abcde".substring(5, 5) == ""
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "substring"
          typeParameters = List()
          parameters = Map("start", new {
            name = "start"
          }, "exclusiveEnd", new {
            name = "exclusiveEnd"
          })
        }, "substringOrNull", new {
          location {
            line = 1252
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1252"
          }
          docComment = """
            Returns the substring from [start] until [exclusiveEnd].
            
            Returns [null] if [start] is outside range `0`..[length] or [exclusiveEnd] is outside range [start]..[length].
            
            Facts:
            ```
            "abcde".substringOrNull(0, 0) == ""
            "abcde".substringOrNull(0, 1) == "a"
            "abcde".substringOrNull(1, 4) == "bcd"
            "abcde".substringOrNull(4, 5) == "e"
            "abcde".substringOrNull(5, 5) == ""
            
            "abcde".substringOrNull(-1, 3) == null
            "abcde".substringOrNull(0, 6) == null
            "abcde".substringOrNull(3, 2) == null
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "substringOrNull"
          typeParameters = List()
          parameters = Map("start", new {
            name = "start"
          }, "exclusiveEnd", new {
            name = "exclusiveEnd"
          })
        }, "repeat", new {
          location {
            line = 1262
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1262"
          }
          docComment = """
            Concatenates [count] copies of this string.
            
            Facts:
            ```
            "abc".repeat(0) == ""
            "abc".repeat(1) == "abc"
            "abc".repeat(3) == "abcabcabc"
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "repeat"
          typeParameters = List()
          parameters = Map("count", new {
            name = "count"
          })
        }, "contains", new {
          location {
            line = 1265
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1265"
          }
          docComment = "Tells whether this string contains [pattern]."
          annotations = List()
          modifiers = Set()
          name = "contains"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          })
        }, "matches", new {
          location {
            line = 1269
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1269"
          }
          docComment = "Tells whether this string matches [regex] in its entirety."
          annotations = List(new {
            names {
              "test"
            }
          })
          modifiers = Set()
          name = "matches"
          typeParameters = List()
          parameters = Map("regex", new {
            name = "regex"
          })
        }, "startsWith", new {
          location {
            line = 1272
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1272"
          }
          docComment = "Tells whether this string starts with [pattern]."
          annotations = List()
          modifiers = Set()
          name = "startsWith"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          })
        }, "endsWith", new {
          location {
            line = 1275
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1275"
          }
          docComment = "Tells whether this string ends with [pattern]."
          annotations = List()
          modifiers = Set()
          name = "endsWith"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          })
        }, "indexOf", new {
          location {
            line = 1281
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1281"
          }
          docComment = """
            Returns the zero-based index of the first occurrence of [pattern]
            in this string.
            
            Throws if [pattern] does not occur in this string.
            """
          annotations = List()
          modifiers = Set()
          name = "indexOf"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          })
        }, "indexOfOrNull", new {
          location {
            line = 1285
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1285"
          }
          docComment = """
            Returns the zero-based index of the first occurrence of [pattern]
            in this string, or [null] if [pattern] does not occur in this string.
            """
          annotations = List()
          modifiers = Set()
          name = "indexOfOrNull"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          })
        }, "lastIndexOf", new {
          location {
            line = 1291
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1291"
          }
          docComment = """
            Returns the zero-based index of the last occurrence of [pattern]
            in this string.
            
            Throws if [pattern] does not occur in this string.
            """
          annotations = List()
          modifiers = Set()
          name = "lastIndexOf"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          })
        }, "lastIndexOfOrNull", new {
          location {
            line = 1295
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1295"
          }
          docComment = """
            Returns the zero-based index of the last occurrence of [pattern]
            in this string, or [null] if [pattern] does not occur in this string.
            """
          annotations = List()
          modifiers = Set()
          name = "lastIndexOfOrNull"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          })
        }, "take", new {
          location {
            line = 1301
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1301"
          }
          docComment = """
            Returns the first [n] characters of this string.
            
            Returns [this] if [n] is greater than or equal to [length].
            """
          annotations = List(new {
            names {
              "limit"
            }
          })
          modifiers = Set()
          name = "take"
          typeParameters = List()
          parameters = Map("n", new {
            name = "n"
          })
        }, "takeWhile", new {
          location {
            line = 1304
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1304"
          }
          docComment = "Returns the longest prefix of this string that satisfies [predicate]."
          annotations = List()
          modifiers = Set()
          name = "takeWhile"
          typeParameters = List()
          parameters = Map("predicate", new {
            name = "predicate"
          })
        }, "takeLast", new {
          location {
            line = 1309
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1309"
          }
          docComment = """
            Returns the last [n] characters of this string.
            
            Returns [this] if [n] is greater than or equal to [length].
            """
          annotations = List()
          modifiers = Set()
          name = "takeLast"
          typeParameters = List()
          parameters = Map("n", new {
            name = "n"
          })
        }, "takeLastWhile", new {
          location {
            line = 1312
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1312"
          }
          docComment = "Returns the longest suffix of this string that satisfies [predicate]."
          annotations = List()
          modifiers = Set()
          name = "takeLastWhile"
          typeParameters = List()
          parameters = Map("predicate", new {
            name = "predicate"
          })
        }, "drop", new {
          location {
            line = 1318
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1318"
          }
          docComment = """
            Removes the first [n] characters of this string.
            
            Returns the empty string if [n] is greater than or equal to [length].
            """
          annotations = List(new {
            names {
              "skip"
            }
          })
          modifiers = Set()
          name = "drop"
          typeParameters = List()
          parameters = Map("n", new {
            name = "n"
          })
        }, "dropWhile", new {
          location {
            line = 1322
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1322"
          }
          docComment = "Removes the longest prefix of this string that satisfies [predicate]."
          annotations = List(new {
            names {
              "skipWhile"
            }
          })
          modifiers = Set()
          name = "dropWhile"
          typeParameters = List()
          parameters = Map("predicate", new {
            name = "predicate"
          })
        }, "dropLast", new {
          location {
            line = 1328
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1328"
          }
          docComment = """
            Removes the last [n] characters of this string.
            
            Returns the empty string if [n] is greater than or equal to [length].
            """
          annotations = List(new {
            names {
              "skipLast"
            }
          })
          modifiers = Set()
          name = "dropLast"
          typeParameters = List()
          parameters = Map("n", new {
            name = "n"
          })
        }, "dropLastWhile", new {
          location {
            line = 1332
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1332"
          }
          docComment = "Removes the longest suffix of this string that satisfies [predicate]."
          annotations = List(new {
            names {
              "skipLastWhile"
            }
          })
          modifiers = Set()
          name = "dropLastWhile"
          typeParameters = List()
          parameters = Map("predicate", new {
            name = "predicate"
          })
        }, "replaceFirst", new {
          location {
            line = 1337
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1337"
          }
          docComment = """
            Replaces the first occurrence of [pattern] in this string with [replacement].
            
            Returns this string unchanged if [pattern] does not occur in this string.
            """
          annotations = List()
          modifiers = Set()
          name = "replaceFirst"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          }, "replacement", new {
            name = "replacement"
          })
        }, "replaceLast", new {
          location {
            line = 1342
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1342"
          }
          docComment = """
            Replaces the last occurrence of [pattern] in this string with [replacement].
            
            Returns this string unchanged if [pattern] does not occur in this string.
            """
          annotations = List()
          modifiers = Set()
          name = "replaceLast"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          }, "replacement", new {
            name = "replacement"
          })
        }, "replaceAll", new {
          location {
            line = 1347
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1347"
          }
          docComment = """
            Replaces all occurrences of [pattern] in this string with [replacement].
            
            Returns this string unchanged if [pattern] does not occur in this string.
            """
          annotations = List()
          modifiers = Set()
          name = "replaceAll"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          }, "replacement", new {
            name = "replacement"
          })
        }, "replaceFirstMapped", new {
          location {
            line = 1352
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1352"
          }
          docComment = """
            Replaces the first occurrence of [pattern] in this string with the return value of [mapper].
            
            Returns this string unchanged if [pattern] does not occur in this string.
            """
          annotations = List()
          modifiers = Set()
          name = "replaceFirstMapped"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          }, "mapper", new {
            name = "mapper"
          })
        }, "replaceLastMapped", new {
          location {
            line = 1357
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1357"
          }
          docComment = """
            Replaces the last occurrence of [pattern] in this string with the return value of [mapper].
            
            Returns this string unchanged if [pattern] does not occur in this string.
            """
          annotations = List()
          modifiers = Set()
          name = "replaceLastMapped"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          }, "mapper", new {
            name = "mapper"
          })
        }, "replaceAllMapped", new {
          location {
            line = 1362
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1362"
          }
          docComment = """
            Replaces all occurrences of [pattern] in this string with the return value of [mapper].
            
            Returns this string unchanged if [pattern] does not occur in this string.
            """
          annotations = List()
          modifiers = Set()
          name = "replaceAllMapped"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          }, "mapper", new {
            name = "mapper"
          })
        }, "replaceRange", new {
          location {
            line = 1367
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1367"
          }
          docComment = """
            Replaces the characters between [start] and [exclusiveEnd] with [replacement].
            
            Inserts [replacement] at index [start] if `start == exclusiveEnd`.
            """
          annotations = List()
          modifiers = Set()
          name = "replaceRange"
          typeParameters = List()
          parameters = Map("start", new {
            name = "start"
          }, "exclusiveEnd", new {
            name = "exclusiveEnd"
          }, "replacement", new {
            name = "replacement"
          })
        }, "toUpperCase", new {
          location {
            line = 1370
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1370"
          }
          docComment = "Performs a locale-independent character-by-character conversion of this string to uppercase."
          annotations = List()
          modifiers = Set()
          name = "toUpperCase"
          typeParameters = List()
          parameters = Map()
        }, "toLowerCase", new {
          location {
            line = 1373
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1373"
          }
          docComment = "Performs a locale-independent character-by-character conversion of this string to lowercase."
          annotations = List()
          modifiers = Set()
          name = "toLowerCase"
          typeParameters = List()
          parameters = Map()
        }, "reverse", new {
          location {
            line = 1376
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1376"
          }
          docComment = "Reverses the order of characters in this string."
          annotations = List()
          modifiers = Set()
          name = "reverse"
          typeParameters = List()
          parameters = Map()
        }, "trim", new {
          location {
            line = 1380
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1380"
          }
          docComment = "Removes any leading and trailing characters with Unicode property \"White_Space\" from this string."
          annotations = List(new {
            names {
              "strip"
            }
          })
          modifiers = Set()
          name = "trim"
          typeParameters = List()
          parameters = Map()
        }, "trimStart", new {
          location {
            line = 1384
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1384"
          }
          docComment = "Removes any leading characters with Unicode property \"White_Space\" from this string."
          annotations = List(new {
            names {
              "stripLeft"
              "stripStart"
              "stripLeading"
              "trimLeft"
              "trimLeading"
            }
          })
          modifiers = Set()
          name = "trimStart"
          typeParameters = List()
          parameters = Map()
        }, "trimEnd", new {
          location {
            line = 1388
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1388"
          }
          docComment = "Removes any trailing characters with Unicode property \"White_Space\" from this string."
          annotations = List(new {
            names {
              "stripRight"
              "stripEnd"
              "stripTrailing"
              "trimRight"
              "trimTrailin"
            }
          })
          modifiers = Set()
          name = "trimEnd"
          typeParameters = List()
          parameters = Map()
        }, "padStart", new {
          location {
            line = 1394
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1394"
          }
          docComment = """
            Increases the length of this string to [width] by adding leading [char]s.
            
            Returns this string unchanged if its length is already equal to or greater than [width].
            """
          annotations = List(new {
            names {
              "padLeft"
            }
          })
          modifiers = Set()
          name = "padStart"
          typeParameters = List()
          parameters = Map("width", new {
            name = "width"
          }, "char", new {
            name = "char"
          })
        }, "padEnd", new {
          location {
            line = 1400
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1400"
          }
          docComment = """
            Increases the length of this string to [width] by adding trailing [char]s.
            
            Returns this string unchanged if its length is already equal to or greater than [width].
            """
          annotations = List(new {
            names {
              "padRight"
            }
          })
          modifiers = Set()
          name = "padEnd"
          typeParameters = List()
          parameters = Map("width", new {
            name = "width"
          }, "char", new {
            name = "char"
          })
        }, "split", new {
          location {
            line = 1403
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1403"
          }
          docComment = "Splits this string around matches of [pattern]."
          annotations = List()
          modifiers = Set()
          name = "split"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          })
        }, "splitLimit", new {
          location {
            line = 1418
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1418"
          }
          docComment = """
            Splits this string matches of [pattern], up to [limit] substrings.
            
            Returns a [List] with at most [limit] elements.
            If the limit has been reached, the last entry will contain the un-split remainder of this string.
            
            Facts:
            ```
            "a.b.c".splitLimit(".", 2) == List("a", "b.c")
            "a.b.c".splitLimit(".", 1) == List("a.b.c")
            "a.b.c".splitLimit(".", 50) == List("a", "b", "c")
            "a.b:c".splitLimit(Regex("[.:]"), 3) == List("a", "b", "c")
            ```
            """
          annotations = List(new {
            version = "0.27.0"
          })
          modifiers = Set()
          name = "splitLimit"
          typeParameters = List()
          parameters = Map("pattern", new {
            name = "pattern"
          }, "limit", new {
            name = "limit"
          })
        }, "capitalize", new {
          location {
            line = 1428
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1428"
          }
          docComment = """
            Converts the first character of this string to title case.
            
            Facts:
            ```
            "pigeon".capitalize() == "Pigeon"
            "pigeon bird".capitalize() == "Pigeon bird"
            "".capitalize() == ""
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "capitalize"
          typeParameters = List()
          parameters = Map()
        }, "decapitalize", new {
          location {
            line = 1438
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1438"
          }
          docComment = """
            Converts the first character of this string to lower case.
            
            Facts:
            ```
            "Pigeon".decapitalize() == "pigeon"
            "Pigeon Bird".decapitalize() == "pigeon Bird"
            "".decapitalize() == ""
            ```
            """
          annotations = List()
          modifiers = Set()
          name = "decapitalize"
          typeParameters = List()
          parameters = Map()
        }, "toInt", new {
          location {
            line = 1444
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1444"
          }
          docComment = """
            Parses this string as a signed decimal (base 10) integer.
            
            Throws if this string cannot be parsed as a signed decimal integer,
            or if the integer is too large to fit into [Int].
            """
          annotations = List()
          modifiers = Set()
          name = "toInt"
          typeParameters = List()
          parameters = Map()
        }, "toIntOrNull", new {
          location {
            line = 1450
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1450"
          }
          docComment = """
            Parses this string as a signed decimal (base 10) integer.
            
            Returns [null] if this string cannot be parsed as a signed decimal integer,
            or if the integer is too large to fit into [Int].
            """
          annotations = List()
          modifiers = Set()
          name = "toIntOrNull"
          typeParameters = List()
          parameters = Map()
        }, "toFloat", new {
          location {
            line = 1455
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1455"
          }
          docComment = """
            Parses this string as a floating point number.
            
            Throws if this string cannot be parsed as a floating point number.
            """
          annotations = List()
          modifiers = Set()
          name = "toFloat"
          typeParameters = List()
          parameters = Map()
        }, "toFloatOrNull", new {
          location {
            line = 1460
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1460"
          }
          docComment = """
            Parses this string as a floating point number.
            
            Returns [null] if this string cannot be parsed as a floating point number.
            """
          annotations = List()
          modifiers = Set()
          name = "toFloatOrNull"
          typeParameters = List()
          parameters = Map()
        }, "toBoolean", new {
          location {
            line = 1465
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1465"
          }
          docComment = """
            Parses `"true"` to [true] and `"false"` to [false] (case-insensitive).
            
            Throws if this string is neither `"true"` nor `"false"` (case-insensitive).
            """
          annotations = List()
          modifiers = Set()
          name = "toBoolean"
          typeParameters = List()
          parameters = Map()
        }, "toBooleanOrNull", new {
          location {
            line = 1470
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1470"
          }
          docComment = """
            Parses `"true"` to [true] and `"false"` to [false] (case-insensitive).
            
            Returns [null] if this string is neither `"true"` nor `"false"` (case-insensitive).
            """
          annotations = List()
          modifiers = Set()
          name = "toBooleanOrNull"
          typeParameters = List()
          parameters = Map()
        }, "encodeToBytes", new {
          location {
            line = 1479
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1479"
          }
          docComment = """
            Returns the bytes of this string, encoded using [charset]. 
            
            Facts:
            ```
            "Parrot".encodeToBytes("UTF-8") == Bytes(80, 97, 114, 114, 111, 116)
            ```
            """
          annotations = List(new {
            version = "0.29.0"
          })
          modifiers = Set()
          name = "encodeToBytes"
          typeParameters = List()
          parameters = Map("charset", new {
            name = "charset"
          })
        })
      }
      typeArguments = List()
    })
  }
}
rec {
  referent {
    location {
      line = 5
      column = 1
      displayUri = "file:///$snippetsDir/input/api/reflectedDeclaration.pkl"
    }
    docComment = null
    annotations = List()
    modifiers = Set()
    name = "Rec"
    typeParameters = List()
    superclass {
      location {
        line = 1773
        column = 1
        displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1773"
      }
      docComment = """
        Base class for objects whose members are described by a class definition.
        
        User-defined classes (that is, classes without `external` modifier) implicitly extend this class.
        """
      annotations = List()
      modifiers = Set("abstract")
      name = "Typed"
      typeParameters = List()
      superclass {
        location {
          line = 1768
          column = 1
          displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1768"
        }
        docComment = """
          A composite value containing members (properties, elements, entries).
          
          ```
          obj = new {
            name = "Pigeon" // property
            "Hello"       // element
            ["two"] = 2   // entry
          }
          
          obj.name   // "Pigeon"
          obj[0]     // "Hello"
          obj["two"] // 2
          ```
          
          An object can be *amended* to create variants of itself.
          This is similar to inheritance in prototype-oriented programming.
          
          ```
          pigeon = new { name = "Pigeon"; age = 42 }
          barnOwl = (pigeon) { name = "Barn Owl" } // override property `name`
          oldPigeon = (pigeon) { age = 84 } // override property `age`
          ```
          
          Object members may reference other members:
          
          ```
          thresholds = new { lower = 10; upper = lower + 5 }
          ```
          
          Object members are dynamically bound.
          This is similar to how computed cells in a spreadsheet work.
          
          ```
          thresholds = new { lower = 10; upper = lower + 5 }
          thresholds2 = new { lower = 7 } // thresholds2.upper == 12
          ```
          
          Objects have memberwise equality and hash code.
          
          To arbitrarily manipulate an object, convert it to a [Collection].
          If necessary, the manipulated [Collection] can be converted back to an [Object].
          
          ```
          pigeon = new { name = "Pigeon"; age = 42 }
          manipulated = pigeon.toMap().mapKeys((key, value) -> key.reverse())
          manipulated.toDynamic() // new { eman = "Pigeon"; ega = 42 }
          ```
          """
        annotations = List()
        modifiers = Set("abstract", "external")
        name = "Object"
        typeParameters = List()
        superclass {
          location {
            line = 41
            column = 1
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
          }
          docComment = """
            The top type of the type hierarchy.
            
            Every type is a subtype of [Any].
            
            The following operators are supported for all values:
            ```
            value1 == value2 // equality
            value1 != value2 // inequality
            value.member     // member access
            value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
            value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
            value is String  // type test
            value as String  // type cast; throws an error unless `value is String`
            ```
            """
          annotations = List()
          modifiers = Set("abstract", "external")
          name = "Any"
          typeParameters = List()
          superclass = null
          supertype = null
          properties = Map()
          methods = Map("getClass", new {
            location {
              line = 43
              column = 3
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
            }
            docComment = "Returns the class of [this]."
            annotations = List()
            modifiers = Set()
            name = "getClass"
            typeParameters = List()
            parameters = Map()
          }, "toString", new {
            location {
              line = 48
              column = 3
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
            }
            docComment = """
              Returns a string representation of [this].
              
              This method is used to convert the values of string interpolation expressions to strings.
              """
            annotations = List()
            modifiers = Set()
            name = "toString"
            typeParameters = List()
            parameters = Map()
          }, "ifNonNull", new {
            location {
              line = 53
              column = 3
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
            }
            docComment = """
              Returns `this |> transform` if [this] is non-null, and [null] otherwise.
              
              This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
              """
            annotations = List()
            modifiers = Set()
            name = "ifNonNull"
            typeParameters = List(new {
              name = "Result"
              variance = null
            })
            parameters = Map("transform", new {
              name = "transform"
            })
          })
        }
        supertype {
          referent {
            location {
              line = 41
              column = 1
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
            }
            docComment = """
              The top type of the type hierarchy.
              
              Every type is a subtype of [Any].
              
              The following operators are supported for all values:
              ```
              value1 == value2 // equality
              value1 != value2 // inequality
              value.member     // member access
              value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
              value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
              value is String  // type test
              value as String  // type cast; throws an error unless `value is String`
              ```
              """
            annotations = List()
            modifiers = Set("abstract", "external")
            name = "Any"
            typeParameters = List()
            superclass = null
            supertype = null
            properties = Map()
            methods = Map("getClass", new {
              location {
                line = 43
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
              }
              docComment = "Returns the class of [this]."
              annotations = List()
              modifiers = Set()
              name = "getClass"
              typeParameters = List()
              parameters = Map()
            }, "toString", new {
              location {
                line = 48
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
              }
              docComment = """
                Returns a string representation of [this].
                
                This method is used to convert the values of string interpolation expressions to strings.
                """
              annotations = List()
              modifiers = Set()
              name = "toString"
              typeParameters = List()
              parameters = Map()
            }, "ifNonNull", new {
              location {
                line = 53
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
              }
              docComment = """
                Returns `this |> transform` if [this] is non-null, and [null] otherwise.
                
                This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
                """
              annotations = List()
              modifiers = Set()
              name = "ifNonNull"
              typeParameters = List(new {
                name = "Result"
                variance = null
              })
              parameters = Map("transform", new {
                name = "transform"
              })
            })
          }
          typeArguments = List()
        }
        properties = Map()
        methods = Map()
      }
      supertype {
        referent {
          location {
            line = 1768
            column = 1
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1768"
          }
          docComment = """
            A composite value containing members (properties, elements, entries).
            
            ```
            obj = new {
              name = "Pigeon" // property
              "Hello"       // element
              ["two"] = 2   // entry
            }
            
            obj.name   // "Pigeon"
            obj[0]     // "Hello"
            obj["two"] // 2
            ```
            
            An object can be *amended* to create variants of itself.
            This is similar to inheritance in prototype-oriented programming.
            
            ```
            pigeon = new { name = "Pigeon"; age = 42 }
            barnOwl = (pigeon) { name = "Barn Owl" } // override property `name`
            oldPigeon = (pigeon) { age = 84 } // override property `age`
            ```
            
            Object members may reference other members:
            
            ```
            thresholds = new { lower = 10; upper = lower + 5 }
            ```
            
            Object members are dynamically bound.
            This is similar to how computed cells in a spreadsheet work.
            
            ```
            thresholds = new { lower = 10; upper = lower + 5 }
            thresholds2 = new { lower = 7 } // thresholds2.upper == 12
            ```
            
            Objects have memberwise equality and hash code.
            
            To arbitrarily manipulate an object, convert it to a [Collection].
            If necessary, the manipulated [Collection] can be converted back to an [Object].
            
            ```
            pigeon = new { name = "Pigeon"; age = 42 }
            manipulated = pigeon.toMap().mapKeys((key, value) -> key.reverse())
            manipulated.toDynamic() // new { eman = "Pigeon"; ega = 42 }
            ```
            """
          annotations = List()
          modifiers = Set("abstract", "external")
          name = "Object"
          typeParameters = List()
          superclass {
            location {
              line = 41
              column = 1
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
            }
            docComment = """
              The top type of the type hierarchy.
              
              Every type is a subtype of [Any].
              
              The following operators are supported for all values:
              ```
              value1 == value2 // equality
              value1 != value2 // inequality
              value.member     // member access
              value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
              value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
              value is String  // type test
              value as String  // type cast; throws an error unless `value is String`
              ```
              """
            annotations = List()
            modifiers = Set("abstract", "external")
            name = "Any"
            typeParameters = List()
            superclass = null
            supertype = null
            properties = Map()
            methods = Map("getClass", new {
              location {
                line = 43
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
              }
              docComment = "Returns the class of [this]."
              annotations = List()
              modifiers = Set()
              name = "getClass"
              typeParameters = List()
              parameters = Map()
            }, "toString", new {
              location {
                line = 48
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
              }
              docComment = """
                Returns a string representation of [this].
                
                This method is used to convert the values of string interpolation expressions to strings.
                """
              annotations = List()
              modifiers = Set()
              name = "toString"
              typeParameters = List()
              parameters = Map()
            }, "ifNonNull", new {
              location {
                line = 53
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
              }
              docComment = """
                Returns `this |> transform` if [this] is non-null, and [null] otherwise.
                
                This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
                """
              annotations = List()
              modifiers = Set()
              name = "ifNonNull"
              typeParameters = List(new {
                name = "Result"
                variance = null
              })
              parameters = Map("transform", new {
                name = "transform"
              })
            })
          }
          supertype {
            referent {
              location {
                line = 41
                column = 1
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
              }
              docComment = """
                The top type of the type hierarchy.
                
                Every type is a subtype of [Any].
                
                The following operators are supported for all values:
                ```
                value1 == value2 // equality
                value1 != value2 // inequality
                value.member     // member access
                value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
                value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
                value is String  // type test
                value as String  // type cast; throws an error unless `value is String`
                ```
                """
              annotations = List()
              modifiers = Set("abstract", "external")
              name = "Any"
              typeParameters = List()
              superclass = null
              supertype = null
              properties = Map()
              methods = Map("getClass", new {
                location {
                  line = 43
                  column = 3
                  displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
                }
                docComment = "Returns the class of [this]."
                annotations = List()
                modifiers = Set()
                name = "getClass"
                typeParameters = List()
                parameters = Map()
              }, "toString", new {
                location {
                  line = 48
                  column = 3
                  displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
                }
                docComment = """
                  Returns a string representation of [this].
                  
                  This method is used to convert the values of string interpolation expressions to strings.
                  """
                annotations = List()
                modifiers = Set()
                name = "toString"
                typeParameters = List()
                parameters = Map()
              }, "ifNonNull", new {
                location {
                  line = 53
                  column = 3
                  displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
                }
                docComment = """
                  Returns `this |> transform` if [this] is non-null, and [null] otherwise.
                  
                  This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
                  """
                annotations = List()
                modifiers = Set()
                name = "ifNonNull"
                typeParameters = List(new {
                  name = "Result"
                  variance = null
                })
                parameters = Map("transform", new {
                  name = "transform"
                })
              })
            }
            typeArguments = List()
          }
          properties = Map()
          methods = Map()
        }
        typeArguments = List()
      }
      properties = Map()
      methods = Map("hasProperty", new {
        location {
          line = 1775
          column = 3
          displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1775"
        }
        docComment = "Tells if this object has a property with the given [name]."
        annotations = List()
        modifiers = Set()
        name = "hasProperty"
        typeParameters = List()
        parameters = Map("name", new {
          name = "name"
        })
      }, "getProperty", new {
        location {
          line = 1780
          column = 3
          displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1780"
        }
        docComment = """
          Returns the value of the property with the given [name].
          
          Throws if a property with this name does not exist.
          """
        annotations = List()
        modifiers = Set()
        name = "getProperty"
        typeParameters = List()
        parameters = Map("name", new {
          name = "name"
        })
      }, "getPropertyOrNull", new {
        location {
          line = 1785
          column = 3
          displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1785"
        }
        docComment = """
          Returns the value of the property with the given [name].
          
          Returns [null] if a property with this name does not exist.
          """
        annotations = List()
        modifiers = Set()
        name = "getPropertyOrNull"
        typeParameters = List()
        parameters = Map("name", new {
          name = "name"
        })
      }, "toDynamic", new {
        location {
          line = 1788
          column = 3
          displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1788"
        }
        docComment = "Converts this object to a [Dynamic] object."
        annotations = List()
        modifiers = Set()
        name = "toDynamic"
        typeParameters = List()
        parameters = Map()
      }, "toMap", new {
        location {
          line = 1791
          column = 3
          displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1791"
        }
        docComment = "Converts this object to a [Map]."
        annotations = List()
        modifiers = Set()
        name = "toMap"
        typeParameters = List()
        parameters = Map()
      })
    }
    supertype {
      referent {
        location {
          line = 1773
          column = 1
          displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1773"
        }
        docComment = """
          Base class for objects whose members are described by a class definition.
          
          User-defined classes (that is, classes without `external` modifier) implicitly extend this class.
          """
        annotations = List()
        modifiers = Set("abstract")
        name = "Typed"
        typeParameters = List()
        superclass {
          location {
            line = 1768
            column = 1
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1768"
          }
          docComment = """
            A composite value containing members (properties, elements, entries).
            
            ```
            obj = new {
              name = "Pigeon" // property
              "Hello"       // element
              ["two"] = 2   // entry
            }
            
            obj.name   // "Pigeon"
            obj[0]     // "Hello"
            obj["two"] // 2
            ```
            
            An object can be *amended* to create variants of itself.
            This is similar to inheritance in prototype-oriented programming.
            
            ```
            pigeon = new { name = "Pigeon"; age = 42 }
            barnOwl = (pigeon) { name = "Barn Owl" } // override property `name`
            oldPigeon = (pigeon) { age = 84 } // override property `age`
            ```
            
            Object members may reference other members:
            
            ```
            thresholds = new { lower = 10; upper = lower + 5 }
            ```
            
            Object members are dynamically bound.
            This is similar to how computed cells in a spreadsheet work.
            
            ```
            thresholds = new { lower = 10; upper = lower + 5 }
            thresholds2 = new { lower = 7 } // thresholds2.upper == 12
            ```
            
            Objects have memberwise equality and hash code.
            
            To arbitrarily manipulate an object, convert it to a [Collection].
            If necessary, the manipulated [Collection] can be converted back to an [Object].
            
            ```
            pigeon = new { name = "Pigeon"; age = 42 }
            manipulated = pigeon.toMap().mapKeys((key, value) -> key.reverse())
            manipulated.toDynamic() // new { eman = "Pigeon"; ega = 42 }
            ```
            """
          annotations = List()
          modifiers = Set("abstract", "external")
          name = "Object"
          typeParameters = List()
          superclass {
            location {
              line = 41
              column = 1
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
            }
            docComment = """
              The top type of the type hierarchy.
              
              Every type is a subtype of [Any].
              
              The following operators are supported for all values:
              ```
              value1 == value2 // equality
              value1 != value2 // inequality
              value.member     // member access
              value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
              value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
              value is String  // type test
              value as String  // type cast; throws an error unless `value is String`
              ```
              """
            annotations = List()
            modifiers = Set("abstract", "external")
            name = "Any"
            typeParameters = List()
            superclass = null
            supertype = null
            properties = Map()
            methods = Map("getClass", new {
              location {
                line = 43
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
              }
              docComment = "Returns the class of [this]."
              annotations = List()
              modifiers = Set()
              name = "getClass"
              typeParameters = List()
              parameters = Map()
            }, "toString", new {
              location {
                line = 48
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
              }
              docComment = """
                Returns a string representation of [this].
                
                This method is used to convert the values of string interpolation expressions to strings.
                """
              annotations = List()
              modifiers = Set()
              name = "toString"
              typeParameters = List()
              parameters = Map()
            }, "ifNonNull", new {
              location {
                line = 53
                column = 3
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
              }
              docComment = """
                Returns `this |> transform` if [this] is non-null, and [null] otherwise.
                
                This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
                """
              annotations = List()
              modifiers = Set()
              name = "ifNonNull"
              typeParameters = List(new {
                name = "Result"
                variance = null
              })
              parameters = Map("transform", new {
                name = "transform"
              })
            })
          }
          supertype {
            referent {
              location {
                line = 41
                column = 1
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
              }
              docComment = """
                The top type of the type hierarchy.
                
                Every type is a subtype of [Any].
                
                The following operators are supported for all values:
                ```
                value1 == value2 // equality
                value1 != value2 // inequality
                value.member     // member access
                value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
                value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
                value is String  // type test
                value as String  // type cast; throws an error unless `value is String`
                ```
                """
              annotations = List()
              modifiers = Set("abstract", "external")
              name = "Any"
              typeParameters = List()
              superclass = null
              supertype = null
              properties = Map()
              methods = Map("getClass", new {
                location {
                  line = 43
                  column = 3
                  displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
                }
                docComment = "Returns the class of [this]."
                annotations = List()
                modifiers = Set()
                name = "getClass"
                typeParameters = List()
                parameters = Map()
              }, "toString", new {
                location {
                  line = 48
                  column = 3
                  displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
                }
                docComment = """
                  Returns a string representation of [this].
                  
                  This method is used to convert the values of string interpolation expressions to strings.
                  """
                annotations = List()
                modifiers = Set()
                name = "toString"
                typeParameters = List()
                parameters = Map()
              }, "ifNonNull", new {
                location {
                  line = 53
                  column = 3
                  displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
                }
                docComment = """
                  Returns `this |> transform` if [this] is non-null, and [null] otherwise.
                  
                  This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
                  """
                annotations = List()
                modifiers = Set()
                name = "ifNonNull"
                typeParameters = List(new {
                  name = "Result"
                  variance = null
                })
                parameters = Map("transform", new {
                  name = "transform"
                })
              })
            }
            typeArguments = List()
          }
          properties = Map()
          methods = Map()
        }
        supertype {
          referent {
            location {
              line = 1768
              column = 1
              displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1768"
            }
            docComment = """
              A composite value containing members (properties, elements, entries).
              
              ```
              obj = new {
                name = "Pigeon" // property
                "Hello"       // element
                ["two"] = 2   // entry
              }
              
              obj.name   // "Pigeon"
              obj[0]     // "Hello"
              obj["two"] // 2
              ```
              
              An object can be *amended* to create variants of itself.
              This is similar to inheritance in prototype-oriented programming.
              
              ```
              pigeon = new { name = "Pigeon"; age = 42 }
              barnOwl = (pigeon) { name = "Barn Owl" } // override property `name`
              oldPigeon = (pigeon) { age = 84 } // override property `age`
              ```
              
              Object members may reference other members:
              
              ```
              thresholds = new { lower = 10; upper = lower + 5 }
              ```
              
              Object members are dynamically bound.
              This is similar to how computed cells in a spreadsheet work.
              
              ```
              thresholds = new { lower = 10; upper = lower + 5 }
              thresholds2 = new { lower = 7 } // thresholds2.upper == 12
              ```
              
              Objects have memberwise equality and hash code.
              
              To arbitrarily manipulate an object, convert it to a [Collection].
              If necessary, the manipulated [Collection] can be converted back to an [Object].
              
              ```
              pigeon = new { name = "Pigeon"; age = 42 }
              manipulated = pigeon.toMap().mapKeys((key, value) -> key.reverse())
              manipulated.toDynamic() // new { eman = "Pigeon"; ega = 42 }
              ```
              """
            annotations = List()
            modifiers = Set("abstract", "external")
            name = "Object"
            typeParameters = List()
            superclass {
              location {
                line = 41
                column = 1
                displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
              }
              docComment = """
                The top type of the type hierarchy.
                
                Every type is a subtype of [Any].
                
                The following operators are supported for all values:
                ```
                value1 == value2 // equality
                value1 != value2 // inequality
                value.member     // member access
                value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
                value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
                value is String  // type test
                value as String  // type cast; throws an error unless `value is String`
                ```
                """
              annotations = List()
              modifiers = Set("abstract", "external")
              name = "Any"
              typeParameters = List()
              superclass = null
              supertype = null
              properties = Map()
              methods = Map("getClass", new {
                location {
                  line = 43
                  column = 3
                  displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
                }
                docComment = "Returns the class of [this]."
                annotations = List()
                modifiers = Set()
                name = "getClass"
                typeParameters = List()
                parameters = Map()
              }, "toString", new {
                location {
                  line = 48
                  column = 3
                  displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
                }
                docComment = """
                  Returns a string representation of [this].
                  
                  This method is used to convert the values of string interpolation expressions to strings.
                  """
                annotations = List()
                modifiers = Set()
                name = "toString"
                typeParameters = List()
                parameters = Map()
              }, "ifNonNull", new {
                location {
                  line = 53
                  column = 3
                  displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
                }
                docComment = """
                  Returns `this |> transform` if [this] is non-null, and [null] otherwise.
                  
                  This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
                  """
                annotations = List()
                modifiers = Set()
                name = "ifNonNull"
                typeParameters = List(new {
                  name = "Result"
                  variance = null
                })
                parameters = Map("transform", new {
                  name = "transform"
                })
              })
            }
            supertype {
              referent {
                location {
                  line = 41
                  column = 1
                  displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L41"
                }
                docComment = """
                  The top type of the type hierarchy.
                  
                  Every type is a subtype of [Any].
                  
                  The following operators are supported for all values:
                  ```
                  value1 == value2 // equality
                  value1 != value2 // inequality
                  value.member     // member access
                  value?.member    // conditional member access; returns `value.member` if `value` is non-null and `null` otherwise
                  value ?? default // null coalescing; returns `value` if `value` is non-null and `default` otherwise
                  value is String  // type test
                  value as String  // type cast; throws an error unless `value is String`
                  ```
                  """
                annotations = List()
                modifiers = Set("abstract", "external")
                name = "Any"
                typeParameters = List()
                superclass = null
                supertype = null
                properties = Map()
                methods = Map("getClass", new {
                  location {
                    line = 43
                    column = 3
                    displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L43"
                  }
                  docComment = "Returns the class of [this]."
                  annotations = List()
                  modifiers = Set()
                  name = "getClass"
                  typeParameters = List()
                  parameters = Map()
                }, "toString", new {
                  location {
                    line = 48
                    column = 3
                    displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L48"
                  }
                  docComment = """
                    Returns a string representation of [this].
                    
                    This method is used to convert the values of string interpolation expressions to strings.
                    """
                  annotations = List()
                  modifiers = Set()
                  name = "toString"
                  typeParameters = List()
                  parameters = Map()
                }, "ifNonNull", new {
                  location {
                    line = 53
                    column = 3
                    displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L53"
                  }
                  docComment = """
                    Returns `this |> transform` if [this] is non-null, and [null] otherwise.
                    
                    This method is the complement of the `??` operator and the equivalent of an `Option` type's `map` and `flatMap` methods.
                    """
                  annotations = List()
                  modifiers = Set()
                  name = "ifNonNull"
                  typeParameters = List(new {
                    name = "Result"
                    variance = null
                  })
                  parameters = Map("transform", new {
                    name = "transform"
                  })
                })
              }
              typeArguments = List()
            }
            properties = Map()
            methods = Map()
          }
          typeArguments = List()
        }
        properties = Map()
        methods = Map("hasProperty", new {
          location {
            line = 1775
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1775"
          }
          docComment = "Tells if this object has a property with the given [name]."
          annotations = List()
          modifiers = Set()
          name = "hasProperty"
          typeParameters = List()
          parameters = Map("name", new {
            name = "name"
          })
        }, "getProperty", new {
          location {
            line = 1780
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1780"
          }
          docComment = """
            Returns the value of the property with the given [name].
            
            Throws if a property with this name does not exist.
            """
          annotations = List()
          modifiers = Set()
          name = "getProperty"
          typeParameters = List()
          parameters = Map("name", new {
            name = "name"
          })
        }, "getPropertyOrNull", new {
          location {
            line = 1785
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1785"
          }
          docComment = """
            Returns the value of the property with the given [name].
            
            Returns [null] if a property with this name does not exist.
            """
          annotations = List()
          modifiers = Set()
          name = "getPropertyOrNull"
          typeParameters = List()
          parameters = Map("name", new {
            name = "name"
          })
        }, "toDynamic", new {
          location {
            line = 1788
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1788"
          }
          docComment = "Converts this object to a [Dynamic] object."
          annotations = List()
          modifiers = Set()
          name = "toDynamic"
          typeParameters = List()
          parameters = Map()
        }, "toMap", new {
          location {
            line = 1791
            column = 3
            displayUri = "https://github.com/apple/pkl/blob/$commitId/stdlib/base.pkl#L1791"
          }
          docComment = "Converts this object to a [Map]."
          annotations = List()
          modifiers = Set()
          name = "toMap"
          typeParameters = List()
          parameters = Map()
        })
      }
      typeArguments = List()
    }
    properties = Map("rec", new {
      location {
        line = 6
        column = 3
        displayUri = "file:///$snippetsDir/input/api/reflectedDeclaration.pkl"
      }
      docComment = null
      annotations = List()
      modifiers = Set()
      name = "rec"
    })
    methods = Map()
  }
  typeArguments = List()
}
