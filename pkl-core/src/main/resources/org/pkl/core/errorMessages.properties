invalidModuleModifier=\
Modifier `{0}` is not applicable to modules.

invalidAmendingModuleModifier=\
Modifier `{0}` is not applicable to modules that amend another module.

invalidClassModifier=\
Modifier `{0}` is not applicable to classes.

invalidTypeAliasModifier=\
Modifier `{0}` is not applicable to type aliases.

invalidMethodModifier=\
Modifier `{0}` is not applicable to methods.

invalidPropertyModifier=\
Modifier `{0}` is not applicable to properties.

invalidObjectMemberModifier=\
Modifier `{0}` is not applicable to object members.

invalidConstObjectMemberModifier=\
Modifier `const` can only be applied to object members that are also `local`.

objectMethodMustBeLocal=\
Method needs a `local` modifier because it is defined in an object, not a class.

nonLocalObjectPropertyCannotHaveTypeAnnotation=\
A non-local object property cannot have a type annotation.

forGeneratorCannotGenerateProperties=\
A for-generator cannot generate object properties (only entries and elements).

forGeneratorCannotGenerateMethods=\
A for-generator cannot generate object methods (only entries and elements).

cannotIterateOverThisValue=\
Cannot iterate over value of type `{0}`.

cyclicTypeAlias=\
Type alias definitions must not be cyclic.

cannotInvokeAbstractMethod=\
Cannot invoke abstract method `{0}`.

cannotInvokeAbstractProperty=\
Cannot invoke abstract property `{0}`.

cannotInvokeSupermethodFromHere=\
Cannot invoke a supermethod from here.

notAModuleType=\
Module `{0}` cannot be extended or used as type because it amends another module.

invalidSupertype=\
`{0}` is not a valid supertype.

cannotExtendFinalModule=\
Cannot extend non-open module `{0}`.\n\
\n\
By default, modules are closed for extension.\n\
To make a module extensible, add an `open` modifier: `open module my_module; ...`

cannotExtendFinalClass=\
Cannot extend non-open class `{0}`.\n\
\n\
By default, classes are closed for extension.\n\
To make a class extensible, add an `open` modifier: `open class MyClass '{' ... '}'`

cannotExtendExternalClass=\
Cannot extend external class `{0}`.\n\
\n\
External classes can only be extended by standard library classes.

cannotInstantiateExternalClass=\
Cannot instantiate, or amend an instance of, external class `{0}`.\n\
\n\
To create an instance of an external class, use its literal syntax or constructor method.\n\
Examples:\n\
* `123` uses literal syntax to create an instance of class `Int`.\n\
* `Pair(1, 2)` uses the `Pair()` constructor method to create an instance of class `Pair`.

cannotInstantiateAbstractClass=\
Cannot instantiate abstract class `{0}`.\n\
\n\
Abstract classes cannot be instantiated.\n\
Instead, instantiate a concrete subclass.

cannotInstantiateType=\
Cannot instantiate type `{0}`.

cannotAmendPropertyDefinition=\
A property definition cannot be amended.\n\
\n\
Use definition syntax instead, for example `person: Person = new { ... }` instead of `person: Person { ... }`.

cannotAmendLocalPropertyDefinition=\
A local property definition cannot be amended.\n\
\n\
Use definition syntax instead, for example `local person = new { ... }` instead of `local person { ... }`.

unexpectedCurlyProbablyAmendsExpression=\
Unexpected token: `'{'`.\n\
\n\
If you meant to write an amends expression, wrap the parent in parentheses. Try: `({0}) '{' ... '}'`

moduleCannotExtendSelf=\
Module `{0}` cannot extend itself.

classCannotExtendSelf=\
Class `{0}` cannot extend itself.

moduleCannotAmendSelf=\
Module `{0}` cannot amend itself.

missingLocalPropertyValue=\
Missing property value.

cannotAssignFixedProperty=\
Cannot assign to fixed property `{0}`.

cannotAmendFixedProperty=\
Cannot amend fixed property `{0}`.

cannotAssignConstProperty=\
Cannot assign to const property `{0}`.

# suppress inspection "UnusedProperty"
cannotAmendConstProperty=\
Cannot amend const property `{0}`.

cannotInferParent=\
Cannot tell which parent to amend.\n\
\n\
Please specify a parent explicitly, for example `new Person { ... }` instead of `new { ... }`.

listingAmendmentCannotHaveParameters=\
Expected a function that returns a `Listing`, but got a `Listing`.

mappingAmendmentCannotHaveParameters=\
Expected a function that returns a `Mapping`, but got a `Mapping`.

objectAmendmentCannotHaveParameters=\
Expected a function that returns an object, but got an object.

wrongFunctionAmendmentParameterCount=\
Expected a function with {0} parameters, but got {1}.

wrongListingKeyType=\
Expected key of type `Int`, but got type `{0}`.

cannotAddElementWithEntrySyntax=\
Cannot use entry syntax to add an element.\n\
\n\
To add an element, use `obj { value }` instead of `obj { [nextIndex] = value }`.

objectCannotHaveElement=\
Object of type `{0}` cannot have an element.\n\
\n\
Only objects of type `Listing` and `Dynamic` can have elements. \
If you did not mean to add an element, you probably got the syntax wrong. \
For example, `obj '{' name }` adds an element, whereas `obj '{' name = "Pigeon" }` sets a property.

objectCannotHaveEntry=\
Object of type `{0}` cannot have an entry.\n\
\n\
Only objects of type `Mapping` and `Dynamic` can have entries. \
If you did not mean to add an entry, you probably got the syntax wrong. \
For example, `obj '{' ["name"] = "Pigeon" }` adds an entry, whereas `obj '{' name = "Pigeon" }` sets a property.

objectCannotHaveProperty=\
Object of type `{0}` cannot have a property (other than `default`).\n\
\n\
Objects of type `Listing` and `Mapping` can only have a `default` property (and `local` properties). \
If you did not mean to set a property, you probably got the syntax wrong. \
For example, `obj '{' name = "Pigeon" }` sets a property, whereas `obj '{' ["name"] = "Pigeon" }` adds an entry.

objectCannotHavePredicateMember=\
Object of type `{0}` cannot have a predicate member.

objectCannotHaveSpreadEntry=\
Cannot spread object containing entries into object of type `{0}`.

objectCannotHaveSpreadElement=\
Cannot spread object containing elements into object of type `{0}`.

objectCannotHaveSpreadProperty=\
Cannot spread object containing properties into object of type `{0}`.

objectSpreadDuplicateEntry=\
Cannot spread object because the enclosing object already has a declaration of entry key `{0}`.

objectSpreadDuplicateProperty=\
Cannot spread object because the enclosing object already has a declaration of property `{0}`.

cannotSpreadObject=\
Cannot spread value of type `{0}` into object of type `{1}`.

cannotDeclareTypeParameter=\
Only standard library members can have type parameters.

duplicateTypeParameter=\
Duplicate type parameter `{0}`.

notAParameterizableClass=\
Class `{0}` does not have type parameters.

notASubclassOfTyped=\
Class `{0}` is not a subtype of `Typed`.

expectedModule=\
Expected a module as argument, but got an object that amends a module.

wrongTypeArgumentCount=\
Expected {0} type argument(s) but got {1}.

duplicateDefinition=\
Duplicate definition of member `{0}`.

invalidCharacterEscapeSequence=\
Invalid character escape sequence `{0}`.\n\
\n\
Valid character escape sequences are:  {1}n  {1}r  {1}t  {1}"  {1}\\

unterminatedUnicodeEscapeSequence=\
Unterminated Unicode escape sequence `{0}`.\n\
\n\
Unicode escape sequences must end with `}`.

invalidUnicodeEscapeSequence=\
Invalid Unicode escape sequence `{0}`.\n\
\n\
Valid Unicode escape sequences are {1}'{'0'}' to {1}'{'10FFFF'}' (1-6 hexadecimal characters).

invalidSeparatorPosition=\
Unexpected separator character.\n\
\n\
The separator character (`_`) cannot follow `0x`, `0b`, `.`, `e`, or 'E' in a number literal.

stringContentMustBeginOnNewLine=\
The content of a multi-line string must begin on a new line.

closingStringDelimiterMustBeginOnNewLine=\
The closing delimiter of a multi-line string must begin on a new line.

stringIndentationMustMatchLastLine=\
Line must match or exceed indentation of the String's last line.

floatTooLarge=\
Float literal `{0}` is too large.

intTooLarge=\
Int literal `{0}` is too large.

invalidCodePoint=\
Decimal `{0}` is not a valid Unicode code point.

tooManyFunctionParameters=\
Function literals can have at most five parameters.

missingMethodBody=\
Method `{0}` is missing a body.

redundantHiddenModifier=\
Modifier `hidden` is redundant here; just use `local`.

redundantFixedModifier=\
Modifier `fixed` is redundant here; just use `local`.

redundantOpenModifier=\
Modifier `open` is redundant here; just use `abstract`.

methodMustBeConst=\
Cannot call method `{0}` from here because it is not `const`.\n\
\n\
To fix, do either of:\n\
1. Add modifier `const` to method `{0}`\n\
2. Self-import this module, and reference this method from the import.

propertyMustBeConst=\
Cannot reference property `{0}` from here because it is not `const`.\n\
\n\
To fix, do either of:\n\
1. Add modifier `const` to property `{0}`\n\
2. Self-import this module, and reference this property from the import.

moduleIsNotConst=\
Cannot reference `module` from const property `{0}`.

moduleIsNotConstClass=\
Cannot reference `module` within a class body.

moduleIsNotConstAnnotation=\
Cannot reference `module` within an annotation body.

outerIsNotConst=\
Cannot reference `outer` from here because it's not `const`.

thisIsNotConst=\
Cannot reference `this` from here because it is not `const`.

moduleMethodMustBeLocal=\
Method needs a `local` modifier.\n\
\n\
To define a non-local method, extend rather than amend the parent module (which must be `open` for extension).

classMustBeLocal=\
Class needs a `local` modifier.\n\
\n\
To define a non-local class, extend rather than amend the parent module (which must be `open` for extension).

typeAliasMustBeLocal=\
Type alias needs a `local` modifier.\n\
\n\
To define a non-local type alias, extend rather than amend the parent module (which must be `open` for extension).

externalMemberCannotHaveBody=\
External members cannot have a body.

abstractMemberCannotHaveBody=\
Abstract members cannot have a body.

methodNotDefined1=\
Method `{0}` is not defined for argument type `{1}`.

methodNotDefined2=\
Method `{0}` is not defined for argument types `{1}` and `{2}`.

methodNotDefined3=\
Method `{0}` is not defined for argument types `{1}`, `{2}`, and `{3}`.

methodNotDefined4=\
Method `{0}` is not defined for argument types `{1}`, `{2}`, `{3}`, and `{4}`.

methodNotDefined5=\
Method `{0}` is not defined for argument types `{1}`, `{2}`, `{3}`, `{4}`, and `{5}`.

cannotDefineExternalMember=\
External members can only be defined by standard library modules.

wrongFunctionArgumentCount=\
Expected {0} function arguments but got {1}.

noOuterScope=\
Top-level scope does not have an outer scope.

operatorNotDefined1=\
Operator `{0}` is not defined for operand type `{1}`.

operatorNotDefined2=\
Operator `{0}` is not defined for operand types `{1}` and `{2}`.

operatorNotDefinedLeft=\
Operator `{0}` is not defined for left operand type `{1}`.

charIndexOutOfRange=\
Character index `{0}` is out of range `{1}`..`{2}`.

elementIndexOutOfRange=\
Element index `{0}` is out of range `{1}`..`{2}`.

typeMismatch=\
Expected value of type `{0}`, but got type `{1}`.

typeMismatch2=\
Expected value of type `{0}` or `{1}`, but got type `{2}`.

typeMismatchVersionConflict1=\
Module version conflict: Expected value of type `{0}` defined by module `{1}`, but got type `{0}` defined by module `{2}`.

typeMismatchVersionConflict2=\
Module version conflict: Expected value of type `{0}` defined in module `{1}`, but got type `{0}` defined in module `{2}`.

typeMismatchValue=\
Expected value of type `{0}`, but got `{1}`.

typeMismatchValue2=\
Expected value of type `{0}` or `{1}`, but got `{2}`.

typeMismatchDifferent=\
Expected value of type `{0}`, but got a different `{1}`.

typeMismatchBecause=\
* Value is not of type `{0}` because:

typeConstraintViolated=\
Type constraint `{0}` violated.

cannotFindPropertyInScope=\
Cannot find property `{0}`.

cannotFindPropertyInScopeListCandidates=\
Cannot find property `{0}`.\n\
\n\
Did you mean any of the following?\n\
{1}

cannotFindPropertyInModule=\
Cannot find property `{0}` in module `{1}`.\n\
\n\
Available properties in module `{1}`:\n\
{2}

cannotFindPropertyInModuleListCandidates=\
Cannot find property `{0}` in module `{1}`.\n\
\n\
Did you mean any of the following?\n\
{2}

cannotFindPropertyInObject=\
Cannot find property `{0}` in object of type `{1}`.\n\
\n\
Available properties:\n\
{2}

cannotFindPropertyInObjectListCandidates=\
Cannot find property `{0}` in object of type `{1}`.\n\
\n\
Did you mean any of the following?\n\
{2}

cannotFindMethodInScope=\
Cannot find method `{0}`.

cannotFindMethodInScopeListCandidates=\
Cannot find method `{0}`.\n\
\n\
Did you mean any of the following?\n\
{1}

cannotFindMethodInModule=\
Cannot find method `{0}` in module `{1}`.\n\
\n\
Available methods in module `{1}`:\n\
{2}

cannotFindMethodInModuleListCandidates=\
Cannot find method `{0}` in module `{1}`.\n\
\n\
Did you mean any of the following?\n\
{2}

cannotFindMethodInClass=\
Cannot find method `{0}` in class `{1}`.\n\
\n\
Available methods in class `{1}`:\n\
{2}

cannotFindMethodInClassListCandidates=\
Cannot find method `{0}` in class `{1}`.\n\
\n\
Did you mean any of the following?\n\
{2}

cannotFindKey=\
Cannot find key `{0}`.

cannotFindKeyListCandidates=\
Cannot find key `{0}`.\n\
\n\
Did you mean any of the following?\n\
{1}

missingMapValue=\
Number of `Map()` arguments must be a multiple of two: `Map(key1, value1, key2, value2, ..., keyN, valueN)`

undefinedValue=\
Undefined value.

undefinedPropertyValue=\
Tried to read property `{0}` but its value is undefined.

cannotFindModule=\
Cannot find module `{0}`.

ioErrorLoadingModule=\
I/O error loading module `{0}`.

ioErrorReadingResource=\
I/O error reading resource `{0}`.

ioErrorResolvingGlob=\
I/O error resolving glob pattern `{0}`.

ioErrorReadingTestOutputFile=\
I/O error reading test output file `{0}`.

ioErrorWritingTestOutputFile=\
I/O error writing test output file `{0}`.

invalidOutputFileStructure=\
Test output file `{0}` has invalid structure (delete the file and rerun the test).

cannotEvaluateNonFileBasedTestModule=\
Cannot evaluate test module `{0}` because it is not located on the file system.

noDescendentPathBetweenModules=\
No descendent path exists between modules `{0}` and `{1}`.

noModuleLoaderRegistered=\
No module loader is registered for module `{0}`.

noResourceReaderRegistered=\
No resource reader is registered for scheme `{0}`.

cannotFindCollectionElement=\
Cannot find element in collection.

cannotFindMatchingCollectionElement=\
Cannot find matching element in collection.

expectedNonEmptyCollection=\
Expected a non-empty collection.

expectedSingleElementCollection=\
Expected a single-element collection.

cannotFlattenCollectionWithNonCollectionElement=\
Cannot flatten a collection containing a non-collection element.

integerOverflow=\
Integer overflow.

divisionByZero=\
Division by zero.

cannotConvertLargeFloat=\
Cannot convert Float `{0}` to Int because it is too large.

cannotConvertNonFiniteFloat=\
Cannot convert non-finite Float `{0}` to Int.

intValueTooLarge=\
Int value `{0}` is too large (only Int32 supported here).

expectedPositiveNumber=\
Expected a positive number, but got `{0}`.

cannotFindResource=\
Cannot find resource `{0}`.

cannotGlobTripleDots=\
Cannot combine glob imports with triple-dot module URIs.

cannotGlobUri=\
Cannot expand glob pattern `{0}` because scheme `{1}` is not globbable.

cannotResolveInLocalDependencyNotGlobbable=\
Cannot resolve import in local dependency because scheme `{0}` is not globbable.

cannotResolveInLocalDependencyNotGlobbableNorLocal=\
Cannot resolve import in local dependency because scheme `{0}` is not globbable and is not local.

expectedAnnotationClass=\
Expected an annotation class.

expectedNonNullValue=\
Expected a non-null value, but got `null`.

notAModuleImport=\
Expected `{0}` to be a module import, but it is not.

notAType=\
Expected `{0}` to be a type, but it is not.

cannotFindModuleImport=\
Cannot find module import `{0}`.

cannotFindQualifiedType=\
Cannot find type `{0}` in module `{1}`.

cannotFindSimpleType=\
Cannot find type `{0}`.\n\
\n\
Searched in the following places:\n\
* Module `{1}` and any supermodules\n\
* Module `pkl#base`

cannotRenderType=\
Cannot render value of type `{0}` as {1}.

cannotRenderValue=\
Cannot render value `{0}` as {1}.

cannotRenderTypeAddConverter=\
Cannot render value of type `{0}` as {1}.\n\
\n\
Consider adding a converter to `output.converters`.

cannotConvertToIsoDuration=\
Cannot convert duration `{0}` to ISO 8601 duration.

invalidTypeName=\
Invalid type name `{0}`.\n\
\n\
A qualified type name consists of a module import name and a type name.\n\
Example: `importedModule.SomeClass`

cannotRenderNonStringMap=\
Cannot render map with non-string key as {0}.

cannotRenderObjectWithNonStringKey=\
Cannot render object with non-string key as {0}.

cannotRenderNonScalarMapKey=\
Cannot render map with a non-scalar, floating point or byte array key.

cannotRenderNonScalarMapKeyType=\
Cannot render map with a non-scalar, floating point or byte array key type.

cannotRenderObjectWithElementsAndOtherMembers=\
Cannot render object with both elements and properties/entries as {0}.

inlineNotSupportedHere=\
`xml.Inline` is not supported here.

elementNotSupportedHere=\
`xml.Element` is not supported here.

invalidXmlName=\
Invalid XML {0} {1} name: `{2}`

doesNotContainLiteralMatch=\
String does not contain a match for literal pattern.

doesNotContainRegexMatch=\
String does not contain a match for regex pattern.

cannotParseStringAs=\
Cannot parse string as `{0}`.

expectedAnException=\
Expected an exception, but none was thrown.

cannotEvaluateRelativeModuleUri=\
Cannot evaluate relative module URI `{0}`.

cannotAnalyzeRelativeModuleUri=\
Cannot analyze relative module URI `{0}`.

invalidModuleUri=\
Module URI `{0}` has invalid syntax.

invalidModuleUriMissingSlash=\
Module URI `{0}` is missing a `/` after `{1}:`.

invalidUriMissingFragment=\
Expected URI to contain a fragment.\n\
\n\
The URI must end in `#`, followed by a path string. \
For example: `package://example.com/my/project@1.0.0#/path/to/file.pkl`.

invalidResourceUri=\
Resource URI `{0}` has invalid syntax.

invalidGlobPattern=\
Invalid glob pattern `{0}`.

invalidGlobUnsupportedFeature=\
Glob patterns do not support named character classes, collating symbols, nor equivalence class expressions.

invalidGlobUnclosedSubpattern=\
Missing `}` character to terminate sub-pattern.

invalidGlobMissingCharacterClassTerminator=\
Missing `]` to terminate character class.

invalidGlobInvalidCharacterInCharacterClass=\
The character `{0}` is not valid in a character class.

invalidGlobExtGlob=\
Extebded globbing features are not supported.

invalidGlobNestedSubpattern=\
Sub-patterns cannot be nested. To fix, remove or escape the inner `{` character.

invalidGlobInvalidTerminatingCharacter=\
The backslash (`\\`) is the escape character, and cannot terminate a glob pattern.

invalidGlobInvalidEscapeCharacter=\
Invalid escape character `\\{0}`.

invalidGlobTooComplex=\
The glob pattern is too complex.

# used as {1} in invalidModuleUri and invalidResourceUri
invalidTripleDotSyntax=\
expected `...` or `.../path/to/my_module.pkl`

cannotResolveTripleDotImports=\
Cannot resolve a triple-dot import from module URI `{0}`.\n\
\n\
Triple-dot imports may only be resolved by module schemes that are considered local, and have hierarchical URIs.

moduleDoesNotSupportDependencies=\
Module `{0}` does not support importing dependencies.\n\
\n\
Dependencies can only be imported in modules that belong to a project, or within a package.

cannotHaveRelativeImport=\
Module `{0}` cannot have a relative import URI.

cannotHaveRelativeResource=\
Module `{0}` cannot have a relative resource URI.

cannotHaveRelativeFragment=\
Cannot have a relative fragment path `{0}`.\n\
\n\
The fragment of this URI is interpreted as a path, and it must be absolute (it should start with `/`).

resourceNotInAllowList=\
Refusing to read resource `{0}` because it does not match any entry in the resource allowlist (`--allowed-resources`).

moduleNotInAllowList=\
Refusing to load module `{0}` because it does not match any entry in the module allowlist (`--allowed-modules`).

insufficientModuleTrustLevel=\
Refusing to import module `{0}` because importing module `{1}` has an insufficient trust level.

invalidRegexSyntax=\
Syntax error in regex `{0}`: {1}

errorInRegexReplacement=\
Error replacing matches for regex `{0}` with `{1}`: `{2}`

invalidPcfTopLevelValue=\
The top-level value of a Pcf document must have type `Typed` or `Dynamic`, but got type `{0}`.

invalidYamlStreamTopLevelValue=\
The top-level value of a YAML stream must have type `Listing`, `List`, or `Set`, but got type `{0}`.

invalidPListTopLevelValue=\
The top-level value of an XML property list must have type `Typed`, `Dynamic`, `Listing`, `Mapping`, `List`, `Set`, or `Map`, but got type `{0}`.

invalidPropertiesTopLevelValue=\
The top-level value of a Java properties file must have type `Typed`, `Dynamic`, `Mapping`, or `Map`, but got type `{0}`.

invalidProtobufTopLevelValue=\
The top-level value of a protobuf file must have type `Typed`, but got type `{0}`.

cannotResolveTypeForProtobuf=\
Failed to resolve type required for rendering protobuf.\n\
\n\
Consider adding a type annotation.

cannotRenderSubtypeForProtobuf=\
Can not render subtype {0} of specified type {1} in protobuf.

cannotExportValue=\
A value of type `{0}` cannot be exported.

incompatiblePklVersion=\
Module `{0}` requires Pkl version {1} or higher, but your Pkl version is {2}.

missingDelimiter=\
Missing `{0}` delimiter.

wrongDelimiter=\
Expected delimiter `{0}`, but got `{1}`.

danglingDelimiter=\
Unmatched delimiter `{0}`.

missingCommaSeparator=\
Missing `,` separator.

missingFixedModifier=\
Missing modifier `fixed`.\n\
\n\
Property `{0}` must be declared fixed, because it overrides a fixed property on parent class `{1}`.

cannotApplyFixedModifier=\
Modifier `fixed` cannot be applied to property `{0}`.\n\
\n\
Property `{0}` cannot be declared fixed, because it overrides a non-fixed property on parent class `{1}`.

missingConstModifier=\
Missing modifier `const`.\n\
\n\
Property `{0}` must be declared const, because it overrides a const property on parent class `{1}`.

cannotApplyConstModifier=\
Modifier `const` cannot be applied to property `{0}`.\n\
\n\
Property `{0}` cannot be declared const, because it overrides a non-const property on parent class `{1}`.

unseparatedObjectMembers=\
Object members must be separated by whitespace, newline, or semicolon.

unsupportedResourceType=\
Resource reader `{0}` returned unsupported resource type `{1}`.

invalidConverterPath=\
Converter path `{0}` has invalid syntax.

jsonParseError=\
Error parsing JSON document.

yamlParseError=\
Error parsing YAML document.

yamlParseErrorTooManyAliases=\
Error parsing YAML document: The number of aliases for collection nodes exceeds the allowed maximum of {0}.\n\
\n\
To increase the allowed maximum, set `YamlRenderer.maxCollectionAliases`.

evaluationTimedOut=\
Evaluation timed out after {0,number,#.##} second(s).

cannotFindStdLibModule=\
Cannot find standard library module `pkl:{0}`.\n\
\n\
Available standard library modules:\n\
{1}

internalStdLibClass=\
Class `{0}` can only be used by the standard library.

cannotAssignToNothing=\
Expected `nothing`, but got type `{0}`.\n\
\n\
`nothing` is typically used as the return type of functions that throw errors.

constantMicrobenchmark=\
Microbenchmark is a constant expression.

stackOverflow=\
A stack overflow occurred.

multipleUnionDefaults=\
A type union cannot have more than one default type.

notAUnion=\
Only type unions can have a default marker (*).

invalidModuleOutput=\
Expected `{0}` of module `{3}` to be of type `{1}`, but got type `{2}`.

cannotResolveDependencyWithoutHierarchicalUris=\
Cannot import dependency because project URI `{0}` does not have a hierarchical path.

cannotResolveDependencyNoProject=\
Cannot import dependency because there is no project found.\n\
\n\
If you meant to import a path that starts with `@`, prefix the path with `./` (e.g. `import "./@myPath").\n\
If you meant to import a dependency, ensure that this file is within a directory that contains a PklProject module.

cannotFindDependencyInProject=\
Cannot find a dependency named `{0}`, because it is not declared in the current project.\n\
\n\
To fix this, add it to the `dependencies` section of your `PklProject` file, and resolve your dependencies.

cannotResolveDependencyFromReaderWithOpaqueUris=\
Cannot resolve dependencies from module reader with opaque URIs.\n\
\n\
Module reader for scheme `{0}` does not support hierarchical URIs.

cannotFindDependencyInPackage=\
Cannot find dependency named `{0}`, because it was not declared in package `{1}`.

missingVersionInPackageUri=\
Invalid path `{0}`.\n\
\n\
A package URI must have its path suffixed by its version (e.g. `package://example.com/my/package@1.0.0`).

missingPathInPackageUri=\
Package URIs must have a path component.\n\
\n\
For example, `/my/package@1.0.0` in URI `project://example.com/my/package@1.0.0`.

invalidSchemeInPackageUri=\
Invalid scheme: `{0}`.\n\
\n\
Package URIs must have a `package:` scheme.

missingAuthorityInPackageUri=\
Package URIs must have an authority component.\n\
\n\
For example, `example.com` in URI `project://example.com/my/package@1.0.0`.

unexpectedChecksumInPackageUri=\
Did not expect to find a checksum component in this package URI.

cannotLoadProjectDepsJson=\
Encountered an error when attempting to load `PklProject.deps.json` at `{0}`.\n\
\n\
Try running `pkl project resolve` within the project directory to create a new set of dependencies.

invalidProjectDepsJson=\
Cannot resolve dependency because file `{0}` is malformed.\n\
Run `pkl project resolve` to re-create this file.\n\
\n\
Details: {1}

unresolvedProjectDependency=\
Did not find a resolved dependency for package `{0}`.\n\
\n\
Run `pkl project resolve` to update resolved dependencies.

projectDependenciesOutOfDateInPackage=\
Transitive dependency declared by package `{0}` is newer than what is declared in `PklProject.deps.json`.\n\
\n\
Declared: `{1}`\n\
Resolved: `{2}`\n\
\n\
Run `pkl project resolve` to update resolved dependencies.

projectDependenciesOutOfDateInProject=\
Project `{0}` declares a dependency on a package that is newer than what is declared in `PklProject.deps.json`.\n\
\n\
Declared: `{1}`\n\
Resolved: `{2}`\n\
\n\
Run `pkl project resolve` to update resolved dependencies.

invalidPackageZipChecksum=\
Cannot download package `{0}` because the computed checksum does not match the expected checksum.\n\
\n\
Computed checksum: "{1}"\n\
Expected checksum: "{2}"\n\
Asset URL: "{3}"

invalidPackageMetadataChecksum=\
Cannot download package `{0}` because the computed checksum for package metadata does not match the expected checksum.\n\
\n\
Computed checksum: "{1}"\n\
Expected checksum: "{2}"\n\
Asset URL: "{3}"

badHttpStatusCode=\
Received unexpected status code `{0}` when making request `GET {1}`.

ioErrorMakingHttpGet=\
Exception when making request `GET {0}`:\n\
{1}

errorConnectingToHost=\
Error connecting to host `{0}`.

errorSslHandshake=\
Error during SSL handshake with host `{0}`:\n\
{1}

cannotInitHttpClient=\
Error initializing HTTP client:\n\
{0}

cannotFindCertFile=\
Cannot find CA certificate file `{0}`.

cannotReadCertFile=\
Error reading CA certificate file `{0}`:\n\
{1}

cannotParseCertFile=\
Error parsing CA certificate file `{0}`:\n\
{1}

emptyCertFile=\
CA certificate file `{0}` is empty.

invalidPackageZipUrl=\
Expected the zip asset for package `{0}` to be an HTTPS URI, but got `{1}`.

invalidDependencyMetadata=\
Received invalid dependency metadata for package `{0}` when making request `GET {1}`:\n\
{2}

malformedJson=\
Malformed JSON: {0}.\n\
\n\
Original input:\n\
`{1}`

badJsonFormat1=\
Expected object of type `{0}`, but got type `{1}`.

badJsonFormat2=\
Expected object of type `{0}` at field `{1}`, but got type `{2}`.

badJsonInvalidMapping=\
Failed to parse key `{0}`: {1}.

badJsonMissingField=\
Cannot find field "{0}" in object {1}.

unsupportedProjectDepsVersion=\
Unsupported schemaVersion for `PklProject.deps.json`: {0}.\n\
\n\
Run `pkl project resolve` to re-generate this file.

invalidDeclaredChecksum=\
Computed checksum did not match declared checksum for dependency `{0}`.\n\
\n\
Computed: "{1}"\n\
Declared: "{2}"

invalidRelativeProjectImport=\
Path `{0}` includes path segments that are outside the project root directory.

noPackageDefinedByProject=\
No package was declared in project `{0}`.\n\
\n\
Add a `package` section to the PklProject file.

relativePathPropertyDefinedByProjectFromNonFileUri=\
Invalid property specified in project `{0}`\n\
\n\
Property `{1}` is only permitted in PklProject files loaded from `file:` URIs.

invalidUsageOfProjectFromNonFileUri=\
Invalid usage of project `{0}`\n\
\n\
This action can only be performed with PklProject files loaded from `file:` URIs.

packageTestsFailed=\
Failed to create package `{0}`, because its API tests are failing.

packageAlreadyPublishedWithDifferentContents=\
Package `{0}` was already published with different contents.\n\
\n\
Computed checksum: {1}\n\
Published checksum: {2}\n\
\n\
This likely means that you need to bump the package\'s version.

unableToAccessPublishedPackage=\
Failed trying to fetch package `{0}` from `{1}` (response code `{2}`).

unexpectedPackageLoadError=\
Unexpected error resolving packages for project {0}.\n\
\n\
{1}

missingProjectInPackageCommand=\
Cannot package project `{0}` because it depends on local project `{1}`, which is not included for packaging.\n\
\n\
Provide both projects as arguments to the `pkl project package` command.\n\
\n\
Example: `pkl project package "{0}" "{1}"`

invalidPackageUriChecksum=\
Invalid checksum specification: `{0}`.\n\
\n\
Checksums in package uris must have form `sha256:<checksum>`.

unknownChecksumAlgorithm=\
Unrecognized checksum algorithm: `{0}`.\n\
\n\
The only supported checksum algorithm is sha256.

testsFailed=\
Tests failed.

expectedJarOrFileUrl=\
Certificates can only be loaded from `jar:` or `file:` URLs, but got:\n\
{0}

cannotFindBuiltInCertificates=\
Cannot find Pkl's trusted CA certificates on the class path.\n\
To fix this problem, add dependendy `org.pkl:pkl-certs`.

# suppress inspection "HttpUrlsUsage"
malformedProxyAddress=\
Malformed proxy URI (expecting `http://<host>[:<port>]`): `{0}`.

cannotAnalyzeBecauseSyntaxError=\
Found a syntax error when parsing module `{0}`.
